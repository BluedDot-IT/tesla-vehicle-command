// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: vcsec.proto

package vcsec

import (
	errors "github.com/teslamotors/vehicle-command/pkg/protocol/protobuf/errors"
	keys "github.com/teslamotors/vehicle-command/pkg/protocol/protobuf/keys"
	signatures "github.com/teslamotors/vehicle-command/pkg/protocol/protobuf/signatures"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Activity_E int32

const (
	Activity_E_ACTIVITY_NONE               Activity_E = 0
	Activity_E_ACTIVITY_STATIONARY         Activity_E = 1
	Activity_E_ACTIVITY_MOTION             Activity_E = 2
	Activity_E_ACTIVITY_SIGNIFICANT_MOTION Activity_E = 3
)

// Enum value maps for Activity_E.
var (
	Activity_E_name = map[int32]string{
		0: "ACTIVITY_NONE",
		1: "ACTIVITY_STATIONARY",
		2: "ACTIVITY_MOTION",
		3: "ACTIVITY_SIGNIFICANT_MOTION",
	}
	Activity_E_value = map[string]int32{
		"ACTIVITY_NONE":               0,
		"ACTIVITY_STATIONARY":         1,
		"ACTIVITY_MOTION":             2,
		"ACTIVITY_SIGNIFICANT_MOTION": 3,
	}
)

func (x Activity_E) Enum() *Activity_E {
	p := new(Activity_E)
	*p = x
	return p
}

func (x Activity_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Activity_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[0].Descriptor()
}

func (Activity_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[0]
}

func (x Activity_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Activity_E.Descriptor instead.
func (Activity_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{0}
}

type AlertConfirmation int32

const (
	AlertConfirmation_ALERT_CONFIRMATION_NONE                     AlertConfirmation = 0
	AlertConfirmation_ALERT_CONFIRMATION_PEER_REMOVED_INFORMATION AlertConfirmation = 1
)

// Enum value maps for AlertConfirmation.
var (
	AlertConfirmation_name = map[int32]string{
		0: "ALERT_CONFIRMATION_NONE",
		1: "ALERT_CONFIRMATION_PEER_REMOVED_INFORMATION",
	}
	AlertConfirmation_value = map[string]int32{
		"ALERT_CONFIRMATION_NONE":                     0,
		"ALERT_CONFIRMATION_PEER_REMOVED_INFORMATION": 1,
	}
)

func (x AlertConfirmation) Enum() *AlertConfirmation {
	p := new(AlertConfirmation)
	*p = x
	return p
}

func (x AlertConfirmation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertConfirmation) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[1].Descriptor()
}

func (AlertConfirmation) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[1]
}

func (x AlertConfirmation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertConfirmation.Descriptor instead.
func (AlertConfirmation) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{1}
}

type AppDeviceInfoRequest_E int32

const (
	AppDeviceInfoRequest_E_APP_DEVICE_INFO_REQUEST_NONE             AppDeviceInfoRequest_E = 0
	AppDeviceInfoRequest_E_APP_DEVICE_INFO_REQUEST_GET_MODEL_NUMBER AppDeviceInfoRequest_E = 1
)

// Enum value maps for AppDeviceInfoRequest_E.
var (
	AppDeviceInfoRequest_E_name = map[int32]string{
		0: "APP_DEVICE_INFO_REQUEST_NONE",
		1: "APP_DEVICE_INFO_REQUEST_GET_MODEL_NUMBER",
	}
	AppDeviceInfoRequest_E_value = map[string]int32{
		"APP_DEVICE_INFO_REQUEST_NONE":             0,
		"APP_DEVICE_INFO_REQUEST_GET_MODEL_NUMBER": 1,
	}
)

func (x AppDeviceInfoRequest_E) Enum() *AppDeviceInfoRequest_E {
	p := new(AppDeviceInfoRequest_E)
	*p = x
	return p
}

func (x AppDeviceInfoRequest_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppDeviceInfoRequest_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[2].Descriptor()
}

func (AppDeviceInfoRequest_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[2]
}

func (x AppDeviceInfoRequest_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppDeviceInfoRequest_E.Descriptor instead.
func (AppDeviceInfoRequest_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{2}
}

type AppOperatingSystem int32

const (
	AppOperatingSystem_UNKNOWN AppOperatingSystem = 0
	AppOperatingSystem_ANDROID AppOperatingSystem = 1
	AppOperatingSystem_IOS     AppOperatingSystem = 2
)

// Enum value maps for AppOperatingSystem.
var (
	AppOperatingSystem_name = map[int32]string{
		0: "UNKNOWN",
		1: "ANDROID",
		2: "IOS",
	}
	AppOperatingSystem_value = map[string]int32{
		"UNKNOWN": 0,
		"ANDROID": 1,
		"IOS":     2,
	}
)

func (x AppOperatingSystem) Enum() *AppOperatingSystem {
	p := new(AppOperatingSystem)
	*p = x
	return p
}

func (x AppOperatingSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppOperatingSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[3].Descriptor()
}

func (AppOperatingSystem) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[3]
}

func (x AppOperatingSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppOperatingSystem.Descriptor instead.
func (AppOperatingSystem) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{3}
}

type AuthenticationLevel_E int32

const (
	AuthenticationLevel_E_AUTHENTICATION_LEVEL_NONE   AuthenticationLevel_E = 0
	AuthenticationLevel_E_AUTHENTICATION_LEVEL_UNLOCK AuthenticationLevel_E = 1
	AuthenticationLevel_E_AUTHENTICATION_LEVEL_DRIVE  AuthenticationLevel_E = 2
)

// Enum value maps for AuthenticationLevel_E.
var (
	AuthenticationLevel_E_name = map[int32]string{
		0: "AUTHENTICATION_LEVEL_NONE",
		1: "AUTHENTICATION_LEVEL_UNLOCK",
		2: "AUTHENTICATION_LEVEL_DRIVE",
	}
	AuthenticationLevel_E_value = map[string]int32{
		"AUTHENTICATION_LEVEL_NONE":   0,
		"AUTHENTICATION_LEVEL_UNLOCK": 1,
		"AUTHENTICATION_LEVEL_DRIVE":  2,
	}
)

func (x AuthenticationLevel_E) Enum() *AuthenticationLevel_E {
	p := new(AuthenticationLevel_E)
	*p = x
	return p
}

func (x AuthenticationLevel_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationLevel_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[4].Descriptor()
}

func (AuthenticationLevel_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[4]
}

func (x AuthenticationLevel_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationLevel_E.Descriptor instead.
func (AuthenticationLevel_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{4}
}

type AuthenticationReason_E int32

const (
	AuthenticationReason_E_AUTHENTICATIONREASON_NOT_DOCUMENTED                      AuthenticationReason_E = 0
	AuthenticationReason_E_AUTHENTICATIONREASON_IDENTIFICATION                      AuthenticationReason_E = 1
	AuthenticationReason_E_AUTHENTICATIONREASON_POWER_ON_VEHICLE_REQUEST            AuthenticationReason_E = 2
	AuthenticationReason_E_AUTHENTICATIONREASON_GTW_REQUEST                         AuthenticationReason_E = 3
	AuthenticationReason_E_AUTHENTICATIONREASON_UI_UNLOCK_PASSIVE_AUTH              AuthenticationReason_E = 4
	AuthenticationReason_E_AUTHENTICATIONREASON_PASSIVE_UNLOCK_EXTERIOR_HANDLE_PULL AuthenticationReason_E = 5
	AuthenticationReason_E_AUTHENTICATIONREASON_PASSIVE_UNLOCK_INTERIOR_HANDLE_PULL AuthenticationReason_E = 6
	AuthenticationReason_E_AUTHENTICATIONREASON_PASSIVE_UNLOCK_AUTOPRESENT_DOOR     AuthenticationReason_E = 7
	AuthenticationReason_E_AUTHENTICATIONREASON_ENTERED_HIGHER_AUTH_ZONE            AuthenticationReason_E = 8
	AuthenticationReason_E_AUTHENTICATIONREASON_WALK_UP_UNLOCK                      AuthenticationReason_E = 9
	AuthenticationReason_E_AUTHENTICATIONREASON_IMMOBILIZER                         AuthenticationReason_E = 10
)

// Enum value maps for AuthenticationReason_E.
var (
	AuthenticationReason_E_name = map[int32]string{
		0:  "AUTHENTICATIONREASON_NOT_DOCUMENTED",
		1:  "AUTHENTICATIONREASON_IDENTIFICATION",
		2:  "AUTHENTICATIONREASON_POWER_ON_VEHICLE_REQUEST",
		3:  "AUTHENTICATIONREASON_GTW_REQUEST",
		4:  "AUTHENTICATIONREASON_UI_UNLOCK_PASSIVE_AUTH",
		5:  "AUTHENTICATIONREASON_PASSIVE_UNLOCK_EXTERIOR_HANDLE_PULL",
		6:  "AUTHENTICATIONREASON_PASSIVE_UNLOCK_INTERIOR_HANDLE_PULL",
		7:  "AUTHENTICATIONREASON_PASSIVE_UNLOCK_AUTOPRESENT_DOOR",
		8:  "AUTHENTICATIONREASON_ENTERED_HIGHER_AUTH_ZONE",
		9:  "AUTHENTICATIONREASON_WALK_UP_UNLOCK",
		10: "AUTHENTICATIONREASON_IMMOBILIZER",
	}
	AuthenticationReason_E_value = map[string]int32{
		"AUTHENTICATIONREASON_NOT_DOCUMENTED":                      0,
		"AUTHENTICATIONREASON_IDENTIFICATION":                      1,
		"AUTHENTICATIONREASON_POWER_ON_VEHICLE_REQUEST":            2,
		"AUTHENTICATIONREASON_GTW_REQUEST":                         3,
		"AUTHENTICATIONREASON_UI_UNLOCK_PASSIVE_AUTH":              4,
		"AUTHENTICATIONREASON_PASSIVE_UNLOCK_EXTERIOR_HANDLE_PULL": 5,
		"AUTHENTICATIONREASON_PASSIVE_UNLOCK_INTERIOR_HANDLE_PULL": 6,
		"AUTHENTICATIONREASON_PASSIVE_UNLOCK_AUTOPRESENT_DOOR":     7,
		"AUTHENTICATIONREASON_ENTERED_HIGHER_AUTH_ZONE":            8,
		"AUTHENTICATIONREASON_WALK_UP_UNLOCK":                      9,
		"AUTHENTICATIONREASON_IMMOBILIZER":                         10,
	}
)

func (x AuthenticationReason_E) Enum() *AuthenticationReason_E {
	p := new(AuthenticationReason_E)
	*p = x
	return p
}

func (x AuthenticationReason_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationReason_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[5].Descriptor()
}

func (AuthenticationReason_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[5]
}

func (x AuthenticationReason_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationReason_E.Descriptor instead.
func (AuthenticationReason_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{5}
}

type AuthenticationRejection_E int32

const (
	AuthenticationRejection_E_AUTHENTICATIONREJECTION_NONE              AuthenticationRejection_E = 0
	AuthenticationRejection_E_AUTHENTICATIONREJECTION_DEVICE_STATIONARY AuthenticationRejection_E = 1
	AuthenticationRejection_E_AUTHENTICATIONREJECTION_PASSIVE_DISABLED  AuthenticationRejection_E = 2
	AuthenticationRejection_E_AUTHENTICATIONREJECTION_NO_TOKEN          AuthenticationRejection_E = 3
)

// Enum value maps for AuthenticationRejection_E.
var (
	AuthenticationRejection_E_name = map[int32]string{
		0: "AUTHENTICATIONREJECTION_NONE",
		1: "AUTHENTICATIONREJECTION_DEVICE_STATIONARY",
		2: "AUTHENTICATIONREJECTION_PASSIVE_DISABLED",
		3: "AUTHENTICATIONREJECTION_NO_TOKEN",
	}
	AuthenticationRejection_E_value = map[string]int32{
		"AUTHENTICATIONREJECTION_NONE":              0,
		"AUTHENTICATIONREJECTION_DEVICE_STATIONARY": 1,
		"AUTHENTICATIONREJECTION_PASSIVE_DISABLED":  2,
		"AUTHENTICATIONREJECTION_NO_TOKEN":          3,
	}
)

func (x AuthenticationRejection_E) Enum() *AuthenticationRejection_E {
	p := new(AuthenticationRejection_E)
	*p = x
	return p
}

func (x AuthenticationRejection_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationRejection_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[6].Descriptor()
}

func (AuthenticationRejection_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[6]
}

func (x AuthenticationRejection_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationRejection_E.Descriptor instead.
func (AuthenticationRejection_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{6}
}

type BLEAdditionalTRIMApplied_E int32

const (
	BLEAdditionalTRIMApplied_E_BLE_ADDITIONAL_TRIM_APPLIED_NONE        BLEAdditionalTRIMApplied_E = 0
	BLEAdditionalTRIMApplied_E_BLE_ADDITIONAL_TRIM_APPLIED_APPLIED     BLEAdditionalTRIMApplied_E = 1
	BLEAdditionalTRIMApplied_E_BLE_ADDITIONAL_TRIM_APPLIED_NOT_APPLIED BLEAdditionalTRIMApplied_E = 2
)

// Enum value maps for BLEAdditionalTRIMApplied_E.
var (
	BLEAdditionalTRIMApplied_E_name = map[int32]string{
		0: "BLE_ADDITIONAL_TRIM_APPLIED_NONE",
		1: "BLE_ADDITIONAL_TRIM_APPLIED_APPLIED",
		2: "BLE_ADDITIONAL_TRIM_APPLIED_NOT_APPLIED",
	}
	BLEAdditionalTRIMApplied_E_value = map[string]int32{
		"BLE_ADDITIONAL_TRIM_APPLIED_NONE":        0,
		"BLE_ADDITIONAL_TRIM_APPLIED_APPLIED":     1,
		"BLE_ADDITIONAL_TRIM_APPLIED_NOT_APPLIED": 2,
	}
)

func (x BLEAdditionalTRIMApplied_E) Enum() *BLEAdditionalTRIMApplied_E {
	p := new(BLEAdditionalTRIMApplied_E)
	*p = x
	return p
}

func (x BLEAdditionalTRIMApplied_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BLEAdditionalTRIMApplied_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[7].Descriptor()
}

func (BLEAdditionalTRIMApplied_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[7]
}

func (x BLEAdditionalTRIMApplied_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BLEAdditionalTRIMApplied_E.Descriptor instead.
func (BLEAdditionalTRIMApplied_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{7}
}

type BLEConfigCommandType_E int32

const (
	BLEConfigCommandType_E_BLE_CONFIG_COMMAND_TYPE_NONE  BLEConfigCommandType_E = 0
	BLEConfigCommandType_E_BLE_CONFIG_COMMAND_TYPE_READ  BLEConfigCommandType_E = 1
	BLEConfigCommandType_E_BLE_CONFIG_COMMAND_TYPE_WRITE BLEConfigCommandType_E = 2
)

// Enum value maps for BLEConfigCommandType_E.
var (
	BLEConfigCommandType_E_name = map[int32]string{
		0: "BLE_CONFIG_COMMAND_TYPE_NONE",
		1: "BLE_CONFIG_COMMAND_TYPE_READ",
		2: "BLE_CONFIG_COMMAND_TYPE_WRITE",
	}
	BLEConfigCommandType_E_value = map[string]int32{
		"BLE_CONFIG_COMMAND_TYPE_NONE":  0,
		"BLE_CONFIG_COMMAND_TYPE_READ":  1,
		"BLE_CONFIG_COMMAND_TYPE_WRITE": 2,
	}
)

func (x BLEConfigCommandType_E) Enum() *BLEConfigCommandType_E {
	p := new(BLEConfigCommandType_E)
	*p = x
	return p
}

func (x BLEConfigCommandType_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BLEConfigCommandType_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[8].Descriptor()
}

func (BLEConfigCommandType_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[8]
}

func (x BLEConfigCommandType_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BLEConfigCommandType_E.Descriptor instead.
func (BLEConfigCommandType_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{8}
}

type BLEPresence int32

const (
	BLEPresence_BLE_PRESENCE_NOT_PRESENT BLEPresence = 0
	BLEPresence_BLE_PRESENCE_PRESENT     BLEPresence = 1
)

// Enum value maps for BLEPresence.
var (
	BLEPresence_name = map[int32]string{
		0: "BLE_PRESENCE_NOT_PRESENT",
		1: "BLE_PRESENCE_PRESENT",
	}
	BLEPresence_value = map[string]int32{
		"BLE_PRESENCE_NOT_PRESENT": 0,
		"BLE_PRESENCE_PRESENT":     1,
	}
)

func (x BLEPresence) Enum() *BLEPresence {
	p := new(BLEPresence)
	*p = x
	return p
}

func (x BLEPresence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BLEPresence) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[9].Descriptor()
}

func (BLEPresence) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[9]
}

func (x BLEPresence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BLEPresence.Descriptor instead.
func (BLEPresence) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{9}
}

type CertificateStatus_E int32

const (
	CertificateStatus_E_CERTIFICATE_STATUS_NONE        CertificateStatus_E = 0
	CertificateStatus_E_CERITFICATE_STATUS_NOT_WRITTEN CertificateStatus_E = 1
	CertificateStatus_E_CERTIFICATE_STATUS_WRITTEN     CertificateStatus_E = 2
)

// Enum value maps for CertificateStatus_E.
var (
	CertificateStatus_E_name = map[int32]string{
		0: "CERTIFICATE_STATUS_NONE",
		1: "CERITFICATE_STATUS_NOT_WRITTEN",
		2: "CERTIFICATE_STATUS_WRITTEN",
	}
	CertificateStatus_E_value = map[string]int32{
		"CERTIFICATE_STATUS_NONE":        0,
		"CERITFICATE_STATUS_NOT_WRITTEN": 1,
		"CERTIFICATE_STATUS_WRITTEN":     2,
	}
)

func (x CertificateStatus_E) Enum() *CertificateStatus_E {
	p := new(CertificateStatus_E)
	*p = x
	return p
}

func (x CertificateStatus_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateStatus_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[10].Descriptor()
}

func (CertificateStatus_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[10]
}

func (x CertificateStatus_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateStatus_E.Descriptor instead.
func (CertificateStatus_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{10}
}

type Device_Motion_Confidence int32

const (
	Device_Motion_Confidence_DEVICE_MOTION_CONFIDENCE_UNKNOWN Device_Motion_Confidence = 0
	Device_Motion_Confidence_DEVICE_MOTION_CONFIDENCE_LOW     Device_Motion_Confidence = 1
	Device_Motion_Confidence_DEVICE_MOTION_CONFIDENCE_MEDIUM  Device_Motion_Confidence = 2
	Device_Motion_Confidence_DEVICE_MOTION_CONFIDENCE_HIGH    Device_Motion_Confidence = 3
)

// Enum value maps for Device_Motion_Confidence.
var (
	Device_Motion_Confidence_name = map[int32]string{
		0: "DEVICE_MOTION_CONFIDENCE_UNKNOWN",
		1: "DEVICE_MOTION_CONFIDENCE_LOW",
		2: "DEVICE_MOTION_CONFIDENCE_MEDIUM",
		3: "DEVICE_MOTION_CONFIDENCE_HIGH",
	}
	Device_Motion_Confidence_value = map[string]int32{
		"DEVICE_MOTION_CONFIDENCE_UNKNOWN": 0,
		"DEVICE_MOTION_CONFIDENCE_LOW":     1,
		"DEVICE_MOTION_CONFIDENCE_MEDIUM":  2,
		"DEVICE_MOTION_CONFIDENCE_HIGH":    3,
	}
)

func (x Device_Motion_Confidence) Enum() *Device_Motion_Confidence {
	p := new(Device_Motion_Confidence)
	*p = x
	return p
}

func (x Device_Motion_Confidence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Motion_Confidence) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[11].Descriptor()
}

func (Device_Motion_Confidence) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[11]
}

func (x Device_Motion_Confidence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Motion_Confidence.Descriptor instead.
func (Device_Motion_Confidence) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{11}
}

type Device_Motion_State int32

const (
	Device_Motion_State_DEVICE_MOTION_UNKNOWN    Device_Motion_State = 0
	Device_Motion_State_DEVICE_MOTION_STATIONARY Device_Motion_State = 1
	Device_Motion_State_DEVICE_MOTION_WALKING    Device_Motion_State = 2
	Device_Motion_State_DEVICE_MOTION_RUNNING    Device_Motion_State = 3
	Device_Motion_State_DEVICE_MOTION_AUTOMOTIVE Device_Motion_State = 4
	Device_Motion_State_DEVICE_MOTION_CYCLING    Device_Motion_State = 5
)

// Enum value maps for Device_Motion_State.
var (
	Device_Motion_State_name = map[int32]string{
		0: "DEVICE_MOTION_UNKNOWN",
		1: "DEVICE_MOTION_STATIONARY",
		2: "DEVICE_MOTION_WALKING",
		3: "DEVICE_MOTION_RUNNING",
		4: "DEVICE_MOTION_AUTOMOTIVE",
		5: "DEVICE_MOTION_CYCLING",
	}
	Device_Motion_State_value = map[string]int32{
		"DEVICE_MOTION_UNKNOWN":    0,
		"DEVICE_MOTION_STATIONARY": 1,
		"DEVICE_MOTION_WALKING":    2,
		"DEVICE_MOTION_RUNNING":    3,
		"DEVICE_MOTION_AUTOMOTIVE": 4,
		"DEVICE_MOTION_CYCLING":    5,
	}
)

func (x Device_Motion_State) Enum() *Device_Motion_State {
	p := new(Device_Motion_State)
	*p = x
	return p
}

func (x Device_Motion_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Motion_State) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[12].Descriptor()
}

func (Device_Motion_State) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[12]
}

func (x Device_Motion_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Motion_State.Descriptor instead.
func (Device_Motion_State) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{12}
}

type GenealogyRequest_E int32

const (
	GenealogyRequest_E_GENEALOGYREQUEST_NONE                 GenealogyRequest_E = 0
	GenealogyRequest_E_GENEALOGYREQUEST_READ                 GenealogyRequest_E = 1
	GenealogyRequest_E_GENEALOGYREQUEST_KEYFOBINFO_READ      GenealogyRequest_E = 2
	GenealogyRequest_E_GENEALOGYREQUEST_TPWHEELUNITINFO_READ GenealogyRequest_E = 3
)

// Enum value maps for GenealogyRequest_E.
var (
	GenealogyRequest_E_name = map[int32]string{
		0: "GENEALOGYREQUEST_NONE",
		1: "GENEALOGYREQUEST_READ",
		2: "GENEALOGYREQUEST_KEYFOBINFO_READ",
		3: "GENEALOGYREQUEST_TPWHEELUNITINFO_READ",
	}
	GenealogyRequest_E_value = map[string]int32{
		"GENEALOGYREQUEST_NONE":                 0,
		"GENEALOGYREQUEST_READ":                 1,
		"GENEALOGYREQUEST_KEYFOBINFO_READ":      2,
		"GENEALOGYREQUEST_TPWHEELUNITINFO_READ": 3,
	}
)

func (x GenealogyRequest_E) Enum() *GenealogyRequest_E {
	p := new(GenealogyRequest_E)
	*p = x
	return p
}

func (x GenealogyRequest_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenealogyRequest_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[13].Descriptor()
}

func (GenealogyRequest_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[13]
}

func (x GenealogyRequest_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenealogyRequest_E.Descriptor instead.
func (GenealogyRequest_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{13}
}

type GenealogyStatus_E int32

const (
	GenealogyStatus_E_GENEALOGY_STATUS_NONE          GenealogyStatus_E = 0
	GenealogyStatus_E_GENEALOGY_STATUS_NOT_WRITTEN   GenealogyStatus_E = 1
	GenealogyStatus_E_GENEALOGY_STATUS_WRITE_SUCCESS GenealogyStatus_E = 2
	GenealogyStatus_E_GENEALOGY_STATUS_WRITE_FAILURE GenealogyStatus_E = 3
	GenealogyStatus_E_GENEALOGY_STATUS_READ_SUCCESS  GenealogyStatus_E = 4
	GenealogyStatus_E_GENEALOGY_STATUS_READ_FAILURE  GenealogyStatus_E = 5
	GenealogyStatus_E_GENEALOGY_STATUS_CRC_FAILURE   GenealogyStatus_E = 6
)

// Enum value maps for GenealogyStatus_E.
var (
	GenealogyStatus_E_name = map[int32]string{
		0: "GENEALOGY_STATUS_NONE",
		1: "GENEALOGY_STATUS_NOT_WRITTEN",
		2: "GENEALOGY_STATUS_WRITE_SUCCESS",
		3: "GENEALOGY_STATUS_WRITE_FAILURE",
		4: "GENEALOGY_STATUS_READ_SUCCESS",
		5: "GENEALOGY_STATUS_READ_FAILURE",
		6: "GENEALOGY_STATUS_CRC_FAILURE",
	}
	GenealogyStatus_E_value = map[string]int32{
		"GENEALOGY_STATUS_NONE":          0,
		"GENEALOGY_STATUS_NOT_WRITTEN":   1,
		"GENEALOGY_STATUS_WRITE_SUCCESS": 2,
		"GENEALOGY_STATUS_WRITE_FAILURE": 3,
		"GENEALOGY_STATUS_READ_SUCCESS":  4,
		"GENEALOGY_STATUS_READ_FAILURE":  5,
		"GENEALOGY_STATUS_CRC_FAILURE":   6,
	}
)

func (x GenealogyStatus_E) Enum() *GenealogyStatus_E {
	p := new(GenealogyStatus_E)
	*p = x
	return p
}

func (x GenealogyStatus_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenealogyStatus_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[14].Descriptor()
}

func (GenealogyStatus_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[14]
}

func (x GenealogyStatus_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenealogyStatus_E.Descriptor instead.
func (GenealogyStatus_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{14}
}

type GetReaderKeyCommand int32

const (
	GetReaderKeyCommand_GET_READER_KEY_COMMAND_UNKNOWN       GetReaderKeyCommand = 0
	GetReaderKeyCommand_GET_READER_KEY_COMMAND_START_LOOKING GetReaderKeyCommand = 1
	GetReaderKeyCommand_GET_READER_KEY_COMMAND_STOP_LOOKING  GetReaderKeyCommand = 2
)

// Enum value maps for GetReaderKeyCommand.
var (
	GetReaderKeyCommand_name = map[int32]string{
		0: "GET_READER_KEY_COMMAND_UNKNOWN",
		1: "GET_READER_KEY_COMMAND_START_LOOKING",
		2: "GET_READER_KEY_COMMAND_STOP_LOOKING",
	}
	GetReaderKeyCommand_value = map[string]int32{
		"GET_READER_KEY_COMMAND_UNKNOWN":       0,
		"GET_READER_KEY_COMMAND_START_LOOKING": 1,
		"GET_READER_KEY_COMMAND_STOP_LOOKING":  2,
	}
)

func (x GetReaderKeyCommand) Enum() *GetReaderKeyCommand {
	p := new(GetReaderKeyCommand)
	*p = x
	return p
}

func (x GetReaderKeyCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetReaderKeyCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[15].Descriptor()
}

func (GetReaderKeyCommand) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[15]
}

func (x GetReaderKeyCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetReaderKeyCommand.Descriptor instead.
func (GetReaderKeyCommand) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{15}
}

type HandlePulled_E int32

const (
	HandlePulled_E_HANDLE_PULLED_FRONT_DRIVER_DOOR                 HandlePulled_E = 0
	HandlePulled_E_HANDLE_PULLED_FRONT_PASSENGER_DOOR              HandlePulled_E = 1
	HandlePulled_E_HANDLE_PULLED_REAR_DRIVER_DOOR                  HandlePulled_E = 2
	HandlePulled_E_HANDLE_PULLED_REAR_PASSENGER_DOOR               HandlePulled_E = 3
	HandlePulled_E_HANDLE_PULLED_TRUNK                             HandlePulled_E = 4
	HandlePulled_E_HANDLE_PULLED_CHARGE_PORT                       HandlePulled_E = 5
	HandlePulled_E_HANDLE_PULLED_FRONT_DRIVER_AUTO_PRESENT_DOOR    HandlePulled_E = 6
	HandlePulled_E_HANDLE_PULLED_FRONT_PASSENGER_AUTO_PRESENT_DOOR HandlePulled_E = 7
	HandlePulled_E_HANDLE_PULLED_OTHER                             HandlePulled_E = 8
	HandlePulled_E_HANDLE_PULLED_FRUNK                             HandlePulled_E = 9
)

// Enum value maps for HandlePulled_E.
var (
	HandlePulled_E_name = map[int32]string{
		0: "HANDLE_PULLED_FRONT_DRIVER_DOOR",
		1: "HANDLE_PULLED_FRONT_PASSENGER_DOOR",
		2: "HANDLE_PULLED_REAR_DRIVER_DOOR",
		3: "HANDLE_PULLED_REAR_PASSENGER_DOOR",
		4: "HANDLE_PULLED_TRUNK",
		5: "HANDLE_PULLED_CHARGE_PORT",
		6: "HANDLE_PULLED_FRONT_DRIVER_AUTO_PRESENT_DOOR",
		7: "HANDLE_PULLED_FRONT_PASSENGER_AUTO_PRESENT_DOOR",
		8: "HANDLE_PULLED_OTHER",
		9: "HANDLE_PULLED_FRUNK",
	}
	HandlePulled_E_value = map[string]int32{
		"HANDLE_PULLED_FRONT_DRIVER_DOOR":                 0,
		"HANDLE_PULLED_FRONT_PASSENGER_DOOR":              1,
		"HANDLE_PULLED_REAR_DRIVER_DOOR":                  2,
		"HANDLE_PULLED_REAR_PASSENGER_DOOR":               3,
		"HANDLE_PULLED_TRUNK":                             4,
		"HANDLE_PULLED_CHARGE_PORT":                       5,
		"HANDLE_PULLED_FRONT_DRIVER_AUTO_PRESENT_DOOR":    6,
		"HANDLE_PULLED_FRONT_PASSENGER_AUTO_PRESENT_DOOR": 7,
		"HANDLE_PULLED_OTHER":                             8,
		"HANDLE_PULLED_FRUNK":                             9,
	}
)

func (x HandlePulled_E) Enum() *HandlePulled_E {
	p := new(HandlePulled_E)
	*p = x
	return p
}

func (x HandlePulled_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandlePulled_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[16].Descriptor()
}

func (HandlePulled_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[16]
}

func (x HandlePulled_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandlePulled_E.Descriptor instead.
func (HandlePulled_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{16}
}

type IMURequest_E int32

const (
	IMURequest_E_IMU_REQUEST_NONE                               IMURequest_E = 0
	IMURequest_E_IMU_REQUEST_GET_SLEEP_STATE                    IMURequest_E = 1
	IMURequest_E_IMU_REQUEST_ENABLE_CONTINUOUS_ACTIVITY_UPDATE  IMURequest_E = 2
	IMURequest_E_IMU_REQUEST_DISABLE_CONTINUOUS_ACTIVITY_UPDATE IMURequest_E = 3
)

// Enum value maps for IMURequest_E.
var (
	IMURequest_E_name = map[int32]string{
		0: "IMU_REQUEST_NONE",
		1: "IMU_REQUEST_GET_SLEEP_STATE",
		2: "IMU_REQUEST_ENABLE_CONTINUOUS_ACTIVITY_UPDATE",
		3: "IMU_REQUEST_DISABLE_CONTINUOUS_ACTIVITY_UPDATE",
	}
	IMURequest_E_value = map[string]int32{
		"IMU_REQUEST_NONE":                               0,
		"IMU_REQUEST_GET_SLEEP_STATE":                    1,
		"IMU_REQUEST_ENABLE_CONTINUOUS_ACTIVITY_UPDATE":  2,
		"IMU_REQUEST_DISABLE_CONTINUOUS_ACTIVITY_UPDATE": 3,
	}
)

func (x IMURequest_E) Enum() *IMURequest_E {
	p := new(IMURequest_E)
	*p = x
	return p
}

func (x IMURequest_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IMURequest_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[17].Descriptor()
}

func (IMURequest_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[17]
}

func (x IMURequest_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IMURequest_E.Descriptor instead.
func (IMURequest_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{17}
}

type IMUState_E int32

const (
	IMUState_E_IMU_STATE_NOT_CONFIGURED IMUState_E = 0
	IMUState_E_IMU_STATE_ACTIVITY       IMUState_E = 1
	IMUState_E_IMU_STATE_INACTIVITY     IMUState_E = 2
)

// Enum value maps for IMUState_E.
var (
	IMUState_E_name = map[int32]string{
		0: "IMU_STATE_NOT_CONFIGURED",
		1: "IMU_STATE_ACTIVITY",
		2: "IMU_STATE_INACTIVITY",
	}
	IMUState_E_value = map[string]int32{
		"IMU_STATE_NOT_CONFIGURED": 0,
		"IMU_STATE_ACTIVITY":       1,
		"IMU_STATE_INACTIVITY":     2,
	}
)

func (x IMUState_E) Enum() *IMUState_E {
	p := new(IMUState_E)
	*p = x
	return p
}

func (x IMUState_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IMUState_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[18].Descriptor()
}

func (IMUState_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[18]
}

func (x IMUState_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IMUState_E.Descriptor instead.
func (IMUState_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{18}
}

type LRDetectionResult_E int32

const (
	LRDetectionResult_E_LRDETECTIONRESULT_ERROR_MAXCNT     LRDetectionResult_E = 0
	LRDetectionResult_E_LRDETECTIONRESULT_ERROR_NEGPERIOD  LRDetectionResult_E = 1
	LRDetectionResult_E_LRDETECTIONRESULT_ERROR_LONGPERIOD LRDetectionResult_E = 2
	LRDetectionResult_E_LRDETECTIONRESULT_LEFT             LRDetectionResult_E = 3
	LRDetectionResult_E_LRDETECTIONRESULT_RIGHT            LRDetectionResult_E = 4
)

// Enum value maps for LRDetectionResult_E.
var (
	LRDetectionResult_E_name = map[int32]string{
		0: "LRDETECTIONRESULT_ERROR_MAXCNT",
		1: "LRDETECTIONRESULT_ERROR_NEGPERIOD",
		2: "LRDETECTIONRESULT_ERROR_LONGPERIOD",
		3: "LRDETECTIONRESULT_LEFT",
		4: "LRDETECTIONRESULT_RIGHT",
	}
	LRDetectionResult_E_value = map[string]int32{
		"LRDETECTIONRESULT_ERROR_MAXCNT":     0,
		"LRDETECTIONRESULT_ERROR_NEGPERIOD":  1,
		"LRDETECTIONRESULT_ERROR_LONGPERIOD": 2,
		"LRDETECTIONRESULT_LEFT":             3,
		"LRDETECTIONRESULT_RIGHT":            4,
	}
)

func (x LRDetectionResult_E) Enum() *LRDetectionResult_E {
	p := new(LRDetectionResult_E)
	*p = x
	return p
}

func (x LRDetectionResult_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LRDetectionResult_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[19].Descriptor()
}

func (LRDetectionResult_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[19]
}

func (x LRDetectionResult_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LRDetectionResult_E.Descriptor instead.
func (LRDetectionResult_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{19}
}

type MIError_E int32

const (
	MIError_E_ERROR_UNKNOWN                          MIError_E = 0
	MIError_E_ERROR_SESSION_LIMIT_EXCEEDED           MIError_E = 1
	MIError_E_ERROR_INVALID_CONFIGURATION            MIError_E = 2
	MIError_E_ERROR_RESOURCE_USAGE_TIMEOUT           MIError_E = 3
	MIError_E_ERROR_SESSION_FAILED                   MIError_E = 4
	MIError_E_ERROR_UNSUPPORTED_PLATFORM             MIError_E = 5
	MIError_E_ERROR_USER_DID_NOT_ALLOW               MIError_E = 6
	MIError_E_ERROR_BLE_PEER_UNAVAILABLE             MIError_E = 7
	MIError_E_ERROR_VEHICLE_NOT_SELECTED_FOR_RANGING MIError_E = 8
)

// Enum value maps for MIError_E.
var (
	MIError_E_name = map[int32]string{
		0: "ERROR_UNKNOWN",
		1: "ERROR_SESSION_LIMIT_EXCEEDED",
		2: "ERROR_INVALID_CONFIGURATION",
		3: "ERROR_RESOURCE_USAGE_TIMEOUT",
		4: "ERROR_SESSION_FAILED",
		5: "ERROR_UNSUPPORTED_PLATFORM",
		6: "ERROR_USER_DID_NOT_ALLOW",
		7: "ERROR_BLE_PEER_UNAVAILABLE",
		8: "ERROR_VEHICLE_NOT_SELECTED_FOR_RANGING",
	}
	MIError_E_value = map[string]int32{
		"ERROR_UNKNOWN":                          0,
		"ERROR_SESSION_LIMIT_EXCEEDED":           1,
		"ERROR_INVALID_CONFIGURATION":            2,
		"ERROR_RESOURCE_USAGE_TIMEOUT":           3,
		"ERROR_SESSION_FAILED":                   4,
		"ERROR_UNSUPPORTED_PLATFORM":             5,
		"ERROR_USER_DID_NOT_ALLOW":               6,
		"ERROR_BLE_PEER_UNAVAILABLE":             7,
		"ERROR_VEHICLE_NOT_SELECTED_FOR_RANGING": 8,
	}
)

func (x MIError_E) Enum() *MIError_E {
	p := new(MIError_E)
	*p = x
	return p
}

func (x MIError_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MIError_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[20].Descriptor()
}

func (MIError_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[20]
}

func (x MIError_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MIError_E.Descriptor instead.
func (MIError_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{20}
}

type MLXWakePeriod_E int32

const (
	MLXWakePeriod_E_MLXWAKEPERIOD_2_MS    MLXWakePeriod_E = 0
	MLXWakePeriod_E_MLXWAKEPERIOD_3_MS    MLXWakePeriod_E = 1
	MLXWakePeriod_E_MLXWAKEPERIOD_5_MS    MLXWakePeriod_E = 2
	MLXWakePeriod_E_MLXWAKEPERIOD_15_MS   MLXWakePeriod_E = 3
	MLXWakePeriod_E_MLXWAKEPERIOD_30_MS   MLXWakePeriod_E = 4
	MLXWakePeriod_E_MLXWAKEPERIOD_50_MS   MLXWakePeriod_E = 5
	MLXWakePeriod_E_MLXWAKEPERIOD_100_MS  MLXWakePeriod_E = 6
	MLXWakePeriod_E_MLXWAKEPERIOD_150_MS  MLXWakePeriod_E = 7
	MLXWakePeriod_E_MLXWAKEPERIOD_250_MS  MLXWakePeriod_E = 8
	MLXWakePeriod_E_MLXWAKEPERIOD_500_MS  MLXWakePeriod_E = 9
	MLXWakePeriod_E_MLXWAKEPERIOD_1_S     MLXWakePeriod_E = 10
	MLXWakePeriod_E_MLXWAKEPERIOD_2_S     MLXWakePeriod_E = 11
	MLXWakePeriod_E_MLXWAKEPERIOD_2_5_S   MLXWakePeriod_E = 12
	MLXWakePeriod_E_MLXWAKEPERIOD_3_S     MLXWakePeriod_E = 13
	MLXWakePeriod_E_MLXWAKEPERIOD_4_S     MLXWakePeriod_E = 14
	MLXWakePeriod_E_MLXWAKEPERIOD_5_S     MLXWakePeriod_E = 15
	MLXWakePeriod_E_MLXWAKEPERIOD_6_S     MLXWakePeriod_E = 16
	MLXWakePeriod_E_MLXWAKEPERIOD_7_S     MLXWakePeriod_E = 17
	MLXWakePeriod_E_MLXWAKEPERIOD_8_S     MLXWakePeriod_E = 18
	MLXWakePeriod_E_MLXWAKEPERIOD_9_S     MLXWakePeriod_E = 19
	MLXWakePeriod_E_MLXWAKEPERIOD_10_S    MLXWakePeriod_E = 20
	MLXWakePeriod_E_MLXWAKEPERIOD_11_S    MLXWakePeriod_E = 21
	MLXWakePeriod_E_MLXWAKEPERIOD_12_S    MLXWakePeriod_E = 22
	MLXWakePeriod_E_MLXWAKEPERIOD_15_S    MLXWakePeriod_E = 23
	MLXWakePeriod_E_MLXWAKEPERIOD_20_S    MLXWakePeriod_E = 24
	MLXWakePeriod_E_MLXWAKEPERIOD_30_S    MLXWakePeriod_E = 25
	MLXWakePeriod_E_MLXWAKEPERIOD_1_M     MLXWakePeriod_E = 26
	MLXWakePeriod_E_MLXWAKEPERIOD_2_M     MLXWakePeriod_E = 27
	MLXWakePeriod_E_MLXWAKEPERIOD_3_M     MLXWakePeriod_E = 28
	MLXWakePeriod_E_MLXWAKEPERIOD_4_M     MLXWakePeriod_E = 29
	MLXWakePeriod_E_MLXWAKEPERIOD_5_M     MLXWakePeriod_E = 30
	MLXWakePeriod_E_MLXWAKEPERIOD_10_M    MLXWakePeriod_E = 31
	MLXWakePeriod_E_MLXWAKEPERIOD_16_M    MLXWakePeriod_E = 32
	MLXWakePeriod_E_MLXWAKEPERIOD_NOT_SET MLXWakePeriod_E = 33
)

// Enum value maps for MLXWakePeriod_E.
var (
	MLXWakePeriod_E_name = map[int32]string{
		0:  "MLXWAKEPERIOD_2_MS",
		1:  "MLXWAKEPERIOD_3_MS",
		2:  "MLXWAKEPERIOD_5_MS",
		3:  "MLXWAKEPERIOD_15_MS",
		4:  "MLXWAKEPERIOD_30_MS",
		5:  "MLXWAKEPERIOD_50_MS",
		6:  "MLXWAKEPERIOD_100_MS",
		7:  "MLXWAKEPERIOD_150_MS",
		8:  "MLXWAKEPERIOD_250_MS",
		9:  "MLXWAKEPERIOD_500_MS",
		10: "MLXWAKEPERIOD_1_S",
		11: "MLXWAKEPERIOD_2_S",
		12: "MLXWAKEPERIOD_2_5_S",
		13: "MLXWAKEPERIOD_3_S",
		14: "MLXWAKEPERIOD_4_S",
		15: "MLXWAKEPERIOD_5_S",
		16: "MLXWAKEPERIOD_6_S",
		17: "MLXWAKEPERIOD_7_S",
		18: "MLXWAKEPERIOD_8_S",
		19: "MLXWAKEPERIOD_9_S",
		20: "MLXWAKEPERIOD_10_S",
		21: "MLXWAKEPERIOD_11_S",
		22: "MLXWAKEPERIOD_12_S",
		23: "MLXWAKEPERIOD_15_S",
		24: "MLXWAKEPERIOD_20_S",
		25: "MLXWAKEPERIOD_30_S",
		26: "MLXWAKEPERIOD_1_M",
		27: "MLXWAKEPERIOD_2_M",
		28: "MLXWAKEPERIOD_3_M",
		29: "MLXWAKEPERIOD_4_M",
		30: "MLXWAKEPERIOD_5_M",
		31: "MLXWAKEPERIOD_10_M",
		32: "MLXWAKEPERIOD_16_M",
		33: "MLXWAKEPERIOD_NOT_SET",
	}
	MLXWakePeriod_E_value = map[string]int32{
		"MLXWAKEPERIOD_2_MS":    0,
		"MLXWAKEPERIOD_3_MS":    1,
		"MLXWAKEPERIOD_5_MS":    2,
		"MLXWAKEPERIOD_15_MS":   3,
		"MLXWAKEPERIOD_30_MS":   4,
		"MLXWAKEPERIOD_50_MS":   5,
		"MLXWAKEPERIOD_100_MS":  6,
		"MLXWAKEPERIOD_150_MS":  7,
		"MLXWAKEPERIOD_250_MS":  8,
		"MLXWAKEPERIOD_500_MS":  9,
		"MLXWAKEPERIOD_1_S":     10,
		"MLXWAKEPERIOD_2_S":     11,
		"MLXWAKEPERIOD_2_5_S":   12,
		"MLXWAKEPERIOD_3_S":     13,
		"MLXWAKEPERIOD_4_S":     14,
		"MLXWAKEPERIOD_5_S":     15,
		"MLXWAKEPERIOD_6_S":     16,
		"MLXWAKEPERIOD_7_S":     17,
		"MLXWAKEPERIOD_8_S":     18,
		"MLXWAKEPERIOD_9_S":     19,
		"MLXWAKEPERIOD_10_S":    20,
		"MLXWAKEPERIOD_11_S":    21,
		"MLXWAKEPERIOD_12_S":    22,
		"MLXWAKEPERIOD_15_S":    23,
		"MLXWAKEPERIOD_20_S":    24,
		"MLXWAKEPERIOD_30_S":    25,
		"MLXWAKEPERIOD_1_M":     26,
		"MLXWAKEPERIOD_2_M":     27,
		"MLXWAKEPERIOD_3_M":     28,
		"MLXWAKEPERIOD_4_M":     29,
		"MLXWAKEPERIOD_5_M":     30,
		"MLXWAKEPERIOD_10_M":    31,
		"MLXWAKEPERIOD_16_M":    32,
		"MLXWAKEPERIOD_NOT_SET": 33,
	}
)

func (x MLXWakePeriod_E) Enum() *MLXWakePeriod_E {
	p := new(MLXWakePeriod_E)
	*p = x
	return p
}

func (x MLXWakePeriod_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MLXWakePeriod_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[21].Descriptor()
}

func (MLXWakePeriod_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[21]
}

func (x MLXWakePeriod_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MLXWakePeriod_E.Descriptor instead.
func (MLXWakePeriod_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{21}
}

type NFCPresence int32

const (
	NFCPresence_NFC_PRESENCE_NOT_PRESENT               NFCPresence = 0
	NFCPresence_NFC_PRESENCE_PRESENT_AT_B_PILLAR       NFCPresence = 1
	NFCPresence_NFC_PRESENCE_PRESENT_AT_CENTER_CONSOLE NFCPresence = 2
)

// Enum value maps for NFCPresence.
var (
	NFCPresence_name = map[int32]string{
		0: "NFC_PRESENCE_NOT_PRESENT",
		1: "NFC_PRESENCE_PRESENT_AT_B_PILLAR",
		2: "NFC_PRESENCE_PRESENT_AT_CENTER_CONSOLE",
	}
	NFCPresence_value = map[string]int32{
		"NFC_PRESENCE_NOT_PRESENT":               0,
		"NFC_PRESENCE_PRESENT_AT_B_PILLAR":       1,
		"NFC_PRESENCE_PRESENT_AT_CENTER_CONSOLE": 2,
	}
)

func (x NFCPresence) Enum() *NFCPresence {
	p := new(NFCPresence)
	*p = x
	return p
}

func (x NFCPresence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFCPresence) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[22].Descriptor()
}

func (NFCPresence) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[22]
}

func (x NFCPresence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFCPresence.Descriptor instead.
func (NFCPresence) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{22}
}

type NFCSEDevicePubKeyState_E int32

const (
	NFCSEDevicePubKeyState_E_NFCSEC_DEVICEPUBKEY_STATE_NONE          NFCSEDevicePubKeyState_E = 0
	NFCSEDevicePubKeyState_E_NFCSEC_DEVICEPUBKEY_STATE_RETRIEVED     NFCSEDevicePubKeyState_E = 1
	NFCSEDevicePubKeyState_E_NFCSEC_DEVICEPUBKEY_STATE_NOT_RETRIEVED NFCSEDevicePubKeyState_E = 2
)

// Enum value maps for NFCSEDevicePubKeyState_E.
var (
	NFCSEDevicePubKeyState_E_name = map[int32]string{
		0: "NFCSEC_DEVICEPUBKEY_STATE_NONE",
		1: "NFCSEC_DEVICEPUBKEY_STATE_RETRIEVED",
		2: "NFCSEC_DEVICEPUBKEY_STATE_NOT_RETRIEVED",
	}
	NFCSEDevicePubKeyState_E_value = map[string]int32{
		"NFCSEC_DEVICEPUBKEY_STATE_NONE":          0,
		"NFCSEC_DEVICEPUBKEY_STATE_RETRIEVED":     1,
		"NFCSEC_DEVICEPUBKEY_STATE_NOT_RETRIEVED": 2,
	}
)

func (x NFCSEDevicePubKeyState_E) Enum() *NFCSEDevicePubKeyState_E {
	p := new(NFCSEDevicePubKeyState_E)
	*p = x
	return p
}

func (x NFCSEDevicePubKeyState_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFCSEDevicePubKeyState_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[23].Descriptor()
}

func (NFCSEDevicePubKeyState_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[23]
}

func (x NFCSEDevicePubKeyState_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFCSEDevicePubKeyState_E.Descriptor instead.
func (NFCSEDevicePubKeyState_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{23}
}

type NFCSEInsecureCommandState_E int32

const (
	NFCSEInsecureCommandState_E_NFCSEC_INSECURE_COMMAND_STATE_NONE     NFCSEInsecureCommandState_E = 0
	NFCSEInsecureCommandState_E_NFCSEC_INSECURE_COMMAND_STATE_ENABLED  NFCSEInsecureCommandState_E = 1
	NFCSEInsecureCommandState_E_NFCSEC_INSECURE_COMMAND_STATE_DISABLED NFCSEInsecureCommandState_E = 2
)

// Enum value maps for NFCSEInsecureCommandState_E.
var (
	NFCSEInsecureCommandState_E_name = map[int32]string{
		0: "NFCSEC_INSECURE_COMMAND_STATE_NONE",
		1: "NFCSEC_INSECURE_COMMAND_STATE_ENABLED",
		2: "NFCSEC_INSECURE_COMMAND_STATE_DISABLED",
	}
	NFCSEInsecureCommandState_E_value = map[string]int32{
		"NFCSEC_INSECURE_COMMAND_STATE_NONE":     0,
		"NFCSEC_INSECURE_COMMAND_STATE_ENABLED":  1,
		"NFCSEC_INSECURE_COMMAND_STATE_DISABLED": 2,
	}
)

func (x NFCSEInsecureCommandState_E) Enum() *NFCSEInsecureCommandState_E {
	p := new(NFCSEInsecureCommandState_E)
	*p = x
	return p
}

func (x NFCSEInsecureCommandState_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFCSEInsecureCommandState_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[24].Descriptor()
}

func (NFCSEInsecureCommandState_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[24]
}

func (x NFCSEInsecureCommandState_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFCSEInsecureCommandState_E.Descriptor instead.
func (NFCSEInsecureCommandState_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{24}
}

type NFCSERequest_E int32

const (
	NFCSERequest_E_NFCSE_REQUEST_NONE                      NFCSERequest_E = 0
	NFCSERequest_E_NFCSE_REQUEST_REFETCH_SESSION_INFO      NFCSERequest_E = 1
	NFCSERequest_E_NFCSE_REQUEST_DISABLE_INSECURE_COMMANDS NFCSERequest_E = 2
	NFCSERequest_E_NFCSE_REQUEST_GET_CURRENT_STATE         NFCSERequest_E = 3
)

// Enum value maps for NFCSERequest_E.
var (
	NFCSERequest_E_name = map[int32]string{
		0: "NFCSE_REQUEST_NONE",
		1: "NFCSE_REQUEST_REFETCH_SESSION_INFO",
		2: "NFCSE_REQUEST_DISABLE_INSECURE_COMMANDS",
		3: "NFCSE_REQUEST_GET_CURRENT_STATE",
	}
	NFCSERequest_E_value = map[string]int32{
		"NFCSE_REQUEST_NONE":                      0,
		"NFCSE_REQUEST_REFETCH_SESSION_INFO":      1,
		"NFCSE_REQUEST_DISABLE_INSECURE_COMMANDS": 2,
		"NFCSE_REQUEST_GET_CURRENT_STATE":         3,
	}
)

func (x NFCSERequest_E) Enum() *NFCSERequest_E {
	p := new(NFCSERequest_E)
	*p = x
	return p
}

func (x NFCSERequest_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFCSERequest_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[25].Descriptor()
}

func (NFCSERequest_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[25]
}

func (x NFCSERequest_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFCSERequest_E.Descriptor instead.
func (NFCSERequest_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{25}
}

type NFCSESharedSecretState_E int32

const (
	NFCSESharedSecretState_E_NFCSEC_SHAREDSECRET_STATE_NONE          NFCSESharedSecretState_E = 0
	NFCSESharedSecretState_E_NFCSEC_SHAREDSECRET_STATE_GENERATED     NFCSESharedSecretState_E = 1
	NFCSESharedSecretState_E_NFCSEC_SHAREDSECRET_STATE_NOT_GENERATED NFCSESharedSecretState_E = 2
)

// Enum value maps for NFCSESharedSecretState_E.
var (
	NFCSESharedSecretState_E_name = map[int32]string{
		0: "NFCSEC_SHAREDSECRET_STATE_NONE",
		1: "NFCSEC_SHAREDSECRET_STATE_GENERATED",
		2: "NFCSEC_SHAREDSECRET_STATE_NOT_GENERATED",
	}
	NFCSESharedSecretState_E_value = map[string]int32{
		"NFCSEC_SHAREDSECRET_STATE_NONE":          0,
		"NFCSEC_SHAREDSECRET_STATE_GENERATED":     1,
		"NFCSEC_SHAREDSECRET_STATE_NOT_GENERATED": 2,
	}
)

func (x NFCSESharedSecretState_E) Enum() *NFCSESharedSecretState_E {
	p := new(NFCSESharedSecretState_E)
	*p = x
	return p
}

func (x NFCSESharedSecretState_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFCSESharedSecretState_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[26].Descriptor()
}

func (NFCSESharedSecretState_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[26]
}

func (x NFCSESharedSecretState_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFCSESharedSecretState_E.Descriptor instead.
func (NFCSESharedSecretState_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{26}
}

type NFCSEVehiclePubKeyState_E int32

const (
	NFCSEVehiclePubKeyState_E_NFCSEC_VEHICLEPUBKEY_STATE_NONE          NFCSEVehiclePubKeyState_E = 0
	NFCSEVehiclePubKeyState_E_NFCSEC_VEHICLEPUBKEY_STATE_RETRIEVED     NFCSEVehiclePubKeyState_E = 1
	NFCSEVehiclePubKeyState_E_NFCSEC_VEHICLEPUBKEY_STATE_NOT_RETRIEVED NFCSEVehiclePubKeyState_E = 2
)

// Enum value maps for NFCSEVehiclePubKeyState_E.
var (
	NFCSEVehiclePubKeyState_E_name = map[int32]string{
		0: "NFCSEC_VEHICLEPUBKEY_STATE_NONE",
		1: "NFCSEC_VEHICLEPUBKEY_STATE_RETRIEVED",
		2: "NFCSEC_VEHICLEPUBKEY_STATE_NOT_RETRIEVED",
	}
	NFCSEVehiclePubKeyState_E_value = map[string]int32{
		"NFCSEC_VEHICLEPUBKEY_STATE_NONE":          0,
		"NFCSEC_VEHICLEPUBKEY_STATE_RETRIEVED":     1,
		"NFCSEC_VEHICLEPUBKEY_STATE_NOT_RETRIEVED": 2,
	}
)

func (x NFCSEVehiclePubKeyState_E) Enum() *NFCSEVehiclePubKeyState_E {
	p := new(NFCSEVehiclePubKeyState_E)
	*p = x
	return p
}

func (x NFCSEVehiclePubKeyState_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NFCSEVehiclePubKeyState_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[27].Descriptor()
}

func (NFCSEVehiclePubKeyState_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[27]
}

func (x NFCSEVehiclePubKeyState_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NFCSEVehiclePubKeyState_E.Descriptor instead.
func (NFCSEVehiclePubKeyState_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{27}
}

type PublicKeyRequest_E int32

const (
	PublicKeyRequest_E_PUBLIC_KEY_REQUEST_NONE PublicKeyRequest_E = 0
	PublicKeyRequest_E_PUBLIC_KEY_REQUEST_READ PublicKeyRequest_E = 1
)

// Enum value maps for PublicKeyRequest_E.
var (
	PublicKeyRequest_E_name = map[int32]string{
		0: "PUBLIC_KEY_REQUEST_NONE",
		1: "PUBLIC_KEY_REQUEST_READ",
	}
	PublicKeyRequest_E_value = map[string]int32{
		"PUBLIC_KEY_REQUEST_NONE": 0,
		"PUBLIC_KEY_REQUEST_READ": 1,
	}
)

func (x PublicKeyRequest_E) Enum() *PublicKeyRequest_E {
	p := new(PublicKeyRequest_E)
	*p = x
	return p
}

func (x PublicKeyRequest_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicKeyRequest_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[28].Descriptor()
}

func (PublicKeyRequest_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[28]
}

func (x PublicKeyRequest_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicKeyRequest_E.Descriptor instead.
func (PublicKeyRequest_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{28}
}

type PublicKeyStatus_E int32

const (
	PublicKeyStatus_E_PUBLIC_KEY_STATUS_NONE        PublicKeyStatus_E = 0
	PublicKeyStatus_E_PUBLIC_KEY_STATUS_NOT_WRITTEN PublicKeyStatus_E = 1
	PublicKeyStatus_E_PUBLIC_KEY_STATUS_WRITTEN     PublicKeyStatus_E = 2
)

// Enum value maps for PublicKeyStatus_E.
var (
	PublicKeyStatus_E_name = map[int32]string{
		0: "PUBLIC_KEY_STATUS_NONE",
		1: "PUBLIC_KEY_STATUS_NOT_WRITTEN",
		2: "PUBLIC_KEY_STATUS_WRITTEN",
	}
	PublicKeyStatus_E_value = map[string]int32{
		"PUBLIC_KEY_STATUS_NONE":        0,
		"PUBLIC_KEY_STATUS_NOT_WRITTEN": 1,
		"PUBLIC_KEY_STATUS_WRITTEN":     2,
	}
)

func (x PublicKeyStatus_E) Enum() *PublicKeyStatus_E {
	p := new(PublicKeyStatus_E)
	*p = x
	return p
}

func (x PublicKeyStatus_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicKeyStatus_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[29].Descriptor()
}

func (PublicKeyStatus_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[29]
}

func (x PublicKeyStatus_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicKeyStatus_E.Descriptor instead.
func (PublicKeyStatus_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{29}
}

type RCIControl_E int32

const (
	RCIControl_E_RCI_CONTROL_NONE     RCIControl_E = 0
	RCIControl_E_RCI_CONTROL_TURN_OFF RCIControl_E = 1
)

// Enum value maps for RCIControl_E.
var (
	RCIControl_E_name = map[int32]string{
		0: "RCI_CONTROL_NONE",
		1: "RCI_CONTROL_TURN_OFF",
	}
	RCIControl_E_value = map[string]int32{
		"RCI_CONTROL_NONE":     0,
		"RCI_CONTROL_TURN_OFF": 1,
	}
)

func (x RCIControl_E) Enum() *RCIControl_E {
	p := new(RCIControl_E)
	*p = x
	return p
}

func (x RCIControl_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RCIControl_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[30].Descriptor()
}

func (RCIControl_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[30]
}

func (x RCIControl_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RCIControl_E.Descriptor instead.
func (RCIControl_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{30}
}

type ResetTrackerCommand_E int32

const (
	ResetTrackerCommand_E_RESETTRACKER_COMMAND_NONE        ResetTrackerCommand_E = 0
	ResetTrackerCommand_E_RESETTRACKER_COMMAND_GET_STATS   ResetTrackerCommand_E = 1
	ResetTrackerCommand_E_RESETTRACKER_COMMAND_CLEAR_STATS ResetTrackerCommand_E = 2
)

// Enum value maps for ResetTrackerCommand_E.
var (
	ResetTrackerCommand_E_name = map[int32]string{
		0: "RESETTRACKER_COMMAND_NONE",
		1: "RESETTRACKER_COMMAND_GET_STATS",
		2: "RESETTRACKER_COMMAND_CLEAR_STATS",
	}
	ResetTrackerCommand_E_value = map[string]int32{
		"RESETTRACKER_COMMAND_NONE":        0,
		"RESETTRACKER_COMMAND_GET_STATS":   1,
		"RESETTRACKER_COMMAND_CLEAR_STATS": 2,
	}
)

func (x ResetTrackerCommand_E) Enum() *ResetTrackerCommand_E {
	p := new(ResetTrackerCommand_E)
	*p = x
	return p
}

func (x ResetTrackerCommand_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResetTrackerCommand_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[31].Descriptor()
}

func (ResetTrackerCommand_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[31]
}

func (x ResetTrackerCommand_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResetTrackerCommand_E.Descriptor instead.
func (ResetTrackerCommand_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{31}
}

type SleepManagerCommand_E int32

const (
	SleepManagerCommand_E_SLEEPMANAGER_COMMAND_NONE SleepManagerCommand_E = 0
	SleepManagerCommand_E_SLEEPMANAGER_GET_STATS    SleepManagerCommand_E = 1
	SleepManagerCommand_E_SLEEPMANAGER_RESET_STATS  SleepManagerCommand_E = 2
)

// Enum value maps for SleepManagerCommand_E.
var (
	SleepManagerCommand_E_name = map[int32]string{
		0: "SLEEPMANAGER_COMMAND_NONE",
		1: "SLEEPMANAGER_GET_STATS",
		2: "SLEEPMANAGER_RESET_STATS",
	}
	SleepManagerCommand_E_value = map[string]int32{
		"SLEEPMANAGER_COMMAND_NONE": 0,
		"SLEEPMANAGER_GET_STATS":    1,
		"SLEEPMANAGER_RESET_STATS":  2,
	}
)

func (x SleepManagerCommand_E) Enum() *SleepManagerCommand_E {
	p := new(SleepManagerCommand_E)
	*p = x
	return p
}

func (x SleepManagerCommand_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SleepManagerCommand_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[32].Descriptor()
}

func (SleepManagerCommand_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[32]
}

func (x SleepManagerCommand_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SleepManagerCommand_E.Descriptor instead.
func (SleepManagerCommand_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{32}
}

type TPDataRequest_E int32

const (
	TPDataRequest_E_TP_DATAREQUEST_NONE                     TPDataRequest_E = 0
	TPDataRequest_E_TP_DATAREQUEST_PRESSURE_TEMPERATURE     TPDataRequest_E = 1
	TPDataRequest_E_TP_DATAREQUEST_NEW_SENSOR_INFO          TPDataRequest_E = 2
	TPDataRequest_E_TP_DATAREQUEST_WHEEL_ROTATION_DIRECTION TPDataRequest_E = 3
	TPDataRequest_E_TP_DATAREQUEST_ACCEL                    TPDataRequest_E = 4
	TPDataRequest_E_TP_DATAREQUEST_MOTION_DETECTION_START   TPDataRequest_E = 5
	TPDataRequest_E_TP_DATAREQUEST_READ_ALARMS              TPDataRequest_E = 6
	TPDataRequest_E_TP_DATAREQUEST_MOTION_DETECTION_STOP    TPDataRequest_E = 7
	TPDataRequest_E_TP_DATAREQUEST_READ_PUBLIC_KEY          TPDataRequest_E = 8
	TPDataRequest_E_TP_DATAREQUEST_RF_MONITOR_COUNTERS      TPDataRequest_E = 9
	TPDataRequest_E_TP_DATAREQUEST_MOTION_CONFIG            TPDataRequest_E = 10
	TPDataRequest_E_TP_DATAREQUEST_STATIONARY_CONFIG        TPDataRequest_E = 11
	TPDataRequest_E_TP_DATAREQUEST_CAPABILITIES             TPDataRequest_E = 12
)

// Enum value maps for TPDataRequest_E.
var (
	TPDataRequest_E_name = map[int32]string{
		0:  "TP_DATAREQUEST_NONE",
		1:  "TP_DATAREQUEST_PRESSURE_TEMPERATURE",
		2:  "TP_DATAREQUEST_NEW_SENSOR_INFO",
		3:  "TP_DATAREQUEST_WHEEL_ROTATION_DIRECTION",
		4:  "TP_DATAREQUEST_ACCEL",
		5:  "TP_DATAREQUEST_MOTION_DETECTION_START",
		6:  "TP_DATAREQUEST_READ_ALARMS",
		7:  "TP_DATAREQUEST_MOTION_DETECTION_STOP",
		8:  "TP_DATAREQUEST_READ_PUBLIC_KEY",
		9:  "TP_DATAREQUEST_RF_MONITOR_COUNTERS",
		10: "TP_DATAREQUEST_MOTION_CONFIG",
		11: "TP_DATAREQUEST_STATIONARY_CONFIG",
		12: "TP_DATAREQUEST_CAPABILITIES",
	}
	TPDataRequest_E_value = map[string]int32{
		"TP_DATAREQUEST_NONE":                     0,
		"TP_DATAREQUEST_PRESSURE_TEMPERATURE":     1,
		"TP_DATAREQUEST_NEW_SENSOR_INFO":          2,
		"TP_DATAREQUEST_WHEEL_ROTATION_DIRECTION": 3,
		"TP_DATAREQUEST_ACCEL":                    4,
		"TP_DATAREQUEST_MOTION_DETECTION_START":   5,
		"TP_DATAREQUEST_READ_ALARMS":              6,
		"TP_DATAREQUEST_MOTION_DETECTION_STOP":    7,
		"TP_DATAREQUEST_READ_PUBLIC_KEY":          8,
		"TP_DATAREQUEST_RF_MONITOR_COUNTERS":      9,
		"TP_DATAREQUEST_MOTION_CONFIG":            10,
		"TP_DATAREQUEST_STATIONARY_CONFIG":        11,
		"TP_DATAREQUEST_CAPABILITIES":             12,
	}
)

func (x TPDataRequest_E) Enum() *TPDataRequest_E {
	p := new(TPDataRequest_E)
	*p = x
	return p
}

func (x TPDataRequest_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPDataRequest_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[33].Descriptor()
}

func (TPDataRequest_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[33]
}

func (x TPDataRequest_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPDataRequest_E.Descriptor instead.
func (TPDataRequest_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{33}
}

type TPMSAdvType_E int32

const (
	TPMSAdvType_E_TPMS_ADV_TYPE_SEMI TPMSAdvType_E = 0
)

// Enum value maps for TPMSAdvType_E.
var (
	TPMSAdvType_E_name = map[int32]string{
		0: "TPMS_ADV_TYPE_SEMI",
	}
	TPMSAdvType_E_value = map[string]int32{
		"TPMS_ADV_TYPE_SEMI": 0,
	}
)

func (x TPMSAdvType_E) Enum() *TPMSAdvType_E {
	p := new(TPMSAdvType_E)
	*p = x
	return p
}

func (x TPMSAdvType_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPMSAdvType_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[34].Descriptor()
}

func (TPMSAdvType_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[34]
}

func (x TPMSAdvType_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPMSAdvType_E.Descriptor instead.
func (TPMSAdvType_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{34}
}

type TPNotifyReason_E int32

const (
	TPNotifyReason_E_TP_NOTIFY_REASON_UNKNOWN                                    TPNotifyReason_E = 0
	TPNotifyReason_E_TP_NOTIFY_REASON_LOW_PRESSURE                               TPNotifyReason_E = 1
	TPNotifyReason_E_TP_NOTIFY_REASON_PT_VALUE_UPDATE                            TPNotifyReason_E = 2
	TPNotifyReason_E_TP_NOTIFY_REASON_WHEEL_MOVING                               TPNotifyReason_E = 3
	TPNotifyReason_E_TP_NOTIFY_REASON_WHEEL_ROTATION_DIRECTION_CALCULATION_READY TPNotifyReason_E = 4
	TPNotifyReason_E_TP_NOTIFY_REASON_LF                                         TPNotifyReason_E = 5
	TPNotifyReason_E_TP_NOTIFY_REASON_FAULT                                      TPNotifyReason_E = 6
)

// Enum value maps for TPNotifyReason_E.
var (
	TPNotifyReason_E_name = map[int32]string{
		0: "TP_NOTIFY_REASON_UNKNOWN",
		1: "TP_NOTIFY_REASON_LOW_PRESSURE",
		2: "TP_NOTIFY_REASON_PT_VALUE_UPDATE",
		3: "TP_NOTIFY_REASON_WHEEL_MOVING",
		4: "TP_NOTIFY_REASON_WHEEL_ROTATION_DIRECTION_CALCULATION_READY",
		5: "TP_NOTIFY_REASON_LF",
		6: "TP_NOTIFY_REASON_FAULT",
	}
	TPNotifyReason_E_value = map[string]int32{
		"TP_NOTIFY_REASON_UNKNOWN":                                    0,
		"TP_NOTIFY_REASON_LOW_PRESSURE":                               1,
		"TP_NOTIFY_REASON_PT_VALUE_UPDATE":                            2,
		"TP_NOTIFY_REASON_WHEEL_MOVING":                               3,
		"TP_NOTIFY_REASON_WHEEL_ROTATION_DIRECTION_CALCULATION_READY": 4,
		"TP_NOTIFY_REASON_LF":                                         5,
		"TP_NOTIFY_REASON_FAULT":                                      6,
	}
)

func (x TPNotifyReason_E) Enum() *TPNotifyReason_E {
	p := new(TPNotifyReason_E)
	*p = x
	return p
}

func (x TPNotifyReason_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPNotifyReason_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[35].Descriptor()
}

func (TPNotifyReason_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[35]
}

func (x TPNotifyReason_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPNotifyReason_E.Descriptor instead.
func (TPNotifyReason_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{35}
}

type TPNotifyTrackerCommand_E int32

const (
	TPNotifyTrackerCommand_E_TP_NOTIFYTRACKER_COMMAND_NONE        TPNotifyTrackerCommand_E = 0
	TPNotifyTrackerCommand_E_TP_NOTIFYTRACKER_COMMAND_GET_STATS   TPNotifyTrackerCommand_E = 1
	TPNotifyTrackerCommand_E_TP_NOTIFYTRACKER_COMMAND_CLEAR_STATS TPNotifyTrackerCommand_E = 2
)

// Enum value maps for TPNotifyTrackerCommand_E.
var (
	TPNotifyTrackerCommand_E_name = map[int32]string{
		0: "TP_NOTIFYTRACKER_COMMAND_NONE",
		1: "TP_NOTIFYTRACKER_COMMAND_GET_STATS",
		2: "TP_NOTIFYTRACKER_COMMAND_CLEAR_STATS",
	}
	TPNotifyTrackerCommand_E_value = map[string]int32{
		"TP_NOTIFYTRACKER_COMMAND_NONE":        0,
		"TP_NOTIFYTRACKER_COMMAND_GET_STATS":   1,
		"TP_NOTIFYTRACKER_COMMAND_CLEAR_STATS": 2,
	}
)

func (x TPNotifyTrackerCommand_E) Enum() *TPNotifyTrackerCommand_E {
	p := new(TPNotifyTrackerCommand_E)
	*p = x
	return p
}

func (x TPNotifyTrackerCommand_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPNotifyTrackerCommand_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[36].Descriptor()
}

func (TPNotifyTrackerCommand_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[36]
}

func (x TPNotifyTrackerCommand_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPNotifyTrackerCommand_E.Descriptor instead.
func (TPNotifyTrackerCommand_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{36}
}

type UIRequest_E int32

const (
	UIRequest_E_UI_REQUEST_NONE                      UIRequest_E = 0
	UIRequest_E_UI_REQUEST_GET_VEHICLE_BLE_NICK_NAME UIRequest_E = 1
)

// Enum value maps for UIRequest_E.
var (
	UIRequest_E_name = map[int32]string{
		0: "UI_REQUEST_NONE",
		1: "UI_REQUEST_GET_VEHICLE_BLE_NICK_NAME",
	}
	UIRequest_E_value = map[string]int32{
		"UI_REQUEST_NONE":                      0,
		"UI_REQUEST_GET_VEHICLE_BLE_NICK_NAME": 1,
	}
)

func (x UIRequest_E) Enum() *UIRequest_E {
	p := new(UIRequest_E)
	*p = x
	return p
}

func (x UIRequest_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UIRequest_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[37].Descriptor()
}

func (UIRequest_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[37]
}

func (x UIRequest_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UIRequest_E.Descriptor instead.
func (UIRequest_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{37}
}

type UpdaterLocation int32

const (
	UpdaterLocation_UPDATER_LOCATION_NONE                          UpdaterLocation = 0
	UpdaterLocation_UPDATER_LOCATION_APPLICATION                   UpdaterLocation = 1
	UpdaterLocation_UPDATER_LOCATION_BOOTLOADER                    UpdaterLocation = 2
	UpdaterLocation_UPDATER_LOCATION_SECONDARY_APPLICATION         UpdaterLocation = 3
	UpdaterLocation_UPDATER_LOCATION_APPLICATION_IN_EXTERNAL_FLASH UpdaterLocation = 4
)

// Enum value maps for UpdaterLocation.
var (
	UpdaterLocation_name = map[int32]string{
		0: "UPDATER_LOCATION_NONE",
		1: "UPDATER_LOCATION_APPLICATION",
		2: "UPDATER_LOCATION_BOOTLOADER",
		3: "UPDATER_LOCATION_SECONDARY_APPLICATION",
		4: "UPDATER_LOCATION_APPLICATION_IN_EXTERNAL_FLASH",
	}
	UpdaterLocation_value = map[string]int32{
		"UPDATER_LOCATION_NONE":                          0,
		"UPDATER_LOCATION_APPLICATION":                   1,
		"UPDATER_LOCATION_BOOTLOADER":                    2,
		"UPDATER_LOCATION_SECONDARY_APPLICATION":         3,
		"UPDATER_LOCATION_APPLICATION_IN_EXTERNAL_FLASH": 4,
	}
)

func (x UpdaterLocation) Enum() *UpdaterLocation {
	p := new(UpdaterLocation)
	*p = x
	return p
}

func (x UpdaterLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdaterLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[38].Descriptor()
}

func (UpdaterLocation) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[38]
}

func (x UpdaterLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdaterLocation.Descriptor instead.
func (UpdaterLocation) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{38}
}

type UpdaterStatusCode int32

const (
	UpdaterStatusCode_UPDATER_STATUS_CODE_ERROR                   UpdaterStatusCode = 0
	UpdaterStatusCode_UPDATER_STATUS_CODE_WAIT                    UpdaterStatusCode = 1
	UpdaterStatusCode_UPDATER_STATUS_CODE_BLOCK_STAGED            UpdaterStatusCode = 2
	UpdaterStatusCode_UPDATER_STATUS_CODE_IMAGE_STAGED            UpdaterStatusCode = 3
	UpdaterStatusCode_UPDATER_STATUS_CODE_CRC_CHECK_SUCCESS       UpdaterStatusCode = 4
	UpdaterStatusCode_UPDATER_STATUS_CODE_CRC_CHECK_FAIL          UpdaterStatusCode = 5
	UpdaterStatusCode_UPDATER_STATUS_CODE_HASH_FAIL               UpdaterStatusCode = 6
	UpdaterStatusCode_UPDATER_STATUS_CODE_SIGNATURE_FAIL          UpdaterStatusCode = 7
	UpdaterStatusCode_UPDATER_STATUS_CODE_ERROR_HASH_RESTORE_FAIL UpdaterStatusCode = 8
	UpdaterStatusCode_UPDATER_STATUS_CODE_LOCATION_SET            UpdaterStatusCode = 9
)

// Enum value maps for UpdaterStatusCode.
var (
	UpdaterStatusCode_name = map[int32]string{
		0: "UPDATER_STATUS_CODE_ERROR",
		1: "UPDATER_STATUS_CODE_WAIT",
		2: "UPDATER_STATUS_CODE_BLOCK_STAGED",
		3: "UPDATER_STATUS_CODE_IMAGE_STAGED",
		4: "UPDATER_STATUS_CODE_CRC_CHECK_SUCCESS",
		5: "UPDATER_STATUS_CODE_CRC_CHECK_FAIL",
		6: "UPDATER_STATUS_CODE_HASH_FAIL",
		7: "UPDATER_STATUS_CODE_SIGNATURE_FAIL",
		8: "UPDATER_STATUS_CODE_ERROR_HASH_RESTORE_FAIL",
		9: "UPDATER_STATUS_CODE_LOCATION_SET",
	}
	UpdaterStatusCode_value = map[string]int32{
		"UPDATER_STATUS_CODE_ERROR":                   0,
		"UPDATER_STATUS_CODE_WAIT":                    1,
		"UPDATER_STATUS_CODE_BLOCK_STAGED":            2,
		"UPDATER_STATUS_CODE_IMAGE_STAGED":            3,
		"UPDATER_STATUS_CODE_CRC_CHECK_SUCCESS":       4,
		"UPDATER_STATUS_CODE_CRC_CHECK_FAIL":          5,
		"UPDATER_STATUS_CODE_HASH_FAIL":               6,
		"UPDATER_STATUS_CODE_SIGNATURE_FAIL":          7,
		"UPDATER_STATUS_CODE_ERROR_HASH_RESTORE_FAIL": 8,
		"UPDATER_STATUS_CODE_LOCATION_SET":            9,
	}
)

func (x UpdaterStatusCode) Enum() *UpdaterStatusCode {
	p := new(UpdaterStatusCode)
	*p = x
	return p
}

func (x UpdaterStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdaterStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[39].Descriptor()
}

func (UpdaterStatusCode) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[39]
}

func (x UpdaterStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdaterStatusCode.Descriptor instead.
func (UpdaterStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{39}
}

type UWBAvailability int32

const (
	UWBAvailability_UWB_AVAILABILITY_UNKNOWN                        UWBAvailability = 0
	UWBAvailability_UWB_AVAILABILITY_AVAILABLE                      UWBAvailability = 1
	UWBAvailability_UWB_AVAILABILITY_UNAVAILABLE_UNSUPPORTED_DEVICE UWBAvailability = 2
	UWBAvailability_UWB_AVAILABILITY_UNAVAILABLE_PERMISSION_DENIED  UWBAvailability = 3
	UWBAvailability_UWB_AVAILABILITY_UNAVAILABLE                    UWBAvailability = 4
)

// Enum value maps for UWBAvailability.
var (
	UWBAvailability_name = map[int32]string{
		0: "UWB_AVAILABILITY_UNKNOWN",
		1: "UWB_AVAILABILITY_AVAILABLE",
		2: "UWB_AVAILABILITY_UNAVAILABLE_UNSUPPORTED_DEVICE",
		3: "UWB_AVAILABILITY_UNAVAILABLE_PERMISSION_DENIED",
		4: "UWB_AVAILABILITY_UNAVAILABLE",
	}
	UWBAvailability_value = map[string]int32{
		"UWB_AVAILABILITY_UNKNOWN":                        0,
		"UWB_AVAILABILITY_AVAILABLE":                      1,
		"UWB_AVAILABILITY_UNAVAILABLE_UNSUPPORTED_DEVICE": 2,
		"UWB_AVAILABILITY_UNAVAILABLE_PERMISSION_DENIED":  3,
		"UWB_AVAILABILITY_UNAVAILABLE":                    4,
	}
)

func (x UWBAvailability) Enum() *UWBAvailability {
	p := new(UWBAvailability)
	*p = x
	return p
}

func (x UWBAvailability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UWBAvailability) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[40].Descriptor()
}

func (UWBAvailability) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[40]
}

func (x UWBAvailability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UWBAvailability.Descriptor instead.
func (UWBAvailability) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{40}
}

type WhitelistKeyPermission_E int32

const (
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_ADD_TO_WHITELIST            WhitelistKeyPermission_E = 0
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_LOCAL_UNLOCK                WhitelistKeyPermission_E = 1
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_LOCAL_DRIVE                 WhitelistKeyPermission_E = 2
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_REMOTE_UNLOCK               WhitelistKeyPermission_E = 3
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_REMOTE_DRIVE                WhitelistKeyPermission_E = 4
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_CHANGE_PERMISSIONS          WhitelistKeyPermission_E = 5
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_REMOVE_FROM_WHITELIST       WhitelistKeyPermission_E = 6
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_REMOVE_SELF_FROM_WHITELIST  WhitelistKeyPermission_E = 7
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_MODIFY_FLEET_RESERVED_SLOTS WhitelistKeyPermission_E = 8
	WhitelistKeyPermission_E_WHITELISTKEYPERMISSION_UNKNOWN                     WhitelistKeyPermission_E = 31
)

// Enum value maps for WhitelistKeyPermission_E.
var (
	WhitelistKeyPermission_E_name = map[int32]string{
		0:  "WHITELISTKEYPERMISSION_ADD_TO_WHITELIST",
		1:  "WHITELISTKEYPERMISSION_LOCAL_UNLOCK",
		2:  "WHITELISTKEYPERMISSION_LOCAL_DRIVE",
		3:  "WHITELISTKEYPERMISSION_REMOTE_UNLOCK",
		4:  "WHITELISTKEYPERMISSION_REMOTE_DRIVE",
		5:  "WHITELISTKEYPERMISSION_CHANGE_PERMISSIONS",
		6:  "WHITELISTKEYPERMISSION_REMOVE_FROM_WHITELIST",
		7:  "WHITELISTKEYPERMISSION_REMOVE_SELF_FROM_WHITELIST",
		8:  "WHITELISTKEYPERMISSION_MODIFY_FLEET_RESERVED_SLOTS",
		31: "WHITELISTKEYPERMISSION_UNKNOWN",
	}
	WhitelistKeyPermission_E_value = map[string]int32{
		"WHITELISTKEYPERMISSION_ADD_TO_WHITELIST":            0,
		"WHITELISTKEYPERMISSION_LOCAL_UNLOCK":                1,
		"WHITELISTKEYPERMISSION_LOCAL_DRIVE":                 2,
		"WHITELISTKEYPERMISSION_REMOTE_UNLOCK":               3,
		"WHITELISTKEYPERMISSION_REMOTE_DRIVE":                4,
		"WHITELISTKEYPERMISSION_CHANGE_PERMISSIONS":          5,
		"WHITELISTKEYPERMISSION_REMOVE_FROM_WHITELIST":       6,
		"WHITELISTKEYPERMISSION_REMOVE_SELF_FROM_WHITELIST":  7,
		"WHITELISTKEYPERMISSION_MODIFY_FLEET_RESERVED_SLOTS": 8,
		"WHITELISTKEYPERMISSION_UNKNOWN":                     31,
	}
)

func (x WhitelistKeyPermission_E) Enum() *WhitelistKeyPermission_E {
	p := new(WhitelistKeyPermission_E)
	*p = x
	return p
}

func (x WhitelistKeyPermission_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WhitelistKeyPermission_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[41].Descriptor()
}

func (WhitelistKeyPermission_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[41]
}

func (x WhitelistKeyPermission_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WhitelistKeyPermission_E.Descriptor instead.
func (WhitelistKeyPermission_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{41}
}

type SignatureType int32

const (
	// Note: https://github.com/acvigue/TeslaProtobufs indicates this as "SIGNATURE_TYPE_AES_GCM = 0;"
	SignatureType_SIGNATURE_TYPE_NONE SignatureType = 0
	// BD Modified (added) - Begin
	SignatureType_SIGNATURE_TYPE_ECDSA SignatureType = 1
	// BD Modified (added) - End
	SignatureType_SIGNATURE_TYPE_PRESENT_KEY SignatureType = 2
	// BD Modified (added) - Begin
	SignatureType_SIGNATURE_TYPE_AES_GCM_TOKEN SignatureType = 3
	SignatureType_SIGNATURE_TYPE_UNSIGNED      SignatureType = 4 // BD Modified (added) - End
)

// Enum value maps for SignatureType.
var (
	SignatureType_name = map[int32]string{
		0: "SIGNATURE_TYPE_NONE",
		1: "SIGNATURE_TYPE_ECDSA",
		2: "SIGNATURE_TYPE_PRESENT_KEY",
		3: "SIGNATURE_TYPE_AES_GCM_TOKEN",
		4: "SIGNATURE_TYPE_UNSIGNED",
	}
	SignatureType_value = map[string]int32{
		"SIGNATURE_TYPE_NONE":          0,
		"SIGNATURE_TYPE_ECDSA":         1,
		"SIGNATURE_TYPE_PRESENT_KEY":   2,
		"SIGNATURE_TYPE_AES_GCM_TOKEN": 3,
		"SIGNATURE_TYPE_UNSIGNED":      4,
	}
)

func (x SignatureType) Enum() *SignatureType {
	p := new(SignatureType)
	*p = x
	return p
}

func (x SignatureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureType) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[42].Descriptor()
}

func (SignatureType) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[42]
}

func (x SignatureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureType.Descriptor instead.
func (SignatureType) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{42}
}

type KeyFormFactor int32

const (
	KeyFormFactor_KEY_FORM_FACTOR_UNKNOWN  KeyFormFactor = 0
	KeyFormFactor_KEY_FORM_FACTOR_NFC_CARD KeyFormFactor = 1
	// BD Modified (added) - Begin
	KeyFormFactor_KEY_FORM_FACTOR_3_BUTTON_BLE_CAR_KEYFOB KeyFormFactor = 2
	KeyFormFactor_KEY_FORM_FACTOR_BLE_DEVICE              KeyFormFactor = 3
	KeyFormFactor_KEY_FORM_FACTOR_NFC_DEVICE              KeyFormFactor = 4
	KeyFormFactor_KEY_FORM_FACTOR_BLE_AND_NFC_DEVICE      KeyFormFactor = 5
	// BD Modified (added) - End
	KeyFormFactor_KEY_FORM_FACTOR_IOS_DEVICE     KeyFormFactor = 6
	KeyFormFactor_KEY_FORM_FACTOR_ANDROID_DEVICE KeyFormFactor = 7
	// BD Modified (added) - Begin
	KeyFormFactor_KEY_FORM_FACTOR_3_BUTTON_BLE_CAR_KEYFOB_P60 KeyFormFactor = 8
	// BD Modified (added) - End
	KeyFormFactor_KEY_FORM_FACTOR_CLOUD_KEY KeyFormFactor = 9
	// BD Modified (added) - Begin
	KeyFormFactor_KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60    KeyFormFactor = 10
	KeyFormFactor_KEY_FORM_FACTOR_5_BUTTON_GEN2_CAR_KEYFOB_P60    KeyFormFactor = 11
	KeyFormFactor_KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60_V2 KeyFormFactor = 12
	KeyFormFactor_KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60_V3 KeyFormFactor = 13
	KeyFormFactor_KEY_FORM_FACTOR_NFC_CARD_P71                    KeyFormFactor = 14 // BD Modified (added) - End
)

// Enum value maps for KeyFormFactor.
var (
	KeyFormFactor_name = map[int32]string{
		0:  "KEY_FORM_FACTOR_UNKNOWN",
		1:  "KEY_FORM_FACTOR_NFC_CARD",
		2:  "KEY_FORM_FACTOR_3_BUTTON_BLE_CAR_KEYFOB",
		3:  "KEY_FORM_FACTOR_BLE_DEVICE",
		4:  "KEY_FORM_FACTOR_NFC_DEVICE",
		5:  "KEY_FORM_FACTOR_BLE_AND_NFC_DEVICE",
		6:  "KEY_FORM_FACTOR_IOS_DEVICE",
		7:  "KEY_FORM_FACTOR_ANDROID_DEVICE",
		8:  "KEY_FORM_FACTOR_3_BUTTON_BLE_CAR_KEYFOB_P60",
		9:  "KEY_FORM_FACTOR_CLOUD_KEY",
		10: "KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60",
		11: "KEY_FORM_FACTOR_5_BUTTON_GEN2_CAR_KEYFOB_P60",
		12: "KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60_V2",
		13: "KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60_V3",
		14: "KEY_FORM_FACTOR_NFC_CARD_P71",
	}
	KeyFormFactor_value = map[string]int32{
		"KEY_FORM_FACTOR_UNKNOWN":                         0,
		"KEY_FORM_FACTOR_NFC_CARD":                        1,
		"KEY_FORM_FACTOR_3_BUTTON_BLE_CAR_KEYFOB":         2,
		"KEY_FORM_FACTOR_BLE_DEVICE":                      3,
		"KEY_FORM_FACTOR_NFC_DEVICE":                      4,
		"KEY_FORM_FACTOR_BLE_AND_NFC_DEVICE":              5,
		"KEY_FORM_FACTOR_IOS_DEVICE":                      6,
		"KEY_FORM_FACTOR_ANDROID_DEVICE":                  7,
		"KEY_FORM_FACTOR_3_BUTTON_BLE_CAR_KEYFOB_P60":     8,
		"KEY_FORM_FACTOR_CLOUD_KEY":                       9,
		"KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60":    10,
		"KEY_FORM_FACTOR_5_BUTTON_GEN2_CAR_KEYFOB_P60":    11,
		"KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60_V2": 12,
		"KEY_FORM_FACTOR_3_BUTTON_GEN2_CAR_KEYFOB_P60_V3": 13,
		"KEY_FORM_FACTOR_NFC_CARD_P71":                    14,
	}
)

func (x KeyFormFactor) Enum() *KeyFormFactor {
	p := new(KeyFormFactor)
	*p = x
	return p
}

func (x KeyFormFactor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyFormFactor) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[43].Descriptor()
}

func (KeyFormFactor) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[43]
}

func (x KeyFormFactor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyFormFactor.Descriptor instead.
func (KeyFormFactor) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{43}
}

type InformationRequestType int32

const (
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_STATUS InformationRequestType = 0
	// BD Modified (added) - Begin
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_TOKEN                InformationRequestType = 1
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_COUNTER              InformationRequestType = 2
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_EPHEMERAL_PUBLIC_KEY InformationRequestType = 3
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_SESSION_DATA         InformationRequestType = 4
	// BD Modified (added) - End
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_WHITELIST_INFO       InformationRequestType = 5
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_WHITELIST_ENTRY_INFO InformationRequestType = 6
	// BD Modified (added) - Begin
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_VEHICLE_INFO   InformationRequestType = 7
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_KEYSTATUS_INFO InformationRequestType = 8
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_ACTIVE_KEY     InformationRequestType = 9
	InformationRequestType_INFORMATION_REQUEST_TYPE_GET_CAPABILITIES   InformationRequestType = 16 // BD Modified (added) - End
)

// Enum value maps for InformationRequestType.
var (
	InformationRequestType_name = map[int32]string{
		0:  "INFORMATION_REQUEST_TYPE_GET_STATUS",
		1:  "INFORMATION_REQUEST_TYPE_GET_TOKEN",
		2:  "INFORMATION_REQUEST_TYPE_GET_COUNTER",
		3:  "INFORMATION_REQUEST_TYPE_GET_EPHEMERAL_PUBLIC_KEY",
		4:  "INFORMATION_REQUEST_TYPE_GET_SESSION_DATA",
		5:  "INFORMATION_REQUEST_TYPE_GET_WHITELIST_INFO",
		6:  "INFORMATION_REQUEST_TYPE_GET_WHITELIST_ENTRY_INFO",
		7:  "INFORMATION_REQUEST_TYPE_GET_VEHICLE_INFO",
		8:  "INFORMATION_REQUEST_TYPE_GET_KEYSTATUS_INFO",
		9:  "INFORMATION_REQUEST_TYPE_GET_ACTIVE_KEY",
		16: "INFORMATION_REQUEST_TYPE_GET_CAPABILITIES",
	}
	InformationRequestType_value = map[string]int32{
		"INFORMATION_REQUEST_TYPE_GET_STATUS":               0,
		"INFORMATION_REQUEST_TYPE_GET_TOKEN":                1,
		"INFORMATION_REQUEST_TYPE_GET_COUNTER":              2,
		"INFORMATION_REQUEST_TYPE_GET_EPHEMERAL_PUBLIC_KEY": 3,
		"INFORMATION_REQUEST_TYPE_GET_SESSION_DATA":         4,
		"INFORMATION_REQUEST_TYPE_GET_WHITELIST_INFO":       5,
		"INFORMATION_REQUEST_TYPE_GET_WHITELIST_ENTRY_INFO": 6,
		"INFORMATION_REQUEST_TYPE_GET_VEHICLE_INFO":         7,
		"INFORMATION_REQUEST_TYPE_GET_KEYSTATUS_INFO":       8,
		"INFORMATION_REQUEST_TYPE_GET_ACTIVE_KEY":           9,
		"INFORMATION_REQUEST_TYPE_GET_CAPABILITIES":         16,
	}
)

func (x InformationRequestType) Enum() *InformationRequestType {
	p := new(InformationRequestType)
	*p = x
	return p
}

func (x InformationRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InformationRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[44].Descriptor()
}

func (InformationRequestType) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[44]
}

func (x InformationRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InformationRequestType.Descriptor instead.
func (InformationRequestType) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{44}
}

type RKEAction_E int32

const (
	RKEAction_E_RKE_ACTION_UNLOCK RKEAction_E = 0
	RKEAction_E_RKE_ACTION_LOCK   RKEAction_E = 1
	// BD Modified (added) - Begin
	RKEAction_E_RKE_ACTION_OPEN_TRUNK                   RKEAction_E = 2
	RKEAction_E_RKE_ACTION_OPEN_FRUNK                   RKEAction_E = 3
	RKEAction_E_RKE_ACTION_OPEN_CHARGE_PORT             RKEAction_E = 4
	RKEAction_E_RKE_ACTION_CLOSE_CHARGE_PORT            RKEAction_E = 5
	RKEAction_E_RKE_ACTION_CANCEL_EXTERNAL_AUTHENTICATE RKEAction_E = 6
	RKEAction_E_RKE_ACTION_SINGLE_PRESS_TOP             RKEAction_E = 7
	RKEAction_E_RKE_ACTION_DOUBLE_PRESS_TOP             RKEAction_E = 8
	RKEAction_E_RKE_ACTION_TRIPLE_PRESS_TOP             RKEAction_E = 9
	RKEAction_E_RKE_ACTION_HOLD_TOP                     RKEAction_E = 10
	RKEAction_E_RKE_ACTION_SINGLE_PRESS_BACK            RKEAction_E = 11
	RKEAction_E_RKE_ACTION_DOUBLE_PRESS_BACK            RKEAction_E = 12
	RKEAction_E_RKE_ACTION_TRIPLE_PRESS_BACK            RKEAction_E = 13
	RKEAction_E_RKE_ACTION_HOLD_BACK                    RKEAction_E = 14
	RKEAction_E_RKE_ACTION_SINGLE_PRESS_FRONT           RKEAction_E = 15
	RKEAction_E_RKE_ACTION_DOUBLE_PRESS_FRONT           RKEAction_E = 16
	RKEAction_E_RKE_ACTION_TRIPLE_PRESS_FRONT           RKEAction_E = 17
	RKEAction_E_RKE_ACTION_HOLD_FRONT                   RKEAction_E = 18
	RKEAction_E_RKE_ACTION_UNKNOWN                      RKEAction_E = 19
	// BD Modified (added) - End
	RKEAction_E_RKE_ACTION_REMOTE_DRIVE RKEAction_E = 20
	// BD Modified (added) - Begin
	RKEAction_E_RKE_ACTION_SINGLE_PRESS_LEFT  RKEAction_E = 21
	RKEAction_E_RKE_ACTION_DOUBLE_PRESS_LEFT  RKEAction_E = 22
	RKEAction_E_RKE_ACTION_TRIPLE_PRESS_LEFT  RKEAction_E = 23
	RKEAction_E_RKE_ACTION_HOLD_LEFT          RKEAction_E = 24
	RKEAction_E_RKE_ACTION_SINGLE_PRESS_RIGHT RKEAction_E = 25
	RKEAction_E_RKE_ACTION_DOUBLE_PRESS_RIGHT RKEAction_E = 26
	RKEAction_E_RKE_ACTION_TRIPLE_PRESS_RIGHT RKEAction_E = 27
	RKEAction_E_RKE_ACTION_HOLD_RIGHT         RKEAction_E = 28
	// BD Modified (added) - End
	RKEAction_E_RKE_ACTION_AUTO_SECURE_VEHICLE RKEAction_E = 29
	RKEAction_E_RKE_ACTION_WAKE_VEHICLE        RKEAction_E = 30
)

// Enum value maps for RKEAction_E.
var (
	RKEAction_E_name = map[int32]string{
		0:  "RKE_ACTION_UNLOCK",
		1:  "RKE_ACTION_LOCK",
		2:  "RKE_ACTION_OPEN_TRUNK",
		3:  "RKE_ACTION_OPEN_FRUNK",
		4:  "RKE_ACTION_OPEN_CHARGE_PORT",
		5:  "RKE_ACTION_CLOSE_CHARGE_PORT",
		6:  "RKE_ACTION_CANCEL_EXTERNAL_AUTHENTICATE",
		7:  "RKE_ACTION_SINGLE_PRESS_TOP",
		8:  "RKE_ACTION_DOUBLE_PRESS_TOP",
		9:  "RKE_ACTION_TRIPLE_PRESS_TOP",
		10: "RKE_ACTION_HOLD_TOP",
		11: "RKE_ACTION_SINGLE_PRESS_BACK",
		12: "RKE_ACTION_DOUBLE_PRESS_BACK",
		13: "RKE_ACTION_TRIPLE_PRESS_BACK",
		14: "RKE_ACTION_HOLD_BACK",
		15: "RKE_ACTION_SINGLE_PRESS_FRONT",
		16: "RKE_ACTION_DOUBLE_PRESS_FRONT",
		17: "RKE_ACTION_TRIPLE_PRESS_FRONT",
		18: "RKE_ACTION_HOLD_FRONT",
		19: "RKE_ACTION_UNKNOWN",
		20: "RKE_ACTION_REMOTE_DRIVE",
		21: "RKE_ACTION_SINGLE_PRESS_LEFT",
		22: "RKE_ACTION_DOUBLE_PRESS_LEFT",
		23: "RKE_ACTION_TRIPLE_PRESS_LEFT",
		24: "RKE_ACTION_HOLD_LEFT",
		25: "RKE_ACTION_SINGLE_PRESS_RIGHT",
		26: "RKE_ACTION_DOUBLE_PRESS_RIGHT",
		27: "RKE_ACTION_TRIPLE_PRESS_RIGHT",
		28: "RKE_ACTION_HOLD_RIGHT",
		29: "RKE_ACTION_AUTO_SECURE_VEHICLE",
		30: "RKE_ACTION_WAKE_VEHICLE",
	}
	RKEAction_E_value = map[string]int32{
		"RKE_ACTION_UNLOCK":                       0,
		"RKE_ACTION_LOCK":                         1,
		"RKE_ACTION_OPEN_TRUNK":                   2,
		"RKE_ACTION_OPEN_FRUNK":                   3,
		"RKE_ACTION_OPEN_CHARGE_PORT":             4,
		"RKE_ACTION_CLOSE_CHARGE_PORT":            5,
		"RKE_ACTION_CANCEL_EXTERNAL_AUTHENTICATE": 6,
		"RKE_ACTION_SINGLE_PRESS_TOP":             7,
		"RKE_ACTION_DOUBLE_PRESS_TOP":             8,
		"RKE_ACTION_TRIPLE_PRESS_TOP":             9,
		"RKE_ACTION_HOLD_TOP":                     10,
		"RKE_ACTION_SINGLE_PRESS_BACK":            11,
		"RKE_ACTION_DOUBLE_PRESS_BACK":            12,
		"RKE_ACTION_TRIPLE_PRESS_BACK":            13,
		"RKE_ACTION_HOLD_BACK":                    14,
		"RKE_ACTION_SINGLE_PRESS_FRONT":           15,
		"RKE_ACTION_DOUBLE_PRESS_FRONT":           16,
		"RKE_ACTION_TRIPLE_PRESS_FRONT":           17,
		"RKE_ACTION_HOLD_FRONT":                   18,
		"RKE_ACTION_UNKNOWN":                      19,
		"RKE_ACTION_REMOTE_DRIVE":                 20,
		"RKE_ACTION_SINGLE_PRESS_LEFT":            21,
		"RKE_ACTION_DOUBLE_PRESS_LEFT":            22,
		"RKE_ACTION_TRIPLE_PRESS_LEFT":            23,
		"RKE_ACTION_HOLD_LEFT":                    24,
		"RKE_ACTION_SINGLE_PRESS_RIGHT":           25,
		"RKE_ACTION_DOUBLE_PRESS_RIGHT":           26,
		"RKE_ACTION_TRIPLE_PRESS_RIGHT":           27,
		"RKE_ACTION_HOLD_RIGHT":                   28,
		"RKE_ACTION_AUTO_SECURE_VEHICLE":          29,
		"RKE_ACTION_WAKE_VEHICLE":                 30,
	}
)

func (x RKEAction_E) Enum() *RKEAction_E {
	p := new(RKEAction_E)
	*p = x
	return p
}

func (x RKEAction_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RKEAction_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[45].Descriptor()
}

func (RKEAction_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[45]
}

func (x RKEAction_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RKEAction_E.Descriptor instead.
func (RKEAction_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{45}
}

type ClosureMoveType_E int32

const (
	ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE  ClosureMoveType_E = 0
	ClosureMoveType_E_CLOSURE_MOVE_TYPE_MOVE  ClosureMoveType_E = 1
	ClosureMoveType_E_CLOSURE_MOVE_TYPE_STOP  ClosureMoveType_E = 2
	ClosureMoveType_E_CLOSURE_MOVE_TYPE_OPEN  ClosureMoveType_E = 3
	ClosureMoveType_E_CLOSURE_MOVE_TYPE_CLOSE ClosureMoveType_E = 4
)

// Enum value maps for ClosureMoveType_E.
var (
	ClosureMoveType_E_name = map[int32]string{
		0: "CLOSURE_MOVE_TYPE_NONE",
		1: "CLOSURE_MOVE_TYPE_MOVE",
		2: "CLOSURE_MOVE_TYPE_STOP",
		3: "CLOSURE_MOVE_TYPE_OPEN",
		4: "CLOSURE_MOVE_TYPE_CLOSE",
	}
	ClosureMoveType_E_value = map[string]int32{
		"CLOSURE_MOVE_TYPE_NONE":  0,
		"CLOSURE_MOVE_TYPE_MOVE":  1,
		"CLOSURE_MOVE_TYPE_STOP":  2,
		"CLOSURE_MOVE_TYPE_OPEN":  3,
		"CLOSURE_MOVE_TYPE_CLOSE": 4,
	}
)

func (x ClosureMoveType_E) Enum() *ClosureMoveType_E {
	p := new(ClosureMoveType_E)
	*p = x
	return p
}

func (x ClosureMoveType_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClosureMoveType_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[46].Descriptor()
}

func (ClosureMoveType_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[46]
}

func (x ClosureMoveType_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClosureMoveType_E.Descriptor instead.
func (ClosureMoveType_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{46}
}

type OperationStatus_E int32

const (
	OperationStatus_E_OPERATIONSTATUS_OK    OperationStatus_E = 0
	OperationStatus_E_OPERATIONSTATUS_WAIT  OperationStatus_E = 1
	OperationStatus_E_OPERATIONSTATUS_ERROR OperationStatus_E = 2
)

// Enum value maps for OperationStatus_E.
var (
	OperationStatus_E_name = map[int32]string{
		0: "OPERATIONSTATUS_OK",
		1: "OPERATIONSTATUS_WAIT",
		2: "OPERATIONSTATUS_ERROR",
	}
	OperationStatus_E_value = map[string]int32{
		"OPERATIONSTATUS_OK":    0,
		"OPERATIONSTATUS_WAIT":  1,
		"OPERATIONSTATUS_ERROR": 2,
	}
)

func (x OperationStatus_E) Enum() *OperationStatus_E {
	p := new(OperationStatus_E)
	*p = x
	return p
}

func (x OperationStatus_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[47].Descriptor()
}

func (OperationStatus_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[47]
}

func (x OperationStatus_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus_E.Descriptor instead.
func (OperationStatus_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{47}
}

type SignedMessageInformation_E int32

const (
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_NONE                                SignedMessageInformation_E = 0
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_UNKNOWN                       SignedMessageInformation_E = 1
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_NOT_ON_WHITELIST              SignedMessageInformation_E = 2
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_IV_SMALLER_THAN_EXPECTED      SignedMessageInformation_E = 3
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_INVALID_TOKEN                 SignedMessageInformation_E = 4
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_TOKEN_AND_COUNTER_INVALID     SignedMessageInformation_E = 5
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_AES_DECRYPT_AUTH              SignedMessageInformation_E = 6
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_ECDSA_INPUT                   SignedMessageInformation_E = 7
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_ECDSA_SIGNATURE               SignedMessageInformation_E = 8
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_LOCAL_ENTITY_START            SignedMessageInformation_E = 9
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_LOCAL_ENTITY_RESULT           SignedMessageInformation_E = 10
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_RETRIEVE_KEY        SignedMessageInformation_E = 11
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_RETRIEVE_TOKEN      SignedMessageInformation_E = 12
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_SIGNATURE_TOO_SHORT           SignedMessageInformation_E = 13
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_TOKEN_IS_INCORRECT_LENGTH     SignedMessageInformation_E = 14
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_INCORRECT_EPOCH               SignedMessageInformation_E = 15
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_IV_INCORRECT_LENGTH           SignedMessageInformation_E = 16
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_TIME_EXPIRED                  SignedMessageInformation_E = 17
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_NOT_PROVISIONED_WITH_IDENTITY SignedMessageInformation_E = 18
	SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_HASH_METADATA       SignedMessageInformation_E = 19
)

// Enum value maps for SignedMessageInformation_E.
var (
	SignedMessageInformation_E_name = map[int32]string{
		0:  "SIGNEDMESSAGE_INFORMATION_NONE",
		1:  "SIGNEDMESSAGE_INFORMATION_FAULT_UNKNOWN",
		2:  "SIGNEDMESSAGE_INFORMATION_FAULT_NOT_ON_WHITELIST",
		3:  "SIGNEDMESSAGE_INFORMATION_FAULT_IV_SMALLER_THAN_EXPECTED",
		4:  "SIGNEDMESSAGE_INFORMATION_FAULT_INVALID_TOKEN",
		5:  "SIGNEDMESSAGE_INFORMATION_FAULT_TOKEN_AND_COUNTER_INVALID",
		6:  "SIGNEDMESSAGE_INFORMATION_FAULT_AES_DECRYPT_AUTH",
		7:  "SIGNEDMESSAGE_INFORMATION_FAULT_ECDSA_INPUT",
		8:  "SIGNEDMESSAGE_INFORMATION_FAULT_ECDSA_SIGNATURE",
		9:  "SIGNEDMESSAGE_INFORMATION_FAULT_LOCAL_ENTITY_START",
		10: "SIGNEDMESSAGE_INFORMATION_FAULT_LOCAL_ENTITY_RESULT",
		11: "SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_RETRIEVE_KEY",
		12: "SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_RETRIEVE_TOKEN",
		13: "SIGNEDMESSAGE_INFORMATION_FAULT_SIGNATURE_TOO_SHORT",
		14: "SIGNEDMESSAGE_INFORMATION_FAULT_TOKEN_IS_INCORRECT_LENGTH",
		15: "SIGNEDMESSAGE_INFORMATION_FAULT_INCORRECT_EPOCH",
		16: "SIGNEDMESSAGE_INFORMATION_FAULT_IV_INCORRECT_LENGTH",
		17: "SIGNEDMESSAGE_INFORMATION_FAULT_TIME_EXPIRED",
		18: "SIGNEDMESSAGE_INFORMATION_FAULT_NOT_PROVISIONED_WITH_IDENTITY",
		19: "SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_HASH_METADATA",
	}
	SignedMessageInformation_E_value = map[string]int32{
		"SIGNEDMESSAGE_INFORMATION_NONE":                                0,
		"SIGNEDMESSAGE_INFORMATION_FAULT_UNKNOWN":                       1,
		"SIGNEDMESSAGE_INFORMATION_FAULT_NOT_ON_WHITELIST":              2,
		"SIGNEDMESSAGE_INFORMATION_FAULT_IV_SMALLER_THAN_EXPECTED":      3,
		"SIGNEDMESSAGE_INFORMATION_FAULT_INVALID_TOKEN":                 4,
		"SIGNEDMESSAGE_INFORMATION_FAULT_TOKEN_AND_COUNTER_INVALID":     5,
		"SIGNEDMESSAGE_INFORMATION_FAULT_AES_DECRYPT_AUTH":              6,
		"SIGNEDMESSAGE_INFORMATION_FAULT_ECDSA_INPUT":                   7,
		"SIGNEDMESSAGE_INFORMATION_FAULT_ECDSA_SIGNATURE":               8,
		"SIGNEDMESSAGE_INFORMATION_FAULT_LOCAL_ENTITY_START":            9,
		"SIGNEDMESSAGE_INFORMATION_FAULT_LOCAL_ENTITY_RESULT":           10,
		"SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_RETRIEVE_KEY":        11,
		"SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_RETRIEVE_TOKEN":      12,
		"SIGNEDMESSAGE_INFORMATION_FAULT_SIGNATURE_TOO_SHORT":           13,
		"SIGNEDMESSAGE_INFORMATION_FAULT_TOKEN_IS_INCORRECT_LENGTH":     14,
		"SIGNEDMESSAGE_INFORMATION_FAULT_INCORRECT_EPOCH":               15,
		"SIGNEDMESSAGE_INFORMATION_FAULT_IV_INCORRECT_LENGTH":           16,
		"SIGNEDMESSAGE_INFORMATION_FAULT_TIME_EXPIRED":                  17,
		"SIGNEDMESSAGE_INFORMATION_FAULT_NOT_PROVISIONED_WITH_IDENTITY": 18,
		"SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_HASH_METADATA":       19,
	}
)

func (x SignedMessageInformation_E) Enum() *SignedMessageInformation_E {
	p := new(SignedMessageInformation_E)
	*p = x
	return p
}

func (x SignedMessageInformation_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedMessageInformation_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[48].Descriptor()
}

func (SignedMessageInformation_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[48]
}

func (x SignedMessageInformation_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignedMessageInformation_E.Descriptor instead.
func (SignedMessageInformation_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{48}
}

type WhitelistOperationInformation_E int32

const (
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_NONE                                                            WhitelistOperationInformation_E = 0
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_UNDOCUMENTED_ERROR                                              WhitelistOperationInformation_E = 1
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_REMOVE_ONESELF                                 WhitelistOperationInformation_E = 2
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_KEYFOB_SLOTS_FULL                                               WhitelistOperationInformation_E = 3
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_WHITELIST_FULL                                                  WhitelistOperationInformation_E = 4
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_ADD                                            WhitelistOperationInformation_E = 5
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_INVALID_PUBLIC_KEY                                              WhitelistOperationInformation_E = 6
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_REMOVE                                         WhitelistOperationInformation_E = 7
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_CHANGE_PERMISSIONS                             WhitelistOperationInformation_E = 8
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ELEVATE_OTHER_ABOVE_ONESELF                       WhitelistOperationInformation_E = 9
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_DEMOTE_SUPERIOR_TO_ONESELF                        WhitelistOperationInformation_E = 10
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_REMOVE_OWN_PERMISSIONS                            WhitelistOperationInformation_E = 11
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_PUBLIC_KEY_NOT_ON_WHITELIST                                     WhitelistOperationInformation_E = 12
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_THAT_IS_ALREADY_ON_THE_WHITELIST          WhitelistOperationInformation_E = 13
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_NOT_ALLOWED_TO_ADD_UNLESS_ON_READER                             WhitelistOperationInformation_E = 14
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_FM_MODIFYING_OUTSIDE_OF_F_MODE                                  WhitelistOperationInformation_E = 15
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_FM_ATTEMPTING_TO_ADD_PERMANENT_KEY                              WhitelistOperationInformation_E = 16
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_FM_ATTEMPTING_TO_REMOVE_PERMANENT_KEY                           WhitelistOperationInformation_E = 17
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_KEYCHAIN_WHILE_FS_FULL                                          WhitelistOperationInformation_E = 18
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_WITHOUT_ROLE                              WhitelistOperationInformation_E = 19
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_WITH_SERVICE_ROLE                         WhitelistOperationInformation_E = 20
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_NON_SERVICE_KEY_ATTEMPTING_TO_ADD_SERVICE_TECH                  WhitelistOperationInformation_E = 21
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_SERVICE_KEY_ATTEMPTING_TO_ADD_SERVICE_TECH_OUTSIDE_SERVICE_MODE WhitelistOperationInformation_E = 22
	// BD Modified (added) - Begin
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_COULD_NOT_START_LOCAL_ENTITY_AUTH                     WhitelistOperationInformation_E = 23
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_UI_DENIED                    WhitelistOperationInformation_E = 24
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_TIMED_OUT_WAITING_FOR_TAP    WhitelistOperationInformation_E = 25
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_TIMED_OUT_WAITING_FOR_UI_ACK WhitelistOperationInformation_E = 26
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_VALET_MODE                   WhitelistOperationInformation_E = 27
	WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_CANCELLED                    WhitelistOperationInformation_E = 28 // BD Modified (added) - End
)

// Enum value maps for WhitelistOperationInformation_E.
var (
	WhitelistOperationInformation_E_name = map[int32]string{
		0:  "WHITELISTOPERATION_INFORMATION_NONE",
		1:  "WHITELISTOPERATION_INFORMATION_UNDOCUMENTED_ERROR",
		2:  "WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_REMOVE_ONESELF",
		3:  "WHITELISTOPERATION_INFORMATION_KEYFOB_SLOTS_FULL",
		4:  "WHITELISTOPERATION_INFORMATION_WHITELIST_FULL",
		5:  "WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_ADD",
		6:  "WHITELISTOPERATION_INFORMATION_INVALID_PUBLIC_KEY",
		7:  "WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_REMOVE",
		8:  "WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_CHANGE_PERMISSIONS",
		9:  "WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ELEVATE_OTHER_ABOVE_ONESELF",
		10: "WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_DEMOTE_SUPERIOR_TO_ONESELF",
		11: "WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_REMOVE_OWN_PERMISSIONS",
		12: "WHITELISTOPERATION_INFORMATION_PUBLIC_KEY_NOT_ON_WHITELIST",
		13: "WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_THAT_IS_ALREADY_ON_THE_WHITELIST",
		14: "WHITELISTOPERATION_INFORMATION_NOT_ALLOWED_TO_ADD_UNLESS_ON_READER",
		15: "WHITELISTOPERATION_INFORMATION_FM_MODIFYING_OUTSIDE_OF_F_MODE",
		16: "WHITELISTOPERATION_INFORMATION_FM_ATTEMPTING_TO_ADD_PERMANENT_KEY",
		17: "WHITELISTOPERATION_INFORMATION_FM_ATTEMPTING_TO_REMOVE_PERMANENT_KEY",
		18: "WHITELISTOPERATION_INFORMATION_KEYCHAIN_WHILE_FS_FULL",
		19: "WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_WITHOUT_ROLE",
		20: "WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_WITH_SERVICE_ROLE",
		21: "WHITELISTOPERATION_INFORMATION_NON_SERVICE_KEY_ATTEMPTING_TO_ADD_SERVICE_TECH",
		22: "WHITELISTOPERATION_INFORMATION_SERVICE_KEY_ATTEMPTING_TO_ADD_SERVICE_TECH_OUTSIDE_SERVICE_MODE",
		23: "WHITELISTOPERATION_INFORMATION_COULD_NOT_START_LOCAL_ENTITY_AUTH",
		24: "WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_UI_DENIED",
		25: "WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_TIMED_OUT_WAITING_FOR_TAP",
		26: "WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_TIMED_OUT_WAITING_FOR_UI_ACK",
		27: "WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_VALET_MODE",
		28: "WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_CANCELLED",
	}
	WhitelistOperationInformation_E_value = map[string]int32{
		"WHITELISTOPERATION_INFORMATION_NONE":                                                            0,
		"WHITELISTOPERATION_INFORMATION_UNDOCUMENTED_ERROR":                                              1,
		"WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_REMOVE_ONESELF":                                 2,
		"WHITELISTOPERATION_INFORMATION_KEYFOB_SLOTS_FULL":                                               3,
		"WHITELISTOPERATION_INFORMATION_WHITELIST_FULL":                                                  4,
		"WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_ADD":                                            5,
		"WHITELISTOPERATION_INFORMATION_INVALID_PUBLIC_KEY":                                              6,
		"WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_REMOVE":                                         7,
		"WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_CHANGE_PERMISSIONS":                             8,
		"WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ELEVATE_OTHER_ABOVE_ONESELF":                       9,
		"WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_DEMOTE_SUPERIOR_TO_ONESELF":                        10,
		"WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_REMOVE_OWN_PERMISSIONS":                            11,
		"WHITELISTOPERATION_INFORMATION_PUBLIC_KEY_NOT_ON_WHITELIST":                                     12,
		"WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_THAT_IS_ALREADY_ON_THE_WHITELIST":          13,
		"WHITELISTOPERATION_INFORMATION_NOT_ALLOWED_TO_ADD_UNLESS_ON_READER":                             14,
		"WHITELISTOPERATION_INFORMATION_FM_MODIFYING_OUTSIDE_OF_F_MODE":                                  15,
		"WHITELISTOPERATION_INFORMATION_FM_ATTEMPTING_TO_ADD_PERMANENT_KEY":                              16,
		"WHITELISTOPERATION_INFORMATION_FM_ATTEMPTING_TO_REMOVE_PERMANENT_KEY":                           17,
		"WHITELISTOPERATION_INFORMATION_KEYCHAIN_WHILE_FS_FULL":                                          18,
		"WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_WITHOUT_ROLE":                              19,
		"WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_WITH_SERVICE_ROLE":                         20,
		"WHITELISTOPERATION_INFORMATION_NON_SERVICE_KEY_ATTEMPTING_TO_ADD_SERVICE_TECH":                  21,
		"WHITELISTOPERATION_INFORMATION_SERVICE_KEY_ATTEMPTING_TO_ADD_SERVICE_TECH_OUTSIDE_SERVICE_MODE": 22,
		"WHITELISTOPERATION_INFORMATION_COULD_NOT_START_LOCAL_ENTITY_AUTH":                               23,
		"WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_UI_DENIED":                              24,
		"WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_TIMED_OUT_WAITING_FOR_TAP":              25,
		"WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_TIMED_OUT_WAITING_FOR_UI_ACK":           26,
		"WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_VALET_MODE":                             27,
		"WHITELISTOPERATION_INFORMATION_LOCAL_ENTITY_AUTH_FAILED_CANCELLED":                              28,
	}
)

func (x WhitelistOperationInformation_E) Enum() *WhitelistOperationInformation_E {
	p := new(WhitelistOperationInformation_E)
	*p = x
	return p
}

func (x WhitelistOperationInformation_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WhitelistOperationInformation_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[49].Descriptor()
}

func (WhitelistOperationInformation_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[49]
}

func (x WhitelistOperationInformation_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WhitelistOperationInformation_E.Descriptor instead.
func (WhitelistOperationInformation_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{49}
}

type ClosureState_E int32

const (
	ClosureState_E_CLOSURESTATE_CLOSED         ClosureState_E = 0
	ClosureState_E_CLOSURESTATE_OPEN           ClosureState_E = 1
	ClosureState_E_CLOSURESTATE_AJAR           ClosureState_E = 2
	ClosureState_E_CLOSURESTATE_UNKNOWN        ClosureState_E = 3
	ClosureState_E_CLOSURESTATE_FAILED_UNLATCH ClosureState_E = 4
	ClosureState_E_CLOSURESTATE_OPENING        ClosureState_E = 5
	ClosureState_E_CLOSURESTATE_CLOSING        ClosureState_E = 6
)

// Enum value maps for ClosureState_E.
var (
	ClosureState_E_name = map[int32]string{
		0: "CLOSURESTATE_CLOSED",
		1: "CLOSURESTATE_OPEN",
		2: "CLOSURESTATE_AJAR",
		3: "CLOSURESTATE_UNKNOWN",
		4: "CLOSURESTATE_FAILED_UNLATCH",
		5: "CLOSURESTATE_OPENING",
		6: "CLOSURESTATE_CLOSING",
	}
	ClosureState_E_value = map[string]int32{
		"CLOSURESTATE_CLOSED":         0,
		"CLOSURESTATE_OPEN":           1,
		"CLOSURESTATE_AJAR":           2,
		"CLOSURESTATE_UNKNOWN":        3,
		"CLOSURESTATE_FAILED_UNLATCH": 4,
		"CLOSURESTATE_OPENING":        5,
		"CLOSURESTATE_CLOSING":        6,
	}
)

func (x ClosureState_E) Enum() *ClosureState_E {
	p := new(ClosureState_E)
	*p = x
	return p
}

func (x ClosureState_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClosureState_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[50].Descriptor()
}

func (ClosureState_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[50]
}

func (x ClosureState_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClosureState_E.Descriptor instead.
func (ClosureState_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{50}
}

type VehicleLockState_E int32

const (
	VehicleLockState_E_VEHICLELOCKSTATE_UNLOCKED           VehicleLockState_E = 0
	VehicleLockState_E_VEHICLELOCKSTATE_LOCKED             VehicleLockState_E = 1
	VehicleLockState_E_VEHICLELOCKSTATE_INTERNAL_LOCKED    VehicleLockState_E = 2
	VehicleLockState_E_VEHICLELOCKSTATE_SELECTIVE_UNLOCKED VehicleLockState_E = 3
)

// Enum value maps for VehicleLockState_E.
var (
	VehicleLockState_E_name = map[int32]string{
		0: "VEHICLELOCKSTATE_UNLOCKED",
		1: "VEHICLELOCKSTATE_LOCKED",
		2: "VEHICLELOCKSTATE_INTERNAL_LOCKED",
		3: "VEHICLELOCKSTATE_SELECTIVE_UNLOCKED",
	}
	VehicleLockState_E_value = map[string]int32{
		"VEHICLELOCKSTATE_UNLOCKED":           0,
		"VEHICLELOCKSTATE_LOCKED":             1,
		"VEHICLELOCKSTATE_INTERNAL_LOCKED":    2,
		"VEHICLELOCKSTATE_SELECTIVE_UNLOCKED": 3,
	}
)

func (x VehicleLockState_E) Enum() *VehicleLockState_E {
	p := new(VehicleLockState_E)
	*p = x
	return p
}

func (x VehicleLockState_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleLockState_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[51].Descriptor()
}

func (VehicleLockState_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[51]
}

func (x VehicleLockState_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleLockState_E.Descriptor instead.
func (VehicleLockState_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{51}
}

type VehicleSleepStatus_E int32

const (
	VehicleSleepStatus_E_VEHICLE_SLEEP_STATUS_UNKNOWN VehicleSleepStatus_E = 0
	VehicleSleepStatus_E_VEHICLE_SLEEP_STATUS_AWAKE   VehicleSleepStatus_E = 1
	VehicleSleepStatus_E_VEHICLE_SLEEP_STATUS_ASLEEP  VehicleSleepStatus_E = 2
)

// Enum value maps for VehicleSleepStatus_E.
var (
	VehicleSleepStatus_E_name = map[int32]string{
		0: "VEHICLE_SLEEP_STATUS_UNKNOWN",
		1: "VEHICLE_SLEEP_STATUS_AWAKE",
		2: "VEHICLE_SLEEP_STATUS_ASLEEP",
	}
	VehicleSleepStatus_E_value = map[string]int32{
		"VEHICLE_SLEEP_STATUS_UNKNOWN": 0,
		"VEHICLE_SLEEP_STATUS_AWAKE":   1,
		"VEHICLE_SLEEP_STATUS_ASLEEP":  2,
	}
)

func (x VehicleSleepStatus_E) Enum() *VehicleSleepStatus_E {
	p := new(VehicleSleepStatus_E)
	*p = x
	return p
}

func (x VehicleSleepStatus_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleSleepStatus_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[52].Descriptor()
}

func (VehicleSleepStatus_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[52]
}

func (x VehicleSleepStatus_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleSleepStatus_E.Descriptor instead.
func (VehicleSleepStatus_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{52}
}

type UserPresence_E int32

const (
	UserPresence_E_VEHICLE_USER_PRESENCE_UNKNOWN     UserPresence_E = 0
	UserPresence_E_VEHICLE_USER_PRESENCE_NOT_PRESENT UserPresence_E = 1
	UserPresence_E_VEHICLE_USER_PRESENCE_PRESENT     UserPresence_E = 2
)

// Enum value maps for UserPresence_E.
var (
	UserPresence_E_name = map[int32]string{
		0: "VEHICLE_USER_PRESENCE_UNKNOWN",
		1: "VEHICLE_USER_PRESENCE_NOT_PRESENT",
		2: "VEHICLE_USER_PRESENCE_PRESENT",
	}
	UserPresence_E_value = map[string]int32{
		"VEHICLE_USER_PRESENCE_UNKNOWN":     0,
		"VEHICLE_USER_PRESENCE_NOT_PRESENT": 1,
		"VEHICLE_USER_PRESENCE_PRESENT":     2,
	}
)

func (x UserPresence_E) Enum() *UserPresence_E {
	p := new(UserPresence_E)
	*p = x
	return p
}

func (x UserPresence_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPresence_E) Descriptor() protoreflect.EnumDescriptor {
	return file_vcsec_proto_enumTypes[53].Descriptor()
}

func (UserPresence_E) Type() protoreflect.EnumType {
	return &file_vcsec_proto_enumTypes[53]
}

func (x UserPresence_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPresence_E.Descriptor instead.
func (UserPresence_E) EnumDescriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{53}
}

// BD Modified (added) - Begin
type AccelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XAccelG int32 `protobuf:"varint,1,opt,name=xAccel_g,json=xAccelG,proto3" json:"xAccel_g,omitempty"`
	ZAccelG int32 `protobuf:"varint,2,opt,name=zAccel_g,json=zAccelG,proto3" json:"zAccel_g,omitempty"`
}

func (x *AccelData) Reset() {
	*x = AccelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelData) ProtoMessage() {}

func (x *AccelData) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelData.ProtoReflect.Descriptor instead.
func (*AccelData) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{0}
}

func (x *AccelData) GetXAccelG() int32 {
	if x != nil {
		return x.XAccelG
	}
	return 0
}

func (x *AccelData) GetZAccelG() int32 {
	if x != nil {
		return x.ZAccelG
	}
	return 0
}

type ActiveKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveKey *KeyIdentifier `protobuf:"bytes,1,opt,name=activeKey,proto3" json:"activeKey,omitempty"`
}

func (x *ActiveKey) Reset() {
	*x = ActiveKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveKey) ProtoMessage() {}

func (x *ActiveKey) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveKey.ProtoReflect.Descriptor instead.
func (*ActiveKey) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{1}
}

func (x *ActiveKey) GetActiveKey() *KeyIdentifier {
	if x != nil {
		return x.ActiveKey
	}
	return nil
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*Alert_AlertHandlePulledWithoutAuth
	//	*Alert_AlertConfirmation
	SubMessage isAlert_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{2}
}

func (m *Alert) GetSubMessage() isAlert_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *Alert) GetAlertHandlePulledWithoutAuth() *AlertHandlePulledWithoutAuth {
	if x, ok := x.GetSubMessage().(*Alert_AlertHandlePulledWithoutAuth); ok {
		return x.AlertHandlePulledWithoutAuth
	}
	return nil
}

func (x *Alert) GetAlertConfirmation() AlertConfirmation {
	if x, ok := x.GetSubMessage().(*Alert_AlertConfirmation); ok {
		return x.AlertConfirmation
	}
	return AlertConfirmation_ALERT_CONFIRMATION_NONE
}

type isAlert_SubMessage interface {
	isAlert_SubMessage()
}

type Alert_AlertHandlePulledWithoutAuth struct {
	AlertHandlePulledWithoutAuth *AlertHandlePulledWithoutAuth `protobuf:"bytes,1,opt,name=alertHandlePulledWithoutAuth,proto3,oneof"`
}

type Alert_AlertConfirmation struct {
	AlertConfirmation AlertConfirmation `protobuf:"varint,2,opt,name=alertConfirmation,proto3,enum=VCSEC.AlertConfirmation,oneof"`
}

func (*Alert_AlertHandlePulledWithoutAuth) isAlert_SubMessage() {}

func (*Alert_AlertConfirmation) isAlert_SubMessage() {}

type AlertHandlePulledWithoutAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSinceAlertSetMs   uint32                                          `protobuf:"varint,1,opt,name=timeSinceAlertSet_ms,json=timeSinceAlertSetMs,proto3" json:"timeSinceAlertSet_ms,omitempty"`
	HandlePulled          HandlePulled_E                                  `protobuf:"varint,2,opt,name=handlePulled,proto3,enum=VCSEC.HandlePulled_E" json:"handlePulled,omitempty"`
	ConnectionCount       uint32                                          `protobuf:"varint,3,opt,name=connectionCount,proto3" json:"connectionCount,omitempty"`
	UnknownDevicePresent  bool                                            `protobuf:"varint,4,opt,name=unknownDevicePresent,proto3" json:"unknownDevicePresent,omitempty"`
	AuthRequested         bool                                            `protobuf:"varint,5,opt,name=authRequested,proto3" json:"authRequested,omitempty"`
	DeviceSpecificPayload []*HandlePulledWithoutAuthDeviceSpecificPayload `protobuf:"bytes,6,rep,name=deviceSpecificPayload,proto3" json:"deviceSpecificPayload,omitempty"`
}

func (x *AlertHandlePulledWithoutAuth) Reset() {
	*x = AlertHandlePulledWithoutAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertHandlePulledWithoutAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertHandlePulledWithoutAuth) ProtoMessage() {}

func (x *AlertHandlePulledWithoutAuth) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertHandlePulledWithoutAuth.ProtoReflect.Descriptor instead.
func (*AlertHandlePulledWithoutAuth) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{3}
}

func (x *AlertHandlePulledWithoutAuth) GetTimeSinceAlertSetMs() uint32 {
	if x != nil {
		return x.TimeSinceAlertSetMs
	}
	return 0
}

func (x *AlertHandlePulledWithoutAuth) GetHandlePulled() HandlePulled_E {
	if x != nil {
		return x.HandlePulled
	}
	return HandlePulled_E_HANDLE_PULLED_FRONT_DRIVER_DOOR
}

func (x *AlertHandlePulledWithoutAuth) GetConnectionCount() uint32 {
	if x != nil {
		return x.ConnectionCount
	}
	return 0
}

func (x *AlertHandlePulledWithoutAuth) GetUnknownDevicePresent() bool {
	if x != nil {
		return x.UnknownDevicePresent
	}
	return false
}

func (x *AlertHandlePulledWithoutAuth) GetAuthRequested() bool {
	if x != nil {
		return x.AuthRequested
	}
	return false
}

func (x *AlertHandlePulledWithoutAuth) GetDeviceSpecificPayload() []*HandlePulledWithoutAuthDeviceSpecificPayload {
	if x != nil {
		return x.DeviceSpecificPayload
	}
	return nil
}

type AppDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareModelSha256 []byte             `protobuf:"bytes,1,opt,name=hardware_model_sha256,json=hardwareModelSha256,proto3" json:"hardware_model_sha256,omitempty"`
	Os                  AppOperatingSystem `protobuf:"varint,2,opt,name=os,proto3,enum=VCSEC.AppOperatingSystem" json:"os,omitempty"`
	UWBAvailable        UWBAvailability    `protobuf:"varint,3,opt,name=UWBAvailable,proto3,enum=VCSEC.UWBAvailability" json:"UWBAvailable,omitempty"`
	PhoneVersion        *PhoneVersionInfo  `protobuf:"bytes,4,opt,name=phoneVersion,proto3" json:"phoneVersion,omitempty"`
}

func (x *AppDeviceInfo) Reset() {
	*x = AppDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeviceInfo) ProtoMessage() {}

func (x *AppDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeviceInfo.ProtoReflect.Descriptor instead.
func (*AppDeviceInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{4}
}

func (x *AppDeviceInfo) GetHardwareModelSha256() []byte {
	if x != nil {
		return x.HardwareModelSha256
	}
	return nil
}

func (x *AppDeviceInfo) GetOs() AppOperatingSystem {
	if x != nil {
		return x.Os
	}
	return AppOperatingSystem_UNKNOWN
}

func (x *AppDeviceInfo) GetUWBAvailable() UWBAvailability {
	if x != nil {
		return x.UWBAvailable
	}
	return UWBAvailability_UWB_AVAILABILITY_UNKNOWN
}

func (x *AppDeviceInfo) GetPhoneVersion() *PhoneVersionInfo {
	if x != nil {
		return x.PhoneVersion
	}
	return nil
}

type AppEventLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32 `protobuf:"fixed32,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to SubMessage:
	//
	//	*AppEventLog_PeerRemovedPairingInformation
	SubMessage isAppEventLog_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *AppEventLog) Reset() {
	*x = AppEventLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppEventLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEventLog) ProtoMessage() {}

func (x *AppEventLog) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEventLog.ProtoReflect.Descriptor instead.
func (*AppEventLog) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{5}
}

func (x *AppEventLog) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *AppEventLog) GetSubMessage() isAppEventLog_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *AppEventLog) GetPeerRemovedPairingInformation() *AppEventPeerRemovedPairingInformation {
	if x, ok := x.GetSubMessage().(*AppEventLog_PeerRemovedPairingInformation); ok {
		return x.PeerRemovedPairingInformation
	}
	return nil
}

type isAppEventLog_SubMessage interface {
	isAppEventLog_SubMessage()
}

type AppEventLog_PeerRemovedPairingInformation struct {
	PeerRemovedPairingInformation *AppEventPeerRemovedPairingInformation `protobuf:"bytes,2,opt,name=peerRemovedPairingInformation,proto3,oneof"`
}

func (*AppEventLog_PeerRemovedPairingInformation) isAppEventLog_SubMessage() {}

type AppEventPeerRemovedPairingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId *KeyIdentifier `protobuf:"bytes,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
}

func (x *AppEventPeerRemovedPairingInformation) Reset() {
	*x = AppEventPeerRemovedPairingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppEventPeerRemovedPairingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEventPeerRemovedPairingInformation) ProtoMessage() {}

func (x *AppEventPeerRemovedPairingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEventPeerRemovedPairingInformation.ProtoReflect.Descriptor instead.
func (*AppEventPeerRemovedPairingInformation) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{6}
}

func (x *AppEventPeerRemovedPairingInformation) GetKeyId() *KeyIdentifier {
	if x != nil {
		return x.KeyId
	}
	return nil
}

type ASICSPIRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response uint32 `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
	Data_    uint32 `protobuf:"varint,2,opt,name=data_,json=data,proto3" json:"data_,omitempty"`
	OpCode   uint32 `protobuf:"varint,3,opt,name=opCode,proto3" json:"opCode,omitempty"`
}

func (x *ASICSPIRead) Reset() {
	*x = ASICSPIRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASICSPIRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASICSPIRead) ProtoMessage() {}

func (x *ASICSPIRead) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASICSPIRead.ProtoReflect.Descriptor instead.
func (*ASICSPIRead) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{7}
}

func (x *ASICSPIRead) GetResponse() uint32 {
	if x != nil {
		return x.Response
	}
	return 0
}

func (x *ASICSPIRead) GetData_() uint32 {
	if x != nil {
		return x.Data_
	}
	return 0
}

func (x *ASICSPIRead) GetOpCode() uint32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

type AuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionInfo    *AuthenticationRequestToken `protobuf:"bytes,2,opt,name=sessionInfo,proto3" json:"sessionInfo,omitempty"`
	RequestedLevel AuthenticationLevel_E       `protobuf:"varint,3,opt,name=requestedLevel,proto3,enum=VCSEC.AuthenticationLevel_E" json:"requestedLevel,omitempty"`
	ReasonsForAuth []AuthenticationReason_E    `protobuf:"varint,4,rep,packed,name=reasonsForAuth,proto3,enum=VCSEC.AuthenticationReason_E" json:"reasonsForAuth,omitempty"`
}

func (x *AuthenticationRequest) Reset() {
	*x = AuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationRequest) ProtoMessage() {}

func (x *AuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationRequest.ProtoReflect.Descriptor instead.
func (*AuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{8}
}

func (x *AuthenticationRequest) GetSessionInfo() *AuthenticationRequestToken {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *AuthenticationRequest) GetRequestedLevel() AuthenticationLevel_E {
	if x != nil {
		return x.RequestedLevel
	}
	return AuthenticationLevel_E_AUTHENTICATION_LEVEL_NONE
}

func (x *AuthenticationRequest) GetReasonsForAuth() []AuthenticationReason_E {
	if x != nil {
		return x.ReasonsForAuth
	}
	return nil
}

type AuthenticationRequestToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AuthenticationRequestToken) Reset() {
	*x = AuthenticationRequestToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationRequestToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationRequestToken) ProtoMessage() {}

func (x *AuthenticationRequestToken) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationRequestToken.ProtoReflect.Descriptor instead.
func (*AuthenticationRequestToken) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{9}
}

func (x *AuthenticationRequestToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type AuthenticationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationLevel     AuthenticationLevel_E     `protobuf:"varint,1,opt,name=authenticationLevel,proto3,enum=VCSEC.AuthenticationLevel_E" json:"authenticationLevel,omitempty"`
	EstimatedDistance       uint32                    `protobuf:"varint,2,opt,name=estimatedDistance,proto3" json:"estimatedDistance,omitempty"`
	AuthenticationRejection AuthenticationRejection_E `protobuf:"varint,3,opt,name=authenticationRejection,proto3,enum=VCSEC.AuthenticationRejection_E" json:"authenticationRejection,omitempty"`
}

func (x *AuthenticationResponse) Reset() {
	*x = AuthenticationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationResponse) ProtoMessage() {}

func (x *AuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationResponse.ProtoReflect.Descriptor instead.
func (*AuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{10}
}

func (x *AuthenticationResponse) GetAuthenticationLevel() AuthenticationLevel_E {
	if x != nil {
		return x.AuthenticationLevel
	}
	return AuthenticationLevel_E_AUTHENTICATION_LEVEL_NONE
}

func (x *AuthenticationResponse) GetEstimatedDistance() uint32 {
	if x != nil {
		return x.EstimatedDistance
	}
	return 0
}

func (x *AuthenticationResponse) GetAuthenticationRejection() AuthenticationRejection_E {
	if x != nil {
		return x.AuthenticationRejection
	}
	return AuthenticationRejection_E_AUTHENTICATIONREJECTION_NONE
}

type BLEConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*BLEConfig_ADVInterval
	//	*BLEConfig_SleepClockAccuracy
	SubMessage isBLEConfig_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *BLEConfig) Reset() {
	*x = BLEConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BLEConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BLEConfig) ProtoMessage() {}

func (x *BLEConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BLEConfig.ProtoReflect.Descriptor instead.
func (*BLEConfig) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{11}
}

func (m *BLEConfig) GetSubMessage() isBLEConfig_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *BLEConfig) GetADVInterval() uint32 {
	if x, ok := x.GetSubMessage().(*BLEConfig_ADVInterval); ok {
		return x.ADVInterval
	}
	return 0
}

func (x *BLEConfig) GetSleepClockAccuracy() uint32 {
	if x, ok := x.GetSubMessage().(*BLEConfig_SleepClockAccuracy); ok {
		return x.SleepClockAccuracy
	}
	return 0
}

type isBLEConfig_SubMessage interface {
	isBLEConfig_SubMessage()
}

type BLEConfig_ADVInterval struct {
	ADVInterval uint32 `protobuf:"varint,1,opt,name=ADVInterval,proto3,oneof"`
}

type BLEConfig_SleepClockAccuracy struct {
	SleepClockAccuracy uint32 `protobuf:"varint,2,opt,name=sleepClockAccuracy,proto3,oneof"`
}

func (*BLEConfig_ADVInterval) isBLEConfig_SubMessage() {}

func (*BLEConfig_SleepClockAccuracy) isBLEConfig_SubMessage() {}

type BLEConfigAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ADVInterval        uint32 `protobuf:"varint,1,opt,name=ADVInterval,proto3" json:"ADVInterval,omitempty"`
	SleepClockAccuracy uint32 `protobuf:"varint,2,opt,name=sleepClockAccuracy,proto3" json:"sleepClockAccuracy,omitempty"`
}

func (x *BLEConfigAll) Reset() {
	*x = BLEConfigAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BLEConfigAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BLEConfigAll) ProtoMessage() {}

func (x *BLEConfigAll) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BLEConfigAll.ProtoReflect.Descriptor instead.
func (*BLEConfigAll) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{12}
}

func (x *BLEConfigAll) GetADVInterval() uint32 {
	if x != nil {
		return x.ADVInterval
	}
	return 0
}

func (x *BLEConfigAll) GetSleepClockAccuracy() uint32 {
	if x != nil {
		return x.SleepClockAccuracy
	}
	return 0
}

type BLEConfigCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BLEConfigCommandType BLEConfigCommandType_E `protobuf:"varint,1,opt,name=BLEConfigCommandType,proto3,enum=VCSEC.BLEConfigCommandType_E" json:"BLEConfigCommandType,omitempty"`
	BLEConfig            *BLEConfig             `protobuf:"bytes,2,opt,name=BLEConfig,proto3" json:"BLEConfig,omitempty"`
}

func (x *BLEConfigCommand) Reset() {
	*x = BLEConfigCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BLEConfigCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BLEConfigCommand) ProtoMessage() {}

func (x *BLEConfigCommand) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BLEConfigCommand.ProtoReflect.Descriptor instead.
func (*BLEConfigCommand) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{13}
}

func (x *BLEConfigCommand) GetBLEConfigCommandType() BLEConfigCommandType_E {
	if x != nil {
		return x.BLEConfigCommandType
	}
	return BLEConfigCommandType_E_BLE_CONFIG_COMMAND_TYPE_NONE
}

func (x *BLEConfigCommand) GetBLEConfig() *BLEConfig {
	if x != nil {
		return x.BLEConfig
	}
	return nil
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargePortOpen  bool `protobuf:"varint,1,opt,name=chargePortOpen,proto3" json:"chargePortOpen,omitempty"`
	ChargePortClose bool `protobuf:"varint,2,opt,name=chargePortClose,proto3" json:"chargePortClose,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{14}
}

func (x *Capabilities) GetChargePortOpen() bool {
	if x != nil {
		return x.ChargePortOpen
	}
	return false
}

func (x *Capabilities) GetChargePortClose() bool {
	if x != nil {
		return x.ChargePortClose
	}
	return false
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*Certificate_CertificateInParts
	SubMessage isCertificate_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{15}
}

func (m *Certificate) GetSubMessage() isCertificate_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *Certificate) GetCertificateInParts() *CertificateInParts {
	if x, ok := x.GetSubMessage().(*Certificate_CertificateInParts); ok {
		return x.CertificateInParts
	}
	return nil
}

type isCertificate_SubMessage interface {
	isCertificate_SubMessage()
}

type Certificate_CertificateInParts struct {
	CertificateInParts *CertificateInParts `protobuf:"bytes,1,opt,name=certificateInParts,proto3,oneof"`
}

func (*Certificate_CertificateInParts) isCertificate_SubMessage() {}

type CertificateInParts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartIndex      uint32 `protobuf:"varint,1,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	CertificateSize uint32 `protobuf:"varint,2,opt,name=certificateSize,proto3" json:"certificateSize,omitempty"`
	Data_           []byte `protobuf:"bytes,3,opt,name=data_,json=data,proto3" json:"data_,omitempty"`
}

func (x *CertificateInParts) Reset() {
	*x = CertificateInParts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateInParts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInParts) ProtoMessage() {}

func (x *CertificateInParts) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInParts.ProtoReflect.Descriptor instead.
func (*CertificateInParts) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{16}
}

func (x *CertificateInParts) GetStartIndex() uint32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *CertificateInParts) GetCertificateSize() uint32 {
	if x != nil {
		return x.CertificateSize
	}
	return 0
}

func (x *CertificateInParts) GetData_() []byte {
	if x != nil {
		return x.Data_
	}
	return nil
}

type CertificateRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadIndex    uint32 `protobuf:"varint,1,opt,name=readIndex,proto3" json:"readIndex,omitempty"`
	LengthToRead uint32 `protobuf:"varint,2,opt,name=lengthToRead,proto3" json:"lengthToRead,omitempty"`
}

func (x *CertificateRead) Reset() {
	*x = CertificateRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRead) ProtoMessage() {}

func (x *CertificateRead) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRead.ProtoReflect.Descriptor instead.
func (*CertificateRead) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{17}
}

func (x *CertificateRead) GetReadIndex() uint32 {
	if x != nil {
		return x.ReadIndex
	}
	return 0
}

func (x *CertificateRead) GetLengthToRead() uint32 {
	if x != nil {
		return x.LengthToRead
	}
	return 0
}

type CertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate       *Certificate        `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	CertificateStatus CertificateStatus_E `protobuf:"varint,2,opt,name=certificateStatus,proto3,enum=VCSEC.CertificateStatus_E" json:"certificateStatus,omitempty"`
}

func (x *CertificateResponse) Reset() {
	*x = CertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateResponse) ProtoMessage() {}

func (x *CertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateResponse.ProtoReflect.Descriptor instead.
func (*CertificateResponse) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{18}
}

func (x *CertificateResponse) GetCertificate() *Certificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *CertificateResponse) GetCertificateStatus() CertificateStatus_E {
	if x != nil {
		return x.CertificateStatus
	}
	return CertificateStatus_E_CERTIFICATE_STATUS_NONE
}

type ChallengeCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *ChallengeCommand) Reset() {
	*x = ChallengeCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeCommand) ProtoMessage() {}

func (x *ChallengeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeCommand.ProtoReflect.Descriptor instead.
func (*ChallengeCommand) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{19}
}

func (x *ChallengeCommand) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type ChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ChallengeResponse) Reset() {
	*x = ChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse) ProtoMessage() {}

func (x *ChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse.ProtoReflect.Descriptor instead.
func (*ChallengeResponse) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{20}
}

func (x *ChallengeResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CodeDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeDescriptorLocation UpdaterLocation `protobuf:"varint,1,opt,name=codeDescriptorLocation,proto3,enum=VCSEC.UpdaterLocation" json:"codeDescriptorLocation,omitempty"`
	Version                uint32          `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	CodeDescriptorBytes    []byte          `protobuf:"bytes,3,opt,name=codeDescriptorBytes,proto3" json:"codeDescriptorBytes,omitempty"`
}

func (x *CodeDescriptor) Reset() {
	*x = CodeDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeDescriptor) ProtoMessage() {}

func (x *CodeDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeDescriptor.ProtoReflect.Descriptor instead.
func (*CodeDescriptor) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{21}
}

func (x *CodeDescriptor) GetCodeDescriptorLocation() UpdaterLocation {
	if x != nil {
		return x.CodeDescriptorLocation
	}
	return UpdaterLocation_UPDATER_LOCATION_NONE
}

func (x *CodeDescriptor) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CodeDescriptor) GetCodeDescriptorBytes() []byte {
	if x != nil {
		return x.CodeDescriptorBytes
	}
	return nil
}

type ConnectionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodConnEventCount   uint32 `protobuf:"varint,1,opt,name=goodConnEventCount,proto3" json:"goodConnEventCount,omitempty"`
	MissedConnEventCount uint32 `protobuf:"varint,2,opt,name=missedConnEventCount,proto3" json:"missedConnEventCount,omitempty"`
	BadCRCConnEventCount uint32 `protobuf:"varint,3,opt,name=badCRCConnEventCount,proto3" json:"badCRCConnEventCount,omitempty"`
	OtherFailuresCount   uint32 `protobuf:"varint,4,opt,name=otherFailuresCount,proto3" json:"otherFailuresCount,omitempty"`
}

func (x *ConnectionMetrics) Reset() {
	*x = ConnectionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionMetrics) ProtoMessage() {}

func (x *ConnectionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionMetrics.ProtoReflect.Descriptor instead.
func (*ConnectionMetrics) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{22}
}

func (x *ConnectionMetrics) GetGoodConnEventCount() uint32 {
	if x != nil {
		return x.GoodConnEventCount
	}
	return 0
}

func (x *ConnectionMetrics) GetMissedConnEventCount() uint32 {
	if x != nil {
		return x.MissedConnEventCount
	}
	return 0
}

func (x *ConnectionMetrics) GetBadCRCConnEventCount() uint32 {
	if x != nil {
		return x.BadCRCConnEventCount
	}
	return 0
}

func (x *ConnectionMetrics) GetOtherFailuresCount() uint32 {
	if x != nil {
		return x.OtherFailuresCount
	}
	return 0
}

type DelaySleepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelayTimeMs uint32 `protobuf:"varint,1,opt,name=delayTime_ms,json=delayTimeMs,proto3" json:"delayTime_ms,omitempty"`
}

func (x *DelaySleepRequest) Reset() {
	*x = DelaySleepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelaySleepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelaySleepRequest) ProtoMessage() {}

func (x *DelaySleepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelaySleepRequest.ProtoReflect.Descriptor instead.
func (*DelaySleepRequest) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{23}
}

func (x *DelaySleepRequest) GetDelayTimeMs() uint32 {
	if x != nil {
		return x.DelayTimeMs
	}
	return 0
}

type DeviceMotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States     []Device_Motion_State    `protobuf:"varint,1,rep,packed,name=states,proto3,enum=VCSEC.Device_Motion_State" json:"states,omitempty"`
	Confidence Device_Motion_Confidence `protobuf:"varint,2,opt,name=confidence,proto3,enum=VCSEC.Device_Motion_Confidence" json:"confidence,omitempty"`
}

func (x *DeviceMotion) Reset() {
	*x = DeviceMotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMotion) ProtoMessage() {}

func (x *DeviceMotion) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMotion.ProtoReflect.Descriptor instead.
func (*DeviceMotion) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{24}
}

func (x *DeviceMotion) GetStates() []Device_Motion_State {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *DeviceMotion) GetConfidence() Device_Motion_Confidence {
	if x != nil {
		return x.Confidence
	}
	return Device_Motion_Confidence_DEVICE_MOTION_CONFIDENCE_UNKNOWN
}

type FromRCI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []byte `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FromRCI) Reset() {
	*x = FromRCI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromRCI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromRCI) ProtoMessage() {}

func (x *FromRCI) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromRCI.ProtoReflect.Descriptor instead.
func (*FromRCI) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{25}
}

func (x *FromRCI) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

type Genealogy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber []byte `protobuf:"bytes,1,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	PartNumber   []byte `protobuf:"bytes,2,opt,name=partNumber,proto3" json:"partNumber,omitempty"`
}

func (x *Genealogy) Reset() {
	*x = Genealogy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Genealogy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Genealogy) ProtoMessage() {}

func (x *Genealogy) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Genealogy.ProtoReflect.Descriptor instead.
func (*Genealogy) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{26}
}

func (x *Genealogy) GetSerialNumber() []byte {
	if x != nil {
		return x.SerialNumber
	}
	return nil
}

func (x *Genealogy) GetPartNumber() []byte {
	if x != nil {
		return x.PartNumber
	}
	return nil
}

type GenealogyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGenealogy *Genealogy        `protobuf:"bytes,1,opt,name=currentGenealogy,proto3" json:"currentGenealogy,omitempty"`
	Status           GenealogyStatus_E `protobuf:"varint,2,opt,name=status,proto3,enum=VCSEC.GenealogyStatus_E" json:"status,omitempty"`
}

func (x *GenealogyResponse) Reset() {
	*x = GenealogyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenealogyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenealogyResponse) ProtoMessage() {}

func (x *GenealogyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenealogyResponse.ProtoReflect.Descriptor instead.
func (*GenealogyResponse) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{27}
}

func (x *GenealogyResponse) GetCurrentGenealogy() *Genealogy {
	if x != nil {
		return x.CurrentGenealogy
	}
	return nil
}

func (x *GenealogyResponse) GetStatus() GenealogyStatus_E {
	if x != nil {
		return x.Status
	}
	return GenealogyStatus_E_GENEALOGY_STATUS_NONE
}

type GetCodeDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location UpdaterLocation `protobuf:"varint,1,opt,name=location,proto3,enum=VCSEC.UpdaterLocation" json:"location,omitempty"`
}

func (x *GetCodeDescriptor) Reset() {
	*x = GetCodeDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeDescriptor) ProtoMessage() {}

func (x *GetCodeDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeDescriptor.ProtoReflect.Descriptor instead.
func (*GetCodeDescriptor) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{28}
}

func (x *GetCodeDescriptor) GetLocation() UpdaterLocation {
	if x != nil {
		return x.Location
	}
	return UpdaterLocation_UPDATER_LOCATION_NONE
}

type GetReaderKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command GetReaderKeyCommand `protobuf:"varint,1,opt,name=command,proto3,enum=VCSEC.GetReaderKeyCommand" json:"command,omitempty"`
}

func (x *GetReaderKey) Reset() {
	*x = GetReaderKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReaderKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReaderKey) ProtoMessage() {}

func (x *GetReaderKey) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReaderKey.ProtoReflect.Descriptor instead.
func (*GetReaderKey) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{29}
}

func (x *GetReaderKey) GetCommand() GetReaderKeyCommand {
	if x != nil {
		return x.Command
	}
	return GetReaderKeyCommand_GET_READER_KEY_COMMAND_UNKNOWN
}

type HandlePulledWithoutAuthDeviceSpecificPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyChannel                   uint32                `protobuf:"varint,1,opt,name=keyChannel,proto3" json:"keyChannel,omitempty"`
	AuthenticationLevel          AuthenticationLevel_E `protobuf:"varint,2,opt,name=authenticationLevel,proto3,enum=VCSEC.AuthenticationLevel_E" json:"authenticationLevel,omitempty"`
	Present                      bool                  `protobuf:"varint,3,opt,name=present,proto3" json:"present,omitempty"`
	RSSILeft                     int32                 `protobuf:"zigzag32,4,opt,name=RSSILeft,proto3" json:"RSSILeft,omitempty"`
	RSSIRight                    int32                 `protobuf:"zigzag32,5,opt,name=RSSIRight,proto3" json:"RSSIRight,omitempty"`
	RSSIRear                     int32                 `protobuf:"zigzag32,6,opt,name=RSSIRear,proto3" json:"RSSIRear,omitempty"`
	RSSICenter                   int32                 `protobuf:"zigzag32,7,opt,name=RSSICenter,proto3" json:"RSSICenter,omitempty"`
	RSSIFront                    int32                 `protobuf:"zigzag32,8,opt,name=RSSIFront,proto3" json:"RSSIFront,omitempty"`
	RSSISecondary                int32                 `protobuf:"zigzag32,9,opt,name=RSSISecondary,proto3" json:"RSSISecondary,omitempty"`
	RSSINFCCradle                int32                 `protobuf:"zigzag32,10,opt,name=RSSINFCCradle,proto3" json:"RSSINFCCradle,omitempty"`
	RSSIRearLeft                 int32                 `protobuf:"zigzag32,11,opt,name=RSSIRearLeft,proto3" json:"RSSIRearLeft,omitempty"`
	RSSIRearRight                int32                 `protobuf:"zigzag32,12,opt,name=RSSIRearRight,proto3" json:"RSSIRearRight,omitempty"`
	HighThreshLeftPresent        bool                  `protobuf:"varint,13,opt,name=highThreshLeftPresent,proto3" json:"highThreshLeftPresent,omitempty"`
	HighThreshRightPresent       bool                  `protobuf:"varint,14,opt,name=highThreshRightPresent,proto3" json:"highThreshRightPresent,omitempty"`
	HighThreshCenterPresent      bool                  `protobuf:"varint,15,opt,name=highThreshCenterPresent,proto3" json:"highThreshCenterPresent,omitempty"`
	HighThreshFrontPresent       bool                  `protobuf:"varint,16,opt,name=highThreshFrontPresent,proto3" json:"highThreshFrontPresent,omitempty"`
	HighThreshRearPresent        bool                  `protobuf:"varint,17,opt,name=highThreshRearPresent,proto3" json:"highThreshRearPresent,omitempty"`
	HighThreshRearLeftPresent    bool                  `protobuf:"varint,18,opt,name=highThreshRearLeftPresent,proto3" json:"highThreshRearLeftPresent,omitempty"`
	HighThreshRearRightPresent   bool                  `protobuf:"varint,19,opt,name=highThreshRearRightPresent,proto3" json:"highThreshRearRightPresent,omitempty"`
	HighThreshSecondaryPresent   bool                  `protobuf:"varint,20,opt,name=highThreshSecondaryPresent,proto3" json:"highThreshSecondaryPresent,omitempty"`
	HighThreshNFCPresent         bool                  `protobuf:"varint,21,opt,name=highThreshNFCPresent,proto3" json:"highThreshNFCPresent,omitempty"`
	SortedDeltaBayesLeftPresent  bool                  `protobuf:"varint,22,opt,name=sortedDeltaBayesLeftPresent,proto3" json:"sortedDeltaBayesLeftPresent,omitempty"`
	SortedDeltaBayesRightPresent bool                  `protobuf:"varint,23,opt,name=sortedDeltaBayesRightPresent,proto3" json:"sortedDeltaBayesRightPresent,omitempty"`
	RawDeltaBayesLeftPresent     bool                  `protobuf:"varint,24,opt,name=rawDeltaBayesLeftPresent,proto3" json:"rawDeltaBayesLeftPresent,omitempty"`
	RawDeltaBayesRightPresent    bool                  `protobuf:"varint,25,opt,name=rawDeltaBayesRightPresent,proto3" json:"rawDeltaBayesRightPresent,omitempty"`
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) Reset() {
	*x = HandlePulledWithoutAuthDeviceSpecificPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlePulledWithoutAuthDeviceSpecificPayload) ProtoMessage() {}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlePulledWithoutAuthDeviceSpecificPayload.ProtoReflect.Descriptor instead.
func (*HandlePulledWithoutAuthDeviceSpecificPayload) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{30}
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetKeyChannel() uint32 {
	if x != nil {
		return x.KeyChannel
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetAuthenticationLevel() AuthenticationLevel_E {
	if x != nil {
		return x.AuthenticationLevel
	}
	return AuthenticationLevel_E_AUTHENTICATION_LEVEL_NONE
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetPresent() bool {
	if x != nil {
		return x.Present
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSILeft() int32 {
	if x != nil {
		return x.RSSILeft
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSIRight() int32 {
	if x != nil {
		return x.RSSIRight
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSIRear() int32 {
	if x != nil {
		return x.RSSIRear
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSICenter() int32 {
	if x != nil {
		return x.RSSICenter
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSIFront() int32 {
	if x != nil {
		return x.RSSIFront
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSISecondary() int32 {
	if x != nil {
		return x.RSSISecondary
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSINFCCradle() int32 {
	if x != nil {
		return x.RSSINFCCradle
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSIRearLeft() int32 {
	if x != nil {
		return x.RSSIRearLeft
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRSSIRearRight() int32 {
	if x != nil {
		return x.RSSIRearRight
	}
	return 0
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshLeftPresent() bool {
	if x != nil {
		return x.HighThreshLeftPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshRightPresent() bool {
	if x != nil {
		return x.HighThreshRightPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshCenterPresent() bool {
	if x != nil {
		return x.HighThreshCenterPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshFrontPresent() bool {
	if x != nil {
		return x.HighThreshFrontPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshRearPresent() bool {
	if x != nil {
		return x.HighThreshRearPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshRearLeftPresent() bool {
	if x != nil {
		return x.HighThreshRearLeftPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshRearRightPresent() bool {
	if x != nil {
		return x.HighThreshRearRightPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshSecondaryPresent() bool {
	if x != nil {
		return x.HighThreshSecondaryPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetHighThreshNFCPresent() bool {
	if x != nil {
		return x.HighThreshNFCPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetSortedDeltaBayesLeftPresent() bool {
	if x != nil {
		return x.SortedDeltaBayesLeftPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetSortedDeltaBayesRightPresent() bool {
	if x != nil {
		return x.SortedDeltaBayesRightPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRawDeltaBayesLeftPresent() bool {
	if x != nil {
		return x.RawDeltaBayesLeftPresent
	}
	return false
}

func (x *HandlePulledWithoutAuthDeviceSpecificPayload) GetRawDeltaBayesRightPresent() bool {
	if x != nil {
		return x.RawDeltaBayesRightPresent
	}
	return false
}

type KeyfobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppCRC              []byte `protobuf:"bytes,1,opt,name=appCRC,proto3" json:"appCRC,omitempty"`
	BatteryVoltageMV    uint32 `protobuf:"varint,2,opt,name=batteryVoltage_mV,json=batteryVoltageMV,proto3" json:"batteryVoltage_mV,omitempty"`
	TemperatureDegreesC int32  `protobuf:"varint,3,opt,name=temperature_degreesC,json=temperatureDegreesC,proto3" json:"temperature_degreesC,omitempty"`
}

func (x *KeyfobInfo) Reset() {
	*x = KeyfobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyfobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyfobInfo) ProtoMessage() {}

func (x *KeyfobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyfobInfo.ProtoReflect.Descriptor instead.
func (*KeyfobInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{31}
}

func (x *KeyfobInfo) GetAppCRC() []byte {
	if x != nil {
		return x.AppCRC
	}
	return nil
}

func (x *KeyfobInfo) GetBatteryVoltageMV() uint32 {
	if x != nil {
		return x.BatteryVoltageMV
	}
	return 0
}

func (x *KeyfobInfo) GetTemperatureDegreesC() int32 {
	if x != nil {
		return x.TemperatureDegreesC
	}
	return 0
}

type KeyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId         *KeyIdentifier `protobuf:"bytes,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	NfcPresence   NFCPresence    `protobuf:"varint,2,opt,name=nfcPresence,proto3,enum=VCSEC.NFCPresence" json:"nfcPresence,omitempty"`
	BlePresence   BLEPresence    `protobuf:"varint,3,opt,name=blePresence,proto3,enum=VCSEC.BLEPresence" json:"blePresence,omitempty"`
	PublicKey     *PublicKey     `protobuf:"bytes,4,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	KeyFormFactor KeyFormFactor  `protobuf:"varint,5,opt,name=keyFormFactor,proto3,enum=VCSEC.KeyFormFactor" json:"keyFormFactor,omitempty"`
	Slot          uint32         `protobuf:"varint,6,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *KeyStatus) Reset() {
	*x = KeyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyStatus) ProtoMessage() {}

func (x *KeyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyStatus.ProtoReflect.Descriptor instead.
func (*KeyStatus) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{32}
}

func (x *KeyStatus) GetKeyId() *KeyIdentifier {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *KeyStatus) GetNfcPresence() NFCPresence {
	if x != nil {
		return x.NfcPresence
	}
	return NFCPresence_NFC_PRESENCE_NOT_PRESENT
}

func (x *KeyStatus) GetBlePresence() BLEPresence {
	if x != nil {
		return x.BlePresence
	}
	return BLEPresence_BLE_PRESENCE_NOT_PRESENT
}

func (x *KeyStatus) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *KeyStatus) GetKeyFormFactor() KeyFormFactor {
	if x != nil {
		return x.KeyFormFactor
	}
	return KeyFormFactor_KEY_FORM_FACTOR_UNKNOWN
}

func (x *KeyStatus) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type KeyStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyStatuses []*KeyStatus `protobuf:"bytes,1,rep,name=keyStatuses,proto3" json:"keyStatuses,omitempty"`
}

func (x *KeyStatusInfo) Reset() {
	*x = KeyStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyStatusInfo) ProtoMessage() {}

func (x *KeyStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyStatusInfo.ProtoReflect.Descriptor instead.
func (*KeyStatusInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{33}
}

func (x *KeyStatusInfo) GetKeyStatuses() []*KeyStatus {
	if x != nil {
		return x.KeyStatuses
	}
	return nil
}

type MIConfigurationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data_ []byte `protobuf:"bytes,1,opt,name=data_,json=data,proto3" json:"data_,omitempty"`
}

func (x *MIConfigurationData) Reset() {
	*x = MIConfigurationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MIConfigurationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MIConfigurationData) ProtoMessage() {}

func (x *MIConfigurationData) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MIConfigurationData.ProtoReflect.Descriptor instead.
func (*MIConfigurationData) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{34}
}

func (x *MIConfigurationData) GetData_() []byte {
	if x != nil {
		return x.Data_
	}
	return nil
}

type MISessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId                  uint32 `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	AccessoryConfigurationData []byte `protobuf:"bytes,2,opt,name=accessoryConfigurationData,proto3" json:"accessoryConfigurationData,omitempty"`
}

func (x *MISessionRequest) Reset() {
	*x = MISessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MISessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MISessionRequest) ProtoMessage() {}

func (x *MISessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MISessionRequest.ProtoReflect.Descriptor instead.
func (*MISessionRequest) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{35}
}

func (x *MISessionRequest) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *MISessionRequest) GetAccessoryConfigurationData() []byte {
	if x != nil {
		return x.AccessoryConfigurationData
	}
	return nil
}

type MISessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId uint32 `protobuf:"varint,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// Types that are assignable to SubMessage:
	//
	//	*MISessionResponse_MIConfigurationData
	//	*MISessionResponse_ErrorCode
	SubMessage isMISessionResponse_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *MISessionResponse) Reset() {
	*x = MISessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MISessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MISessionResponse) ProtoMessage() {}

func (x *MISessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MISessionResponse.ProtoReflect.Descriptor instead.
func (*MISessionResponse) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{36}
}

func (x *MISessionResponse) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (m *MISessionResponse) GetSubMessage() isMISessionResponse_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *MISessionResponse) GetMIConfigurationData() *MIConfigurationData {
	if x, ok := x.GetSubMessage().(*MISessionResponse_MIConfigurationData); ok {
		return x.MIConfigurationData
	}
	return nil
}

func (x *MISessionResponse) GetErrorCode() MIError_E {
	if x, ok := x.GetSubMessage().(*MISessionResponse_ErrorCode); ok {
		return x.ErrorCode
	}
	return MIError_E_ERROR_UNKNOWN
}

type isMISessionResponse_SubMessage interface {
	isMISessionResponse_SubMessage()
}

type MISessionResponse_MIConfigurationData struct {
	MIConfigurationData *MIConfigurationData `protobuf:"bytes,2,opt,name=MIConfigurationData,proto3,oneof"`
}

type MISessionResponse_ErrorCode struct {
	ErrorCode MIError_E `protobuf:"varint,3,opt,name=errorCode,proto3,enum=VCSEC.MIError_E,oneof"`
}

func (*MISessionResponse_MIConfigurationData) isMISessionResponse_SubMessage() {}

func (*MISessionResponse_ErrorCode) isMISessionResponse_SubMessage() {}

type MISessionStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*MISessionStop_SessionId
	SubMessage isMISessionStop_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *MISessionStop) Reset() {
	*x = MISessionStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MISessionStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MISessionStop) ProtoMessage() {}

func (x *MISessionStop) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MISessionStop.ProtoReflect.Descriptor instead.
func (*MISessionStop) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{37}
}

func (m *MISessionStop) GetSubMessage() isMISessionStop_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *MISessionStop) GetSessionId() uint32 {
	if x, ok := x.GetSubMessage().(*MISessionStop_SessionId); ok {
		return x.SessionId
	}
	return 0
}

type isMISessionStop_SubMessage interface {
	isMISessionStop_SubMessage()
}

type MISessionStop_SessionId struct {
	SessionId uint32 `protobuf:"varint,1,opt,name=sessionId,proto3,oneof"`
}

func (*MISessionStop_SessionId) isMISessionStop_SubMessage() {}

type MISessionStopped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*MISessionStopped_SessionId
	SubMessage isMISessionStopped_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *MISessionStopped) Reset() {
	*x = MISessionStopped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MISessionStopped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MISessionStopped) ProtoMessage() {}

func (x *MISessionStopped) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MISessionStopped.ProtoReflect.Descriptor instead.
func (*MISessionStopped) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{38}
}

func (m *MISessionStopped) GetSubMessage() isMISessionStopped_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *MISessionStopped) GetSessionId() uint32 {
	if x, ok := x.GetSubMessage().(*MISessionStopped_SessionId); ok {
		return x.SessionId
	}
	return 0
}

type isMISessionStopped_SubMessage interface {
	isMISessionStopped_SubMessage()
}

type MISessionStopped_SessionId struct {
	SessionId uint32 `protobuf:"varint,1,opt,name=sessionId,proto3,oneof"`
}

func (*MISessionStopped_SessionId) isMISessionStopped_SubMessage() {}

type NFCSEState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePubKeyState    NFCSEDevicePubKeyState_E    `protobuf:"varint,1,opt,name=devicePubKeyState,proto3,enum=VCSEC.NFCSEDevicePubKeyState_E" json:"devicePubKeyState,omitempty"`
	VehiclePubKeyState   NFCSEVehiclePubKeyState_E   `protobuf:"varint,2,opt,name=vehiclePubKeyState,proto3,enum=VCSEC.NFCSEVehiclePubKeyState_E" json:"vehiclePubKeyState,omitempty"`
	SharedSecretState    NFCSESharedSecretState_E    `protobuf:"varint,3,opt,name=sharedSecretState,proto3,enum=VCSEC.NFCSESharedSecretState_E" json:"sharedSecretState,omitempty"`
	InsecureCommandState NFCSEInsecureCommandState_E `protobuf:"varint,4,opt,name=insecureCommandState,proto3,enum=VCSEC.NFCSEInsecureCommandState_E" json:"insecureCommandState,omitempty"`
	VehiclePubKey        *PublicKey                  `protobuf:"bytes,5,opt,name=vehiclePubKey,proto3" json:"vehiclePubKey,omitempty"`
}

func (x *NFCSEState) Reset() {
	*x = NFCSEState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NFCSEState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NFCSEState) ProtoMessage() {}

func (x *NFCSEState) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NFCSEState.ProtoReflect.Descriptor instead.
func (*NFCSEState) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{39}
}

func (x *NFCSEState) GetDevicePubKeyState() NFCSEDevicePubKeyState_E {
	if x != nil {
		return x.DevicePubKeyState
	}
	return NFCSEDevicePubKeyState_E_NFCSEC_DEVICEPUBKEY_STATE_NONE
}

func (x *NFCSEState) GetVehiclePubKeyState() NFCSEVehiclePubKeyState_E {
	if x != nil {
		return x.VehiclePubKeyState
	}
	return NFCSEVehiclePubKeyState_E_NFCSEC_VEHICLEPUBKEY_STATE_NONE
}

func (x *NFCSEState) GetSharedSecretState() NFCSESharedSecretState_E {
	if x != nil {
		return x.SharedSecretState
	}
	return NFCSESharedSecretState_E_NFCSEC_SHAREDSECRET_STATE_NONE
}

func (x *NFCSEState) GetInsecureCommandState() NFCSEInsecureCommandState_E {
	if x != nil {
		return x.InsecureCommandState
	}
	return NFCSEInsecureCommandState_E_NFCSEC_INSECURE_COMMAND_STATE_NONE
}

func (x *NFCSEState) GetVehiclePubKey() *PublicKey {
	if x != nil {
		return x.VehiclePubKey
	}
	return nil
}

type PersonalizationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VIN []byte `protobuf:"bytes,1,opt,name=VIN,proto3" json:"VIN,omitempty"`
}

func (x *PersonalizationInformation) Reset() {
	*x = PersonalizationInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalizationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalizationInformation) ProtoMessage() {}

func (x *PersonalizationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalizationInformation.ProtoReflect.Descriptor instead.
func (*PersonalizationInformation) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{40}
}

func (x *PersonalizationInformation) GetVIN() []byte {
	if x != nil {
		return x.VIN
	}
	return nil
}

type PhoneVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsVersionMajor  uint32 `protobuf:"varint,1,opt,name=os_version_major,json=osVersionMajor,proto3" json:"os_version_major,omitempty"`
	OsVersionMinor  uint32 `protobuf:"varint,2,opt,name=os_version_minor,json=osVersionMinor,proto3" json:"os_version_minor,omitempty"`
	OsVersionPatch  uint32 `protobuf:"varint,3,opt,name=os_version_patch,json=osVersionPatch,proto3" json:"os_version_patch,omitempty"`
	AppVersionMajor uint32 `protobuf:"varint,4,opt,name=app_version_major,json=appVersionMajor,proto3" json:"app_version_major,omitempty"`
	AppVersionMinor uint32 `protobuf:"varint,5,opt,name=app_version_minor,json=appVersionMinor,proto3" json:"app_version_minor,omitempty"`
	AppVersionPatch uint32 `protobuf:"varint,6,opt,name=app_version_patch,json=appVersionPatch,proto3" json:"app_version_patch,omitempty"`
}

func (x *PhoneVersionInfo) Reset() {
	*x = PhoneVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneVersionInfo) ProtoMessage() {}

func (x *PhoneVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneVersionInfo.ProtoReflect.Descriptor instead.
func (*PhoneVersionInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{41}
}

func (x *PhoneVersionInfo) GetOsVersionMajor() uint32 {
	if x != nil {
		return x.OsVersionMajor
	}
	return 0
}

func (x *PhoneVersionInfo) GetOsVersionMinor() uint32 {
	if x != nil {
		return x.OsVersionMinor
	}
	return 0
}

func (x *PhoneVersionInfo) GetOsVersionPatch() uint32 {
	if x != nil {
		return x.OsVersionPatch
	}
	return 0
}

func (x *PhoneVersionInfo) GetAppVersionMajor() uint32 {
	if x != nil {
		return x.AppVersionMajor
	}
	return 0
}

func (x *PhoneVersionInfo) GetAppVersionMinor() uint32 {
	if x != nil {
		return x.AppVersionMinor
	}
	return 0
}

func (x *PhoneVersionInfo) GetAppVersionPatch() uint32 {
	if x != nil {
		return x.AppVersionPatch
	}
	return 0
}

type PublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey       *PublicKey        `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	PublicKeyStatus PublicKeyStatus_E `protobuf:"varint,2,opt,name=publicKeyStatus,proto3,enum=VCSEC.PublicKeyStatus_E" json:"publicKeyStatus,omitempty"`
}

func (x *PublicKeyResponse) Reset() {
	*x = PublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyResponse) ProtoMessage() {}

func (x *PublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyResponse.ProtoReflect.Descriptor instead.
func (*PublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{42}
}

func (x *PublicKeyResponse) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PublicKeyResponse) GetPublicKeyStatus() PublicKeyStatus_E {
	if x != nil {
		return x.PublicKeyStatus
	}
	return PublicKeyStatus_E_PUBLIC_KEY_STATUS_NONE
}

type RCISignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Tag   []byte `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *RCISignature) Reset() {
	*x = RCISignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCISignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCISignature) ProtoMessage() {}

func (x *RCISignature) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCISignature.ProtoReflect.Descriptor instead.
func (*RCISignature) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{43}
}

func (x *RCISignature) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *RCISignature) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

type ResetTrackerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalResetsDueToPowerOn            uint32 `protobuf:"varint,1,opt,name=totalResetsDueToPowerOn,proto3" json:"totalResetsDueToPowerOn,omitempty"`
	TotalResetsDueToPinReset           uint32 `protobuf:"varint,2,opt,name=totalResetsDueToPinReset,proto3" json:"totalResetsDueToPinReset,omitempty"`
	TotalResetsDueToVDDSLoss           uint32 `protobuf:"varint,3,opt,name=totalResetsDueToVDDSLoss,proto3" json:"totalResetsDueToVDDSLoss,omitempty"`
	TotalResetsDueToVDDLoss            uint32 `protobuf:"varint,4,opt,name=totalResetsDueToVDDLoss,proto3" json:"totalResetsDueToVDDLoss,omitempty"`
	TotalResetsDueToVDDRLoss           uint32 `protobuf:"varint,5,opt,name=totalResetsDueToVDDRLoss,proto3" json:"totalResetsDueToVDDRLoss,omitempty"`
	TotalResetsDueToClockLoss          uint32 `protobuf:"varint,6,opt,name=totalResetsDueToClockLoss,proto3" json:"totalResetsDueToClockLoss,omitempty"`
	TotalResetsDueToSystemReset        uint32 `protobuf:"varint,7,opt,name=totalResetsDueToSystemReset,proto3" json:"totalResetsDueToSystemReset,omitempty"`
	TotalResetsDueToWarmReset          uint32 `protobuf:"varint,8,opt,name=totalResetsDueToWarmReset,proto3" json:"totalResetsDueToWarmReset,omitempty"`
	TotalResetsDueToWakeupFromShutdown uint32 `protobuf:"varint,9,opt,name=totalResetsDueToWakeupFromShutdown,proto3" json:"totalResetsDueToWakeupFromShutdown,omitempty"`
	TotalResetsDueToWakeupFromTCKNoise uint32 `protobuf:"varint,10,opt,name=totalResetsDueToWakeupFromTCKNoise,proto3" json:"totalResetsDueToWakeupFromTCKNoise,omitempty"`
}

func (x *ResetTrackerStats) Reset() {
	*x = ResetTrackerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetTrackerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetTrackerStats) ProtoMessage() {}

func (x *ResetTrackerStats) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetTrackerStats.ProtoReflect.Descriptor instead.
func (*ResetTrackerStats) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{44}
}

func (x *ResetTrackerStats) GetTotalResetsDueToPowerOn() uint32 {
	if x != nil {
		return x.TotalResetsDueToPowerOn
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToPinReset() uint32 {
	if x != nil {
		return x.TotalResetsDueToPinReset
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToVDDSLoss() uint32 {
	if x != nil {
		return x.TotalResetsDueToVDDSLoss
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToVDDLoss() uint32 {
	if x != nil {
		return x.TotalResetsDueToVDDLoss
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToVDDRLoss() uint32 {
	if x != nil {
		return x.TotalResetsDueToVDDRLoss
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToClockLoss() uint32 {
	if x != nil {
		return x.TotalResetsDueToClockLoss
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToSystemReset() uint32 {
	if x != nil {
		return x.TotalResetsDueToSystemReset
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToWarmReset() uint32 {
	if x != nil {
		return x.TotalResetsDueToWarmReset
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToWakeupFromShutdown() uint32 {
	if x != nil {
		return x.TotalResetsDueToWakeupFromShutdown
	}
	return 0
}

func (x *ResetTrackerStats) GetTotalResetsDueToWakeupFromTCKNoise() uint32 {
	if x != nil {
		return x.TotalResetsDueToWakeupFromTCKNoise
	}
	return 0
}

type RFMonitorCounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RFInterruptCounter uint32 `protobuf:"varint,1,opt,name=RFInterruptCounter,proto3" json:"RFInterruptCounter,omitempty"`
	AdvCompleteCounter uint32 `protobuf:"varint,2,opt,name=advCompleteCounter,proto3" json:"advCompleteCounter,omitempty"`
}

func (x *RFMonitorCounterResponse) Reset() {
	*x = RFMonitorCounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RFMonitorCounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFMonitorCounterResponse) ProtoMessage() {}

func (x *RFMonitorCounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFMonitorCounterResponse.ProtoReflect.Descriptor instead.
func (*RFMonitorCounterResponse) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{45}
}

func (x *RFMonitorCounterResponse) GetRFInterruptCounter() uint32 {
	if x != nil {
		return x.RFInterruptCounter
	}
	return 0
}

func (x *RFMonitorCounterResponse) GetAdvCompleteCounter() uint32 {
	if x != nil {
		return x.AdvCompleteCounter
	}
	return 0
}

type SetTPConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config          *TPConfiguration `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	PermanentConfig bool             `protobuf:"varint,2,opt,name=permanentConfig,proto3" json:"permanentConfig,omitempty"`
}

func (x *SetTPConfiguration) Reset() {
	*x = SetTPConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTPConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTPConfiguration) ProtoMessage() {}

func (x *SetTPConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTPConfiguration.ProtoReflect.Descriptor instead.
func (*SetTPConfiguration) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{46}
}

func (x *SetTPConfiguration) GetConfig() *TPConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SetTPConfiguration) GetPermanentConfig() bool {
	if x != nil {
		return x.PermanentConfig
	}
	return false
}

type SetUpdaterLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdaterLocation UpdaterLocation `protobuf:"varint,1,opt,name=updaterLocation,proto3,enum=VCSEC.UpdaterLocation" json:"updaterLocation,omitempty"`
}

func (x *SetUpdaterLocation) Reset() {
	*x = SetUpdaterLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUpdaterLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUpdaterLocation) ProtoMessage() {}

func (x *SetUpdaterLocation) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUpdaterLocation.ProtoReflect.Descriptor instead.
func (*SetUpdaterLocation) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{47}
}

func (x *SetUpdaterLocation) GetUpdaterLocation() UpdaterLocation {
	if x != nil {
		return x.UpdaterLocation
	}
	return UpdaterLocation_UPDATER_LOCATION_NONE
}

type SleepManagerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*SleepManagerRequest_DelaySleepRequest
	//	*SleepManagerRequest_SleepManagerCommand
	SubMessage isSleepManagerRequest_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *SleepManagerRequest) Reset() {
	*x = SleepManagerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepManagerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepManagerRequest) ProtoMessage() {}

func (x *SleepManagerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepManagerRequest.ProtoReflect.Descriptor instead.
func (*SleepManagerRequest) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{48}
}

func (m *SleepManagerRequest) GetSubMessage() isSleepManagerRequest_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *SleepManagerRequest) GetDelaySleepRequest() *DelaySleepRequest {
	if x, ok := x.GetSubMessage().(*SleepManagerRequest_DelaySleepRequest); ok {
		return x.DelaySleepRequest
	}
	return nil
}

func (x *SleepManagerRequest) GetSleepManagerCommand() SleepManagerCommand_E {
	if x, ok := x.GetSubMessage().(*SleepManagerRequest_SleepManagerCommand); ok {
		return x.SleepManagerCommand
	}
	return SleepManagerCommand_E_SLEEPMANAGER_COMMAND_NONE
}

type isSleepManagerRequest_SubMessage interface {
	isSleepManagerRequest_SubMessage()
}

type SleepManagerRequest_DelaySleepRequest struct {
	DelaySleepRequest *DelaySleepRequest `protobuf:"bytes,1,opt,name=delaySleepRequest,proto3,oneof"`
}

type SleepManagerRequest_SleepManagerCommand struct {
	SleepManagerCommand SleepManagerCommand_E `protobuf:"varint,2,opt,name=sleepManagerCommand,proto3,enum=VCSEC.SleepManagerCommand_E,oneof"`
}

func (*SleepManagerRequest_DelaySleepRequest) isSleepManagerRequest_SubMessage() {}

func (*SleepManagerRequest_SleepManagerCommand) isSleepManagerRequest_SubMessage() {}

type SleepManagerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCPUTime     uint32                     `protobuf:"varint,1,opt,name=totalCPUTime,proto3" json:"totalCPUTime,omitempty"`
	TotalAwakeTime   uint32                     `protobuf:"varint,2,opt,name=totalAwakeTime,proto3" json:"totalAwakeTime,omitempty"`
	IsBLETrimApplied BLEAdditionalTRIMApplied_E `protobuf:"varint,3,opt,name=isBLETrimApplied,proto3,enum=VCSEC.BLEAdditionalTRIMApplied_E" json:"isBLETrimApplied,omitempty"`
}

func (x *SleepManagerStats) Reset() {
	*x = SleepManagerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepManagerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepManagerStats) ProtoMessage() {}

func (x *SleepManagerStats) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepManagerStats.ProtoReflect.Descriptor instead.
func (*SleepManagerStats) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{49}
}

func (x *SleepManagerStats) GetTotalCPUTime() uint32 {
	if x != nil {
		return x.TotalCPUTime
	}
	return 0
}

func (x *SleepManagerStats) GetTotalAwakeTime() uint32 {
	if x != nil {
		return x.TotalAwakeTime
	}
	return 0
}

func (x *SleepManagerStats) GetIsBLETrimApplied() BLEAdditionalTRIMApplied_E {
	if x != nil {
		return x.IsBLETrimApplied
	}
	return BLEAdditionalTRIMApplied_E_BLE_ADDITIONAL_TRIM_APPLIED_NONE
}

type StageBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockAddress uint32 `protobuf:"varint,1,opt,name=blockAddress,proto3" json:"blockAddress,omitempty"`
	BlockToStage []byte `protobuf:"bytes,2,opt,name=blockToStage,proto3" json:"blockToStage,omitempty"`
}

func (x *StageBlock) Reset() {
	*x = StageBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageBlock) ProtoMessage() {}

func (x *StageBlock) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageBlock.ProtoReflect.Descriptor instead.
func (*StageBlock) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{50}
}

func (x *StageBlock) GetBlockAddress() uint32 {
	if x != nil {
		return x.BlockAddress
	}
	return 0
}

func (x *StageBlock) GetBlockToStage() []byte {
	if x != nil {
		return x.BlockToStage
	}
	return nil
}

type ToRCI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []byte `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Types that are assignable to SubMessage:
	//
	//	*ToRCI_HMACSignature
	//	*ToRCI_RciSignature
	SubMessage isToRCI_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *ToRCI) Reset() {
	*x = ToRCI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToRCI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToRCI) ProtoMessage() {}

func (x *ToRCI) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToRCI.ProtoReflect.Descriptor instead.
func (*ToRCI) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{51}
}

func (x *ToRCI) GetCommand() []byte {
	if x != nil {
		return x.Command
	}
	return nil
}

func (m *ToRCI) GetSubMessage() isToRCI_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *ToRCI) GetHMACSignature() []byte {
	if x, ok := x.GetSubMessage().(*ToRCI_HMACSignature); ok {
		return x.HMACSignature
	}
	return nil
}

func (x *ToRCI) GetRciSignature() *RCISignature {
	if x, ok := x.GetSubMessage().(*ToRCI_RciSignature); ok {
		return x.RciSignature
	}
	return nil
}

type isToRCI_SubMessage interface {
	isToRCI_SubMessage()
}

type ToRCI_HMACSignature struct {
	HMACSignature []byte `protobuf:"bytes,2,opt,name=HMAC_signature,json=HMACSignature,proto3,oneof"`
}

type ToRCI_RciSignature struct {
	RciSignature *RCISignature `protobuf:"bytes,3,opt,name=rci_signature,json=rciSignature,proto3,oneof"`
}

func (*ToRCI_HMACSignature) isToRCI_SubMessage() {}

func (*ToRCI_RciSignature) isToRCI_SubMessage() {}

type TPAdv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure          int32            `protobuf:"varint,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	Temperature       int32            `protobuf:"zigzag32,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TPNotifyReason    TPNotifyReason_E `protobuf:"varint,3,opt,name=TPNotifyReason,proto3,enum=VCSEC.TPNotifyReason_E" json:"TPNotifyReason,omitempty"`
	BatteryVoltageMV  uint32           `protobuf:"varint,4,opt,name=batteryVoltage_mV,json=batteryVoltageMV,proto3" json:"batteryVoltage_mV,omitempty"`
	AdvertismentCount uint32           `protobuf:"varint,5,opt,name=advertismentCount,proto3" json:"advertismentCount,omitempty"`
	TPMSAdvType       TPMSAdvType_E    `protobuf:"varint,6,opt,name=TPMSAdvType,proto3,enum=VCSEC.TPMSAdvType_E" json:"TPMSAdvType,omitempty"`
}

func (x *TPAdv) Reset() {
	*x = TPAdv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPAdv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPAdv) ProtoMessage() {}

func (x *TPAdv) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPAdv.ProtoReflect.Descriptor instead.
func (*TPAdv) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{52}
}

func (x *TPAdv) GetPressure() int32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *TPAdv) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TPAdv) GetTPNotifyReason() TPNotifyReason_E {
	if x != nil {
		return x.TPNotifyReason
	}
	return TPNotifyReason_E_TP_NOTIFY_REASON_UNKNOWN
}

func (x *TPAdv) GetBatteryVoltageMV() uint32 {
	if x != nil {
		return x.BatteryVoltageMV
	}
	return 0
}

func (x *TPAdv) GetAdvertismentCount() uint32 {
	if x != nil {
		return x.AdvertismentCount
	}
	return 0
}

func (x *TPAdv) GetTPMSAdvType() TPMSAdvType_E {
	if x != nil {
		return x.TPMSAdvType
	}
	return TPMSAdvType_E_TPMS_ADV_TYPE_SEMI
}

type TPCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PressureInAdv                 bool `protobuf:"varint,1,opt,name=pressureInAdv,proto3" json:"pressureInAdv,omitempty"`
	ConfigurableIntervalThreshold bool `protobuf:"varint,2,opt,name=configurableIntervalThreshold,proto3" json:"configurableIntervalThreshold,omitempty"`
}

func (x *TPCapabilities) Reset() {
	*x = TPCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCapabilities) ProtoMessage() {}

func (x *TPCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCapabilities.ProtoReflect.Descriptor instead.
func (*TPCapabilities) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{53}
}

func (x *TPCapabilities) GetPressureInAdv() bool {
	if x != nil {
		return x.PressureInAdv
	}
	return false
}

func (x *TPCapabilities) GetConfigurableIntervalThreshold() bool {
	if x != nil {
		return x.ConfigurableIntervalThreshold
	}
	return false
}

type TPConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*TPConfiguration_StationaryConfig
	//	*TPConfiguration_MotionConfig
	SubMessage isTPConfiguration_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *TPConfiguration) Reset() {
	*x = TPConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPConfiguration) ProtoMessage() {}

func (x *TPConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPConfiguration.ProtoReflect.Descriptor instead.
func (*TPConfiguration) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{54}
}

func (m *TPConfiguration) GetSubMessage() isTPConfiguration_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *TPConfiguration) GetStationaryConfig() *TPStationaryConfig {
	if x, ok := x.GetSubMessage().(*TPConfiguration_StationaryConfig); ok {
		return x.StationaryConfig
	}
	return nil
}

func (x *TPConfiguration) GetMotionConfig() *TPMotionConfig {
	if x, ok := x.GetSubMessage().(*TPConfiguration_MotionConfig); ok {
		return x.MotionConfig
	}
	return nil
}

type isTPConfiguration_SubMessage interface {
	isTPConfiguration_SubMessage()
}

type TPConfiguration_StationaryConfig struct {
	StationaryConfig *TPStationaryConfig `protobuf:"bytes,1,opt,name=stationaryConfig,proto3,oneof"`
}

type TPConfiguration_MotionConfig struct {
	MotionConfig *TPMotionConfig `protobuf:"bytes,2,opt,name=motionConfig,proto3,oneof"`
}

func (*TPConfiguration_StationaryConfig) isTPConfiguration_SubMessage() {}

func (*TPConfiguration_MotionConfig) isTPConfiguration_SubMessage() {}

type TPData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure    int32 `protobuf:"varint,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	Temperature int32 `protobuf:"zigzag32,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
}

func (x *TPData) Reset() {
	*x = TPData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPData) ProtoMessage() {}

func (x *TPData) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPData.ProtoReflect.Descriptor instead.
func (*TPData) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{55}
}

func (x *TPData) GetPressure() int32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *TPData) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type TPLRDetection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LRDetectionResult LRDetectionResult_E `protobuf:"varint,1,opt,name=LRDetectionResult,proto3,enum=VCSEC.LRDetectionResult_E" json:"LRDetectionResult,omitempty"`
	TotalPeriodMs     uint32              `protobuf:"varint,2,opt,name=totalPeriod_ms,json=totalPeriodMs,proto3" json:"totalPeriod_ms,omitempty"`
	X90DegCnt         uint32              `protobuf:"varint,3,opt,name=x90degCnt,proto3" json:"x90degCnt,omitempty"`
	X270DegCnt        uint32              `protobuf:"varint,4,opt,name=x270degCnt,proto3" json:"x270degCnt,omitempty"`
	ZAccelerationDg   int32               `protobuf:"zigzag32,5,opt,name=zAcceleration_dg,json=zAccelerationDg,proto3" json:"zAcceleration_dg,omitempty"`
	ZAccelDiffCnt     uint32              `protobuf:"varint,6,opt,name=zAccelDiffCnt,proto3" json:"zAccelDiffCnt,omitempty"`
}

func (x *TPLRDetection) Reset() {
	*x = TPLRDetection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPLRDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPLRDetection) ProtoMessage() {}

func (x *TPLRDetection) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPLRDetection.ProtoReflect.Descriptor instead.
func (*TPLRDetection) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{56}
}

func (x *TPLRDetection) GetLRDetectionResult() LRDetectionResult_E {
	if x != nil {
		return x.LRDetectionResult
	}
	return LRDetectionResult_E_LRDETECTIONRESULT_ERROR_MAXCNT
}

func (x *TPLRDetection) GetTotalPeriodMs() uint32 {
	if x != nil {
		return x.TotalPeriodMs
	}
	return 0
}

func (x *TPLRDetection) GetX90DegCnt() uint32 {
	if x != nil {
		return x.X90DegCnt
	}
	return 0
}

func (x *TPLRDetection) GetX270DegCnt() uint32 {
	if x != nil {
		return x.X270DegCnt
	}
	return 0
}

func (x *TPLRDetection) GetZAccelerationDg() int32 {
	if x != nil {
		return x.ZAccelerationDg
	}
	return 0
}

func (x *TPLRDetection) GetZAccelDiffCnt() uint32 {
	if x != nil {
		return x.ZAccelDiffCnt
	}
	return 0
}

type TPMotionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PressureDelta    uint32          `protobuf:"varint,1,opt,name=pressureDelta,proto3" json:"pressureDelta,omitempty"`
	TemperatureDelta uint32          `protobuf:"varint,2,opt,name=temperatureDelta,proto3" json:"temperatureDelta,omitempty"`
	MotionPeriod     MLXWakePeriod_E `protobuf:"varint,3,opt,name=motionPeriod,proto3,enum=VCSEC.MLXWakePeriod_E" json:"motionPeriod,omitempty"`
	AccelMeasureMod  uint32          `protobuf:"varint,4,opt,name=accelMeasureMod,proto3" json:"accelMeasureMod,omitempty"`
	PTMeasureMod     uint32          `protobuf:"varint,5,opt,name=PTMeasureMod,proto3" json:"PTMeasureMod,omitempty"`
	MotionDuration   uint32          `protobuf:"varint,6,opt,name=motionDuration,proto3" json:"motionDuration,omitempty"`
}

func (x *TPMotionConfig) Reset() {
	*x = TPMotionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPMotionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPMotionConfig) ProtoMessage() {}

func (x *TPMotionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPMotionConfig.ProtoReflect.Descriptor instead.
func (*TPMotionConfig) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{57}
}

func (x *TPMotionConfig) GetPressureDelta() uint32 {
	if x != nil {
		return x.PressureDelta
	}
	return 0
}

func (x *TPMotionConfig) GetTemperatureDelta() uint32 {
	if x != nil {
		return x.TemperatureDelta
	}
	return 0
}

func (x *TPMotionConfig) GetMotionPeriod() MLXWakePeriod_E {
	if x != nil {
		return x.MotionPeriod
	}
	return MLXWakePeriod_E_MLXWAKEPERIOD_2_MS
}

func (x *TPMotionConfig) GetAccelMeasureMod() uint32 {
	if x != nil {
		return x.AccelMeasureMod
	}
	return 0
}

func (x *TPMotionConfig) GetPTMeasureMod() uint32 {
	if x != nil {
		return x.PTMeasureMod
	}
	return 0
}

func (x *TPMotionConfig) GetMotionDuration() uint32 {
	if x != nil {
		return x.MotionDuration
	}
	return 0
}

type TPMSAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure     bool `protobuf:"varint,1,opt,name=pressure,proto3" json:"pressure,omitempty"`
	Temperature  bool `protobuf:"varint,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Acceleration bool `protobuf:"varint,3,opt,name=acceleration,proto3" json:"acceleration,omitempty"`
	Voltage      bool `protobuf:"varint,4,opt,name=voltage,proto3" json:"voltage,omitempty"`
	LFDetect     bool `protobuf:"varint,5,opt,name=LFDetect,proto3" json:"LFDetect,omitempty"`
	WheelMotion  bool `protobuf:"varint,6,opt,name=wheelMotion,proto3" json:"wheelMotion,omitempty"`
}

func (x *TPMSAlarms) Reset() {
	*x = TPMSAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPMSAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPMSAlarms) ProtoMessage() {}

func (x *TPMSAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPMSAlarms.ProtoReflect.Descriptor instead.
func (*TPMSAlarms) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{58}
}

func (x *TPMSAlarms) GetPressure() bool {
	if x != nil {
		return x.Pressure
	}
	return false
}

func (x *TPMSAlarms) GetTemperature() bool {
	if x != nil {
		return x.Temperature
	}
	return false
}

func (x *TPMSAlarms) GetAcceleration() bool {
	if x != nil {
		return x.Acceleration
	}
	return false
}

func (x *TPMSAlarms) GetVoltage() bool {
	if x != nil {
		return x.Voltage
	}
	return false
}

func (x *TPMSAlarms) GetLFDetect() bool {
	if x != nil {
		return x.LFDetect
	}
	return false
}

func (x *TPMSAlarms) GetWheelMotion() bool {
	if x != nil {
		return x.WheelMotion
	}
	return false
}

type TPNewSensorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorPublicKey *PublicKey `protobuf:"bytes,1,opt,name=sensorPublicKey,proto3" json:"sensorPublicKey,omitempty"`
}

func (x *TPNewSensorData) Reset() {
	*x = TPNewSensorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPNewSensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPNewSensorData) ProtoMessage() {}

func (x *TPNewSensorData) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPNewSensorData.ProtoReflect.Descriptor instead.
func (*TPNewSensorData) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{59}
}

func (x *TPNewSensorData) GetSensorPublicKey() *PublicKey {
	if x != nil {
		return x.SensorPublicKey
	}
	return nil
}

type TPNotifyTrackerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyReasonUnknownCount                     uint32 `protobuf:"varint,1,opt,name=notifyReasonUnknownCount,proto3" json:"notifyReasonUnknownCount,omitempty"`
	NotifyReasonLowPressureCount                 uint32 `protobuf:"varint,2,opt,name=notifyReasonLowPressureCount,proto3" json:"notifyReasonLowPressureCount,omitempty"`
	NotifyReasonPTValueUpdateCount               uint32 `protobuf:"varint,3,opt,name=notifyReasonPTValueUpdateCount,proto3" json:"notifyReasonPTValueUpdateCount,omitempty"`
	NotifyReasonWheelMovingCount                 uint32 `protobuf:"varint,4,opt,name=notifyReasonWheelMovingCount,proto3" json:"notifyReasonWheelMovingCount,omitempty"`
	NotifyReasonWheelRotationDirectionReadyCount uint32 `protobuf:"varint,5,opt,name=notifyReasonWheelRotationDirectionReadyCount,proto3" json:"notifyReasonWheelRotationDirectionReadyCount,omitempty"`
	NotifyReasonLFCount                          uint32 `protobuf:"varint,6,opt,name=notifyReasonLFCount,proto3" json:"notifyReasonLFCount,omitempty"`
	NotifyReasonFaultCount                       uint32 `protobuf:"varint,7,opt,name=notifyReasonFaultCount,proto3" json:"notifyReasonFaultCount,omitempty"`
}

func (x *TPNotifyTrackerStats) Reset() {
	*x = TPNotifyTrackerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPNotifyTrackerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPNotifyTrackerStats) ProtoMessage() {}

func (x *TPNotifyTrackerStats) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPNotifyTrackerStats.ProtoReflect.Descriptor instead.
func (*TPNotifyTrackerStats) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{60}
}

func (x *TPNotifyTrackerStats) GetNotifyReasonUnknownCount() uint32 {
	if x != nil {
		return x.NotifyReasonUnknownCount
	}
	return 0
}

func (x *TPNotifyTrackerStats) GetNotifyReasonLowPressureCount() uint32 {
	if x != nil {
		return x.NotifyReasonLowPressureCount
	}
	return 0
}

func (x *TPNotifyTrackerStats) GetNotifyReasonPTValueUpdateCount() uint32 {
	if x != nil {
		return x.NotifyReasonPTValueUpdateCount
	}
	return 0
}

func (x *TPNotifyTrackerStats) GetNotifyReasonWheelMovingCount() uint32 {
	if x != nil {
		return x.NotifyReasonWheelMovingCount
	}
	return 0
}

func (x *TPNotifyTrackerStats) GetNotifyReasonWheelRotationDirectionReadyCount() uint32 {
	if x != nil {
		return x.NotifyReasonWheelRotationDirectionReadyCount
	}
	return 0
}

func (x *TPNotifyTrackerStats) GetNotifyReasonLFCount() uint32 {
	if x != nil {
		return x.NotifyReasonLFCount
	}
	return 0
}

func (x *TPNotifyTrackerStats) GetNotifyReasonFaultCount() uint32 {
	if x != nil {
		return x.NotifyReasonFaultCount
	}
	return 0
}

type TPStationaryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowPressureThreshold uint32          `protobuf:"varint,1,opt,name=lowPressureThreshold,proto3" json:"lowPressureThreshold,omitempty"`
	PressureDelta        uint32          `protobuf:"varint,2,opt,name=pressureDelta,proto3" json:"pressureDelta,omitempty"`
	StationaryTaskPeriod MLXWakePeriod_E `protobuf:"varint,3,opt,name=stationaryTaskPeriod,proto3,enum=VCSEC.MLXWakePeriod_E" json:"stationaryTaskPeriod,omitempty"`
	PressureMeasureMod   uint32          `protobuf:"varint,4,opt,name=pressureMeasureMod,proto3" json:"pressureMeasureMod,omitempty"`
	AccelMeasureMod      uint32          `protobuf:"varint,5,opt,name=accelMeasureMod,proto3" json:"accelMeasureMod,omitempty"`
}

func (x *TPStationaryConfig) Reset() {
	*x = TPStationaryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPStationaryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPStationaryConfig) ProtoMessage() {}

func (x *TPStationaryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPStationaryConfig.ProtoReflect.Descriptor instead.
func (*TPStationaryConfig) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{61}
}

func (x *TPStationaryConfig) GetLowPressureThreshold() uint32 {
	if x != nil {
		return x.LowPressureThreshold
	}
	return 0
}

func (x *TPStationaryConfig) GetPressureDelta() uint32 {
	if x != nil {
		return x.PressureDelta
	}
	return 0
}

func (x *TPStationaryConfig) GetStationaryTaskPeriod() MLXWakePeriod_E {
	if x != nil {
		return x.StationaryTaskPeriod
	}
	return MLXWakePeriod_E_MLXWAKEPERIOD_2_MS
}

func (x *TPStationaryConfig) GetPressureMeasureMod() uint32 {
	if x != nil {
		return x.PressureMeasureMod
	}
	return 0
}

func (x *TPStationaryConfig) GetAccelMeasureMod() uint32 {
	if x != nil {
		return x.AccelMeasureMod
	}
	return 0
}

type TPWheelUnitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TIAppCRC         []byte `protobuf:"bytes,1,opt,name=TIAppCRC,proto3" json:"TIAppCRC,omitempty"`
	MLXAppCRC        []byte `protobuf:"bytes,2,opt,name=MLXAppCRC,proto3" json:"MLXAppCRC,omitempty"`
	BatteryVoltageMV uint32 `protobuf:"varint,3,opt,name=batteryVoltage_mV,json=batteryVoltageMV,proto3" json:"batteryVoltage_mV,omitempty"`
}

func (x *TPWheelUnitInfo) Reset() {
	*x = TPWheelUnitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPWheelUnitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPWheelUnitInfo) ProtoMessage() {}

func (x *TPWheelUnitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPWheelUnitInfo.ProtoReflect.Descriptor instead.
func (*TPWheelUnitInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{62}
}

func (x *TPWheelUnitInfo) GetTIAppCRC() []byte {
	if x != nil {
		return x.TIAppCRC
	}
	return nil
}

func (x *TPWheelUnitInfo) GetMLXAppCRC() []byte {
	if x != nil {
		return x.MLXAppCRC
	}
	return nil
}

func (x *TPWheelUnitInfo) GetBatteryVoltageMV() uint32 {
	if x != nil {
		return x.BatteryVoltageMV
	}
	return 0
}

type UnknownKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyStatus     *KeyStatus    `protobuf:"bytes,1,opt,name=keyStatus,proto3" json:"keyStatus,omitempty"`
	PublicKey     *PublicKey    `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	KeyFormFactor KeyFormFactor `protobuf:"varint,3,opt,name=keyFormFactor,proto3,enum=VCSEC.KeyFormFactor" json:"keyFormFactor,omitempty"`
}

func (x *UnknownKeyInfo) Reset() {
	*x = UnknownKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownKeyInfo) ProtoMessage() {}

func (x *UnknownKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownKeyInfo.ProtoReflect.Descriptor instead.
func (*UnknownKeyInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{63}
}

func (x *UnknownKeyInfo) GetKeyStatus() *KeyStatus {
	if x != nil {
		return x.KeyStatus
	}
	return nil
}

func (x *UnknownKeyInfo) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *UnknownKeyInfo) GetKeyFormFactor() KeyFormFactor {
	if x != nil {
		return x.KeyFormFactor
	}
	return KeyFormFactor_KEY_FORM_FACTOR_UNKNOWN
}

type UnsecureNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyUser      bool             `protobuf:"varint,1,opt,name=notifyUser,proto3" json:"notifyUser,omitempty"`
	ClosureStatuses *ClosureStatuses `protobuf:"bytes,2,opt,name=closureStatuses,proto3" json:"closureStatuses,omitempty"`
}

func (x *UnsecureNotification) Reset() {
	*x = UnsecureNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsecureNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsecureNotification) ProtoMessage() {}

func (x *UnsecureNotification) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsecureNotification.ProtoReflect.Descriptor instead.
func (*UnsecureNotification) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{64}
}

func (x *UnsecureNotification) GetNotifyUser() bool {
	if x != nil {
		return x.NotifyUser
	}
	return false
}

func (x *UnsecureNotification) GetClosureStatuses() *ClosureStatuses {
	if x != nil {
		return x.ClosureStatuses
	}
	return nil
}

type UpdaterCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*UpdaterCommand_GetCodeDescriptor
	//	*UpdaterCommand_SetUpdaterLocation
	//	*UpdaterCommand_StageBlock
	//	*UpdaterCommand_VerifyAndInstallApp
	//	*UpdaterCommand_FirmwareInfo
	SubMessage isUpdaterCommand_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *UpdaterCommand) Reset() {
	*x = UpdaterCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdaterCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdaterCommand) ProtoMessage() {}

func (x *UpdaterCommand) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdaterCommand.ProtoReflect.Descriptor instead.
func (*UpdaterCommand) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{65}
}

func (m *UpdaterCommand) GetSubMessage() isUpdaterCommand_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *UpdaterCommand) GetGetCodeDescriptor() *GetCodeDescriptor {
	if x, ok := x.GetSubMessage().(*UpdaterCommand_GetCodeDescriptor); ok {
		return x.GetCodeDescriptor
	}
	return nil
}

func (x *UpdaterCommand) GetSetUpdaterLocation() *SetUpdaterLocation {
	if x, ok := x.GetSubMessage().(*UpdaterCommand_SetUpdaterLocation); ok {
		return x.SetUpdaterLocation
	}
	return nil
}

func (x *UpdaterCommand) GetStageBlock() *StageBlock {
	if x, ok := x.GetSubMessage().(*UpdaterCommand_StageBlock); ok {
		return x.StageBlock
	}
	return nil
}

func (x *UpdaterCommand) GetVerifyAndInstallApp() *VerifyAndInstallApp {
	if x, ok := x.GetSubMessage().(*UpdaterCommand_VerifyAndInstallApp); ok {
		return x.VerifyAndInstallApp
	}
	return nil
}

func (x *UpdaterCommand) GetFirmwareInfo() []byte {
	if x, ok := x.GetSubMessage().(*UpdaterCommand_FirmwareInfo); ok {
		return x.FirmwareInfo
	}
	return nil
}

type isUpdaterCommand_SubMessage interface {
	isUpdaterCommand_SubMessage()
}

type UpdaterCommand_GetCodeDescriptor struct {
	GetCodeDescriptor *GetCodeDescriptor `protobuf:"bytes,1,opt,name=getCodeDescriptor,proto3,oneof"`
}

type UpdaterCommand_SetUpdaterLocation struct {
	SetUpdaterLocation *SetUpdaterLocation `protobuf:"bytes,2,opt,name=setUpdaterLocation,proto3,oneof"`
}

type UpdaterCommand_StageBlock struct {
	StageBlock *StageBlock `protobuf:"bytes,3,opt,name=stageBlock,proto3,oneof"`
}

type UpdaterCommand_VerifyAndInstallApp struct {
	VerifyAndInstallApp *VerifyAndInstallApp `protobuf:"bytes,4,opt,name=verifyAndInstallApp,proto3,oneof"`
}

type UpdaterCommand_FirmwareInfo struct {
	FirmwareInfo []byte `protobuf:"bytes,5,opt,name=firmwareInfo,proto3,oneof"`
}

func (*UpdaterCommand_GetCodeDescriptor) isUpdaterCommand_SubMessage() {}

func (*UpdaterCommand_SetUpdaterLocation) isUpdaterCommand_SubMessage() {}

func (*UpdaterCommand_StageBlock) isUpdaterCommand_SubMessage() {}

func (*UpdaterCommand_VerifyAndInstallApp) isUpdaterCommand_SubMessage() {}

func (*UpdaterCommand_FirmwareInfo) isUpdaterCommand_SubMessage() {}

type UpdaterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*UpdaterResponse_CodeDescriptorMessage
	//	*UpdaterResponse_UpdaterStatus
	SubMessage isUpdaterResponse_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *UpdaterResponse) Reset() {
	*x = UpdaterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdaterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdaterResponse) ProtoMessage() {}

func (x *UpdaterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdaterResponse.ProtoReflect.Descriptor instead.
func (*UpdaterResponse) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{66}
}

func (m *UpdaterResponse) GetSubMessage() isUpdaterResponse_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *UpdaterResponse) GetCodeDescriptorMessage() *CodeDescriptor {
	if x, ok := x.GetSubMessage().(*UpdaterResponse_CodeDescriptorMessage); ok {
		return x.CodeDescriptorMessage
	}
	return nil
}

func (x *UpdaterResponse) GetUpdaterStatus() *UpdaterStatus {
	if x, ok := x.GetSubMessage().(*UpdaterResponse_UpdaterStatus); ok {
		return x.UpdaterStatus
	}
	return nil
}

type isUpdaterResponse_SubMessage interface {
	isUpdaterResponse_SubMessage()
}

type UpdaterResponse_CodeDescriptorMessage struct {
	CodeDescriptorMessage *CodeDescriptor `protobuf:"bytes,1,opt,name=codeDescriptorMessage,proto3,oneof"`
}

type UpdaterResponse_UpdaterStatus struct {
	UpdaterStatus *UpdaterStatus `protobuf:"bytes,2,opt,name=updaterStatus,proto3,oneof"`
}

func (*UpdaterResponse_CodeDescriptorMessage) isUpdaterResponse_SubMessage() {}

func (*UpdaterResponse_UpdaterStatus) isUpdaterResponse_SubMessage() {}

type UpdaterStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode        UpdaterStatusCode `protobuf:"varint,1,opt,name=statusCode,proto3,enum=VCSEC.UpdaterStatusCode" json:"statusCode,omitempty"`
	Location          UpdaterLocation   `protobuf:"varint,2,opt,name=location,proto3,enum=VCSEC.UpdaterLocation" json:"location,omitempty"`
	NextAddressNumber uint32            `protobuf:"varint,3,opt,name=nextAddressNumber,proto3" json:"nextAddressNumber,omitempty"`
}

func (x *UpdaterStatus) Reset() {
	*x = UpdaterStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdaterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdaterStatus) ProtoMessage() {}

func (x *UpdaterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdaterStatus.ProtoReflect.Descriptor instead.
func (*UpdaterStatus) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{67}
}

func (x *UpdaterStatus) GetStatusCode() UpdaterStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return UpdaterStatusCode_UPDATER_STATUS_CODE_ERROR
}

func (x *UpdaterStatus) GetLocation() UpdaterLocation {
	if x != nil {
		return x.Location
	}
	return UpdaterLocation_UPDATER_LOCATION_NONE
}

func (x *UpdaterStatus) GetNextAddressNumber() uint32 {
	if x != nil {
		return x.NextAddressNumber
	}
	return 0
}

type VehicleBLENickName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName []byte `protobuf:"bytes,1,opt,name=nickName,proto3" json:"nickName,omitempty"`
}

func (x *VehicleBLENickName) Reset() {
	*x = VehicleBLENickName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleBLENickName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleBLENickName) ProtoMessage() {}

func (x *VehicleBLENickName) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleBLENickName.ProtoReflect.Descriptor instead.
func (*VehicleBLENickName) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{68}
}

func (x *VehicleBLENickName) GetNickName() []byte {
	if x != nil {
		return x.NickName
	}
	return nil
}

type VehicleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VIN string `protobuf:"bytes,1,opt,name=VIN,proto3" json:"VIN,omitempty"`
}

func (x *VehicleInfo) Reset() {
	*x = VehicleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleInfo) ProtoMessage() {}

func (x *VehicleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleInfo.ProtoReflect.Descriptor instead.
func (*VehicleInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{69}
}

func (x *VehicleInfo) GetVIN() string {
	if x != nil {
		return x.VIN
	}
	return ""
}

type VerifyAndInstallApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256 []byte `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
	RValue []byte `protobuf:"bytes,2,opt,name=rValue,proto3" json:"rValue,omitempty"`
	SValue []byte `protobuf:"bytes,3,opt,name=sValue,proto3" json:"sValue,omitempty"`
}

func (x *VerifyAndInstallApp) Reset() {
	*x = VerifyAndInstallApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyAndInstallApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyAndInstallApp) ProtoMessage() {}

func (x *VerifyAndInstallApp) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyAndInstallApp.ProtoReflect.Descriptor instead.
func (*VerifyAndInstallApp) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{70}
}

func (x *VerifyAndInstallApp) GetSha256() []byte {
	if x != nil {
		return x.Sha256
	}
	return nil
}

func (x *VerifyAndInstallApp) GetRValue() []byte {
	if x != nil {
		return x.RValue
	}
	return nil
}

func (x *VerifyAndInstallApp) GetSValue() []byte {
	if x != nil {
		return x.SValue
	}
	return nil
}

type SignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BD Modified (added) - Begin
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// BD Modified (added) - End
	ProtobufMessageAsBytes []byte        `protobuf:"bytes,2,opt,name=protobufMessageAsBytes,proto3" json:"protobufMessageAsBytes,omitempty"`
	SignatureType          SignatureType `protobuf:"varint,3,opt,name=signatureType,proto3,enum=VCSEC.SignatureType" json:"signatureType,omitempty"`
	// BD Modified (added) - Begin
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	KeyId     []byte `protobuf:"bytes,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Counter   uint32 `protobuf:"varint,6,opt,name=counter,proto3" json:"counter,omitempty"` // BD Modified (added) - End
}

func (x *SignedMessage) Reset() {
	*x = SignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessage) ProtoMessage() {}

func (x *SignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessage.ProtoReflect.Descriptor instead.
func (*SignedMessage) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{71}
}

func (x *SignedMessage) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SignedMessage) GetProtobufMessageAsBytes() []byte {
	if x != nil {
		return x.ProtobufMessageAsBytes
	}
	return nil
}

func (x *SignedMessage) GetSignatureType() SignatureType {
	if x != nil {
		return x.SignatureType
	}
	return SignatureType_SIGNATURE_TYPE_NONE
}

func (x *SignedMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedMessage) GetKeyId() []byte {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SignedMessage) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type ToVCSECMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedMessage *SignedMessage `protobuf:"bytes,1,opt,name=signedMessage,proto3" json:"signedMessage,omitempty"`
}

func (x *ToVCSECMessage) Reset() {
	*x = ToVCSECMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToVCSECMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToVCSECMessage) ProtoMessage() {}

func (x *ToVCSECMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToVCSECMessage.ProtoReflect.Descriptor instead.
func (*ToVCSECMessage) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{72}
}

func (x *ToVCSECMessage) GetSignedMessage() *SignedMessage {
	if x != nil {
		return x.SignedMessage
	}
	return nil
}

type KeyIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeySHA1 []byte `protobuf:"bytes,1,opt,name=publicKeySHA1,proto3" json:"publicKeySHA1,omitempty"`
}

func (x *KeyIdentifier) Reset() {
	*x = KeyIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyIdentifier) ProtoMessage() {}

func (x *KeyIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyIdentifier.ProtoReflect.Descriptor instead.
func (*KeyIdentifier) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{73}
}

func (x *KeyIdentifier) GetPublicKeySHA1() []byte {
	if x != nil {
		return x.PublicKeySHA1
	}
	return nil
}

type KeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyFormFactor KeyFormFactor `protobuf:"varint,1,opt,name=keyFormFactor,proto3,enum=VCSEC.KeyFormFactor" json:"keyFormFactor,omitempty"`
}

func (x *KeyMetadata) Reset() {
	*x = KeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMetadata) ProtoMessage() {}

func (x *KeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMetadata.ProtoReflect.Descriptor instead.
func (*KeyMetadata) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{74}
}

func (x *KeyMetadata) GetKeyFormFactor() KeyFormFactor {
	if x != nil {
		return x.KeyFormFactor
	}
	return KeyFormFactor_KEY_FORM_FACTOR_UNKNOWN
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyRaw []byte `protobuf:"bytes,1,opt,name=PublicKeyRaw,proto3" json:"PublicKeyRaw,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{75}
}

func (x *PublicKey) GetPublicKeyRaw() []byte {
	if x != nil {
		return x.PublicKeyRaw
	}
	return nil
}

type WhitelistInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfEntries  uint32           `protobuf:"varint,1,opt,name=numberOfEntries,proto3" json:"numberOfEntries,omitempty"`
	WhitelistEntries []*KeyIdentifier `protobuf:"bytes,2,rep,name=whitelistEntries,proto3" json:"whitelistEntries,omitempty"`
	SlotMask         uint32           `protobuf:"varint,3,opt,name=slotMask,proto3" json:"slotMask,omitempty"`
}

func (x *WhitelistInfo) Reset() {
	*x = WhitelistInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistInfo) ProtoMessage() {}

func (x *WhitelistInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistInfo.ProtoReflect.Descriptor instead.
func (*WhitelistInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{76}
}

func (x *WhitelistInfo) GetNumberOfEntries() uint32 {
	if x != nil {
		return x.NumberOfEntries
	}
	return 0
}

func (x *WhitelistInfo) GetWhitelistEntries() []*KeyIdentifier {
	if x != nil {
		return x.WhitelistEntries
	}
	return nil
}

func (x *WhitelistInfo) GetSlotMask() uint32 {
	if x != nil {
		return x.SlotMask
	}
	return 0
}

type WhitelistEntryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId     *KeyIdentifier `protobuf:"bytes,1,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PublicKey *PublicKey     `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// BD Modified (added) - Begin
	Permissions []WhitelistKeyPermission_E `protobuf:"varint,3,rep,packed,name=permissions,proto3,enum=VCSEC.WhitelistKeyPermission_E" json:"permissions,omitempty"`
	// BD Modified (added) - End
	MetadataForKey *KeyMetadata `protobuf:"bytes,4,opt,name=metadataForKey,proto3" json:"metadataForKey,omitempty"`
	// BD Modified (added) - Begin
	SecondsEntryRemainsActive uint32 `protobuf:"varint,5,opt,name=secondsEntryRemainsActive,proto3" json:"secondsEntryRemainsActive,omitempty"`
	// BD Modified (added) - End
	Slot    uint32    `protobuf:"varint,6,opt,name=slot,proto3" json:"slot,omitempty"`
	KeyRole keys.Role `protobuf:"varint,7,opt,name=keyRole,proto3,enum=Keys.Role" json:"keyRole,omitempty"`
}

func (x *WhitelistEntryInfo) Reset() {
	*x = WhitelistEntryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistEntryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistEntryInfo) ProtoMessage() {}

func (x *WhitelistEntryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistEntryInfo.ProtoReflect.Descriptor instead.
func (*WhitelistEntryInfo) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{77}
}

func (x *WhitelistEntryInfo) GetKeyId() *KeyIdentifier {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *WhitelistEntryInfo) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *WhitelistEntryInfo) GetPermissions() []WhitelistKeyPermission_E {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *WhitelistEntryInfo) GetMetadataForKey() *KeyMetadata {
	if x != nil {
		return x.MetadataForKey
	}
	return nil
}

func (x *WhitelistEntryInfo) GetSecondsEntryRemainsActive() uint32 {
	if x != nil {
		return x.SecondsEntryRemainsActive
	}
	return 0
}

func (x *WhitelistEntryInfo) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *WhitelistEntryInfo) GetKeyRole() keys.Role {
	if x != nil {
		return x.KeyRole
	}
	return keys.Role(0)
}

type InformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InformationRequestType InformationRequestType `protobuf:"varint,1,opt,name=informationRequestType,proto3,enum=VCSEC.InformationRequestType" json:"informationRequestType,omitempty"`
	// Types that are assignable to Key:
	//
	//	*InformationRequest_KeyId
	//	*InformationRequest_PublicKey
	//	*InformationRequest_Slot
	Key isInformationRequest_Key `protobuf_oneof:"key"`
}

func (x *InformationRequest) Reset() {
	*x = InformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformationRequest) ProtoMessage() {}

func (x *InformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformationRequest.ProtoReflect.Descriptor instead.
func (*InformationRequest) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{78}
}

func (x *InformationRequest) GetInformationRequestType() InformationRequestType {
	if x != nil {
		return x.InformationRequestType
	}
	return InformationRequestType_INFORMATION_REQUEST_TYPE_GET_STATUS
}

func (m *InformationRequest) GetKey() isInformationRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *InformationRequest) GetKeyId() *KeyIdentifier {
	if x, ok := x.GetKey().(*InformationRequest_KeyId); ok {
		return x.KeyId
	}
	return nil
}

func (x *InformationRequest) GetPublicKey() []byte {
	if x, ok := x.GetKey().(*InformationRequest_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (x *InformationRequest) GetSlot() uint32 {
	if x, ok := x.GetKey().(*InformationRequest_Slot); ok {
		return x.Slot
	}
	return 0
}

type isInformationRequest_Key interface {
	isInformationRequest_Key()
}

type InformationRequest_KeyId struct {
	KeyId *KeyIdentifier `protobuf:"bytes,2,opt,name=keyId,proto3,oneof"`
}

type InformationRequest_PublicKey struct {
	PublicKey []byte `protobuf:"bytes,3,opt,name=publicKey,proto3,oneof"`
}

type InformationRequest_Slot struct {
	Slot uint32 `protobuf:"varint,4,opt,name=slot,proto3,oneof"`
}

func (*InformationRequest_KeyId) isInformationRequest_Key() {}

func (*InformationRequest_PublicKey) isInformationRequest_Key() {}

func (*InformationRequest_Slot) isInformationRequest_Key() {}

type ClosureMoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontDriverDoor    ClosureMoveType_E `protobuf:"varint,1,opt,name=frontDriverDoor,proto3,enum=VCSEC.ClosureMoveType_E" json:"frontDriverDoor,omitempty"`
	FrontPassengerDoor ClosureMoveType_E `protobuf:"varint,2,opt,name=frontPassengerDoor,proto3,enum=VCSEC.ClosureMoveType_E" json:"frontPassengerDoor,omitempty"`
	RearDriverDoor     ClosureMoveType_E `protobuf:"varint,3,opt,name=rearDriverDoor,proto3,enum=VCSEC.ClosureMoveType_E" json:"rearDriverDoor,omitempty"`
	RearPassengerDoor  ClosureMoveType_E `protobuf:"varint,4,opt,name=rearPassengerDoor,proto3,enum=VCSEC.ClosureMoveType_E" json:"rearPassengerDoor,omitempty"`
	RearTrunk          ClosureMoveType_E `protobuf:"varint,5,opt,name=rearTrunk,proto3,enum=VCSEC.ClosureMoveType_E" json:"rearTrunk,omitempty"`
	FrontTrunk         ClosureMoveType_E `protobuf:"varint,6,opt,name=frontTrunk,proto3,enum=VCSEC.ClosureMoveType_E" json:"frontTrunk,omitempty"`
	ChargePort         ClosureMoveType_E `protobuf:"varint,7,opt,name=chargePort,proto3,enum=VCSEC.ClosureMoveType_E" json:"chargePort,omitempty"`
	Tonneau            ClosureMoveType_E `protobuf:"varint,8,opt,name=tonneau,proto3,enum=VCSEC.ClosureMoveType_E" json:"tonneau,omitempty"`
}

func (x *ClosureMoveRequest) Reset() {
	*x = ClosureMoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosureMoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosureMoveRequest) ProtoMessage() {}

func (x *ClosureMoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosureMoveRequest.ProtoReflect.Descriptor instead.
func (*ClosureMoveRequest) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{79}
}

func (x *ClosureMoveRequest) GetFrontDriverDoor() ClosureMoveType_E {
	if x != nil {
		return x.FrontDriverDoor
	}
	return ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE
}

func (x *ClosureMoveRequest) GetFrontPassengerDoor() ClosureMoveType_E {
	if x != nil {
		return x.FrontPassengerDoor
	}
	return ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE
}

func (x *ClosureMoveRequest) GetRearDriverDoor() ClosureMoveType_E {
	if x != nil {
		return x.RearDriverDoor
	}
	return ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE
}

func (x *ClosureMoveRequest) GetRearPassengerDoor() ClosureMoveType_E {
	if x != nil {
		return x.RearPassengerDoor
	}
	return ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE
}

func (x *ClosureMoveRequest) GetRearTrunk() ClosureMoveType_E {
	if x != nil {
		return x.RearTrunk
	}
	return ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE
}

func (x *ClosureMoveRequest) GetFrontTrunk() ClosureMoveType_E {
	if x != nil {
		return x.FrontTrunk
	}
	return ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE
}

func (x *ClosureMoveRequest) GetChargePort() ClosureMoveType_E {
	if x != nil {
		return x.ChargePort
	}
	return ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE
}

func (x *ClosureMoveRequest) GetTonneau() ClosureMoveType_E {
	if x != nil {
		return x.Tonneau
	}
	return ClosureMoveType_E_CLOSURE_MOVE_TYPE_NONE
}

type PermissionChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *PublicKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// BD Modified (added) - Begin
	Permission []WhitelistKeyPermission_E `protobuf:"varint,2,rep,packed,name=permission,proto3,enum=VCSEC.WhitelistKeyPermission_E" json:"permission,omitempty"`
	// BD Modified (added) - End
	SecondsToBeActive uint32    `protobuf:"varint,3,opt,name=secondsToBeActive,proto3" json:"secondsToBeActive,omitempty"`
	KeyRole           keys.Role `protobuf:"varint,4,opt,name=keyRole,proto3,enum=Keys.Role" json:"keyRole,omitempty"`
}

func (x *PermissionChange) Reset() {
	*x = PermissionChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionChange) ProtoMessage() {}

func (x *PermissionChange) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionChange.ProtoReflect.Descriptor instead.
func (*PermissionChange) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{80}
}

func (x *PermissionChange) GetKey() *PublicKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PermissionChange) GetPermission() []WhitelistKeyPermission_E {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *PermissionChange) GetSecondsToBeActive() uint32 {
	if x != nil {
		return x.SecondsToBeActive
	}
	return 0
}

func (x *PermissionChange) GetKeyRole() keys.Role {
	if x != nil {
		return x.KeyRole
	}
	return keys.Role(0)
}

type ReplaceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to KeyToReplace:
	//
	//	*ReplaceKey_PublicKeyToReplace
	//	*ReplaceKey_SlotToReplace
	KeyToReplace isReplaceKey_KeyToReplace `protobuf_oneof:"keyToReplace"`
	KeyToAdd     *PublicKey                `protobuf:"bytes,3,opt,name=keyToAdd,proto3" json:"keyToAdd,omitempty"`
	KeyRole      keys.Role                 `protobuf:"varint,4,opt,name=keyRole,proto3,enum=Keys.Role" json:"keyRole,omitempty"`
	Impermanent  bool                      `protobuf:"varint,5,opt,name=impermanent,proto3" json:"impermanent,omitempty"`
}

func (x *ReplaceKey) Reset() {
	*x = ReplaceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceKey) ProtoMessage() {}

func (x *ReplaceKey) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceKey.ProtoReflect.Descriptor instead.
func (*ReplaceKey) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{81}
}

func (m *ReplaceKey) GetKeyToReplace() isReplaceKey_KeyToReplace {
	if m != nil {
		return m.KeyToReplace
	}
	return nil
}

func (x *ReplaceKey) GetPublicKeyToReplace() *PublicKey {
	if x, ok := x.GetKeyToReplace().(*ReplaceKey_PublicKeyToReplace); ok {
		return x.PublicKeyToReplace
	}
	return nil
}

func (x *ReplaceKey) GetSlotToReplace() uint32 {
	if x, ok := x.GetKeyToReplace().(*ReplaceKey_SlotToReplace); ok {
		return x.SlotToReplace
	}
	return 0
}

func (x *ReplaceKey) GetKeyToAdd() *PublicKey {
	if x != nil {
		return x.KeyToAdd
	}
	return nil
}

func (x *ReplaceKey) GetKeyRole() keys.Role {
	if x != nil {
		return x.KeyRole
	}
	return keys.Role(0)
}

func (x *ReplaceKey) GetImpermanent() bool {
	if x != nil {
		return x.Impermanent
	}
	return false
}

type isReplaceKey_KeyToReplace interface {
	isReplaceKey_KeyToReplace()
}

type ReplaceKey_PublicKeyToReplace struct {
	PublicKeyToReplace *PublicKey `protobuf:"bytes,1,opt,name=publicKeyToReplace,proto3,oneof"`
}

type ReplaceKey_SlotToReplace struct {
	SlotToReplace uint32 `protobuf:"varint,2,opt,name=slotToReplace,proto3,oneof"`
}

func (*ReplaceKey_PublicKeyToReplace) isReplaceKey_KeyToReplace() {}

func (*ReplaceKey_SlotToReplace) isReplaceKey_KeyToReplace() {}

type WhitelistOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*WhitelistOperation_AddPublicKeyToWhitelist
	//	*WhitelistOperation_RemovePublicKeyFromWhitelist
	//	*WhitelistOperation_AddPermissionsToPublicKey
	//	*WhitelistOperation_RemovePermissionsFromPublicKey
	//	*WhitelistOperation_AddKeyToWhitelistAndAddPermissions
	//	*WhitelistOperation_UpdateKeyAndPermissions
	//	*WhitelistOperation_AddImpermanentKey
	//	*WhitelistOperation_AddImpermanentKeyAndRemoveExisting
	//	*WhitelistOperation_RemoveAllImpermanentKeys
	//	*WhitelistOperation_ReplaceKey
	SubMessage     isWhitelistOperation_SubMessage `protobuf_oneof:"sub_message"`
	MetadataForKey *KeyMetadata                    `protobuf:"bytes,6,opt,name=metadataForKey,proto3" json:"metadataForKey,omitempty"`
}

func (x *WhitelistOperation) Reset() {
	*x = WhitelistOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistOperation) ProtoMessage() {}

func (x *WhitelistOperation) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistOperation.ProtoReflect.Descriptor instead.
func (*WhitelistOperation) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{82}
}

func (m *WhitelistOperation) GetSubMessage() isWhitelistOperation_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *WhitelistOperation) GetAddPublicKeyToWhitelist() *PublicKey {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_AddPublicKeyToWhitelist); ok {
		return x.AddPublicKeyToWhitelist
	}
	return nil
}

func (x *WhitelistOperation) GetRemovePublicKeyFromWhitelist() *PublicKey {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_RemovePublicKeyFromWhitelist); ok {
		return x.RemovePublicKeyFromWhitelist
	}
	return nil
}

func (x *WhitelistOperation) GetAddPermissionsToPublicKey() *PermissionChange {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_AddPermissionsToPublicKey); ok {
		return x.AddPermissionsToPublicKey
	}
	return nil
}

func (x *WhitelistOperation) GetRemovePermissionsFromPublicKey() *PermissionChange {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_RemovePermissionsFromPublicKey); ok {
		return x.RemovePermissionsFromPublicKey
	}
	return nil
}

func (x *WhitelistOperation) GetAddKeyToWhitelistAndAddPermissions() *PermissionChange {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_AddKeyToWhitelistAndAddPermissions); ok {
		return x.AddKeyToWhitelistAndAddPermissions
	}
	return nil
}

func (x *WhitelistOperation) GetUpdateKeyAndPermissions() *PermissionChange {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_UpdateKeyAndPermissions); ok {
		return x.UpdateKeyAndPermissions
	}
	return nil
}

func (x *WhitelistOperation) GetAddImpermanentKey() *PermissionChange {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_AddImpermanentKey); ok {
		return x.AddImpermanentKey
	}
	return nil
}

func (x *WhitelistOperation) GetAddImpermanentKeyAndRemoveExisting() *PermissionChange {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_AddImpermanentKeyAndRemoveExisting); ok {
		return x.AddImpermanentKeyAndRemoveExisting
	}
	return nil
}

func (x *WhitelistOperation) GetRemoveAllImpermanentKeys() bool {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_RemoveAllImpermanentKeys); ok {
		return x.RemoveAllImpermanentKeys
	}
	return false
}

func (x *WhitelistOperation) GetReplaceKey() *ReplaceKey {
	if x, ok := x.GetSubMessage().(*WhitelistOperation_ReplaceKey); ok {
		return x.ReplaceKey
	}
	return nil
}

func (x *WhitelistOperation) GetMetadataForKey() *KeyMetadata {
	if x != nil {
		return x.MetadataForKey
	}
	return nil
}

type isWhitelistOperation_SubMessage interface {
	isWhitelistOperation_SubMessage()
}

type WhitelistOperation_AddPublicKeyToWhitelist struct {
	AddPublicKeyToWhitelist *PublicKey `protobuf:"bytes,1,opt,name=addPublicKeyToWhitelist,proto3,oneof"`
}

type WhitelistOperation_RemovePublicKeyFromWhitelist struct {
	RemovePublicKeyFromWhitelist *PublicKey `protobuf:"bytes,2,opt,name=removePublicKeyFromWhitelist,proto3,oneof"`
}

type WhitelistOperation_AddPermissionsToPublicKey struct {
	AddPermissionsToPublicKey *PermissionChange `protobuf:"bytes,3,opt,name=addPermissionsToPublicKey,proto3,oneof"`
}

type WhitelistOperation_RemovePermissionsFromPublicKey struct {
	RemovePermissionsFromPublicKey *PermissionChange `protobuf:"bytes,4,opt,name=removePermissionsFromPublicKey,proto3,oneof"`
}

type WhitelistOperation_AddKeyToWhitelistAndAddPermissions struct {
	AddKeyToWhitelistAndAddPermissions *PermissionChange `protobuf:"bytes,5,opt,name=addKeyToWhitelistAndAddPermissions,proto3,oneof"`
}

type WhitelistOperation_UpdateKeyAndPermissions struct {
	UpdateKeyAndPermissions *PermissionChange `protobuf:"bytes,7,opt,name=updateKeyAndPermissions,proto3,oneof"`
}

type WhitelistOperation_AddImpermanentKey struct {
	AddImpermanentKey *PermissionChange `protobuf:"bytes,8,opt,name=addImpermanentKey,proto3,oneof"`
}

type WhitelistOperation_AddImpermanentKeyAndRemoveExisting struct {
	AddImpermanentKeyAndRemoveExisting *PermissionChange `protobuf:"bytes,9,opt,name=addImpermanentKeyAndRemoveExisting,proto3,oneof"`
}

type WhitelistOperation_RemoveAllImpermanentKeys struct {
	RemoveAllImpermanentKeys bool `protobuf:"varint,16,opt,name=removeAllImpermanentKeys,proto3,oneof"`
}

type WhitelistOperation_ReplaceKey struct {
	ReplaceKey *ReplaceKey `protobuf:"bytes,17,opt,name=replaceKey,proto3,oneof"`
}

func (*WhitelistOperation_AddPublicKeyToWhitelist) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_RemovePublicKeyFromWhitelist) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_AddPermissionsToPublicKey) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_RemovePermissionsFromPublicKey) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_AddKeyToWhitelistAndAddPermissions) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_UpdateKeyAndPermissions) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_AddImpermanentKey) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_AddImpermanentKeyAndRemoveExisting) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_RemoveAllImpermanentKeys) isWhitelistOperation_SubMessage() {}

func (*WhitelistOperation_ReplaceKey) isWhitelistOperation_SubMessage() {}

type WhitelistOperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistOperationInformation WhitelistOperationInformation_E `protobuf:"varint,1,opt,name=whitelistOperationInformation,proto3,enum=VCSEC.WhitelistOperationInformation_E" json:"whitelistOperationInformation,omitempty"`
	SignerOfOperation             *KeyIdentifier                  `protobuf:"bytes,2,opt,name=signerOfOperation,proto3" json:"signerOfOperation,omitempty"`
	OperationStatus               OperationStatus_E               `protobuf:"varint,3,opt,name=operationStatus,proto3,enum=VCSEC.OperationStatus_E" json:"operationStatus,omitempty"`
}

func (x *WhitelistOperationStatus) Reset() {
	*x = WhitelistOperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistOperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistOperationStatus) ProtoMessage() {}

func (x *WhitelistOperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistOperationStatus.ProtoReflect.Descriptor instead.
func (*WhitelistOperationStatus) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{83}
}

func (x *WhitelistOperationStatus) GetWhitelistOperationInformation() WhitelistOperationInformation_E {
	if x != nil {
		return x.WhitelistOperationInformation
	}
	return WhitelistOperationInformation_E_WHITELISTOPERATION_INFORMATION_NONE
}

func (x *WhitelistOperationStatus) GetSignerOfOperation() *KeyIdentifier {
	if x != nil {
		return x.SignerOfOperation
	}
	return nil
}

func (x *WhitelistOperationStatus) GetOperationStatus() OperationStatus_E {
	if x != nil {
		return x.OperationStatus
	}
	return OperationStatus_E_OPERATIONSTATUS_OK
}

type SignedMessageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter                  uint32                     `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	SignedMessageInformation SignedMessageInformation_E `protobuf:"varint,2,opt,name=signedMessageInformation,proto3,enum=VCSEC.SignedMessageInformation_E" json:"signedMessageInformation,omitempty"`
}

func (x *SignedMessageStatus) Reset() {
	*x = SignedMessageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedMessageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedMessageStatus) ProtoMessage() {}

func (x *SignedMessageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedMessageStatus.ProtoReflect.Descriptor instead.
func (*SignedMessageStatus) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{84}
}

func (x *SignedMessageStatus) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *SignedMessageStatus) GetSignedMessageInformation() SignedMessageInformation_E {
	if x != nil {
		return x.SignedMessageInformation
	}
	return SignedMessageInformation_E_SIGNEDMESSAGE_INFORMATION_NONE
}

type CommandStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationStatus OperationStatus_E `protobuf:"varint,1,opt,name=operationStatus,proto3,enum=VCSEC.OperationStatus_E" json:"operationStatus,omitempty"`
	// Types that are assignable to SubMessage:
	//
	//	*CommandStatus_SignedMessageStatus
	//	*CommandStatus_WhitelistOperationStatus
	SubMessage isCommandStatus_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *CommandStatus) Reset() {
	*x = CommandStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStatus) ProtoMessage() {}

func (x *CommandStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStatus.ProtoReflect.Descriptor instead.
func (*CommandStatus) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{85}
}

func (x *CommandStatus) GetOperationStatus() OperationStatus_E {
	if x != nil {
		return x.OperationStatus
	}
	return OperationStatus_E_OPERATIONSTATUS_OK
}

func (m *CommandStatus) GetSubMessage() isCommandStatus_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *CommandStatus) GetSignedMessageStatus() *SignedMessageStatus {
	if x, ok := x.GetSubMessage().(*CommandStatus_SignedMessageStatus); ok {
		return x.SignedMessageStatus
	}
	return nil
}

func (x *CommandStatus) GetWhitelistOperationStatus() *WhitelistOperationStatus {
	if x, ok := x.GetSubMessage().(*CommandStatus_WhitelistOperationStatus); ok {
		return x.WhitelistOperationStatus
	}
	return nil
}

type isCommandStatus_SubMessage interface {
	isCommandStatus_SubMessage()
}

type CommandStatus_SignedMessageStatus struct {
	SignedMessageStatus *SignedMessageStatus `protobuf:"bytes,2,opt,name=signedMessageStatus,proto3,oneof"`
}

type CommandStatus_WhitelistOperationStatus struct {
	WhitelistOperationStatus *WhitelistOperationStatus `protobuf:"bytes,3,opt,name=whitelistOperationStatus,proto3,oneof"`
}

func (*CommandStatus_SignedMessageStatus) isCommandStatus_SubMessage() {}

func (*CommandStatus_WhitelistOperationStatus) isCommandStatus_SubMessage() {}

type UnsignedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*UnsignedMessage_InformationRequest
	//	*UnsignedMessage_RKEAction
	//	*UnsignedMessage_ClosureMoveRequest
	//	*UnsignedMessage_WhitelistOperation
	SubMessage isUnsignedMessage_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *UnsignedMessage) Reset() {
	*x = UnsignedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsignedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsignedMessage) ProtoMessage() {}

func (x *UnsignedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsignedMessage.ProtoReflect.Descriptor instead.
func (*UnsignedMessage) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{86}
}

func (m *UnsignedMessage) GetSubMessage() isUnsignedMessage_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *UnsignedMessage) GetInformationRequest() *InformationRequest {
	if x, ok := x.GetSubMessage().(*UnsignedMessage_InformationRequest); ok {
		return x.InformationRequest
	}
	return nil
}

func (x *UnsignedMessage) GetRKEAction() RKEAction_E {
	if x, ok := x.GetSubMessage().(*UnsignedMessage_RKEAction); ok {
		return x.RKEAction
	}
	return RKEAction_E_RKE_ACTION_UNLOCK
}

func (x *UnsignedMessage) GetClosureMoveRequest() *ClosureMoveRequest {
	if x, ok := x.GetSubMessage().(*UnsignedMessage_ClosureMoveRequest); ok {
		return x.ClosureMoveRequest
	}
	return nil
}

func (x *UnsignedMessage) GetWhitelistOperation() *WhitelistOperation {
	if x, ok := x.GetSubMessage().(*UnsignedMessage_WhitelistOperation); ok {
		return x.WhitelistOperation
	}
	return nil
}

type isUnsignedMessage_SubMessage interface {
	isUnsignedMessage_SubMessage()
}

type UnsignedMessage_InformationRequest struct {
	InformationRequest *InformationRequest `protobuf:"bytes,1,opt,name=InformationRequest,proto3,oneof"`
}

type UnsignedMessage_RKEAction struct {
	RKEAction RKEAction_E `protobuf:"varint,2,opt,name=RKEAction,proto3,enum=VCSEC.RKEAction_E,oneof"`
}

type UnsignedMessage_ClosureMoveRequest struct {
	ClosureMoveRequest *ClosureMoveRequest `protobuf:"bytes,4,opt,name=closureMoveRequest,proto3,oneof"`
}

type UnsignedMessage_WhitelistOperation struct {
	WhitelistOperation *WhitelistOperation `protobuf:"bytes,16,opt,name=WhitelistOperation,proto3,oneof"`
}

func (*UnsignedMessage_InformationRequest) isUnsignedMessage_SubMessage() {}

func (*UnsignedMessage_RKEAction) isUnsignedMessage_SubMessage() {}

func (*UnsignedMessage_ClosureMoveRequest) isUnsignedMessage_SubMessage() {}

func (*UnsignedMessage_WhitelistOperation) isUnsignedMessage_SubMessage() {}

type ClosureStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontDriverDoor    ClosureState_E `protobuf:"varint,1,opt,name=frontDriverDoor,proto3,enum=VCSEC.ClosureState_E" json:"frontDriverDoor,omitempty"`
	FrontPassengerDoor ClosureState_E `protobuf:"varint,2,opt,name=frontPassengerDoor,proto3,enum=VCSEC.ClosureState_E" json:"frontPassengerDoor,omitempty"`
	RearDriverDoor     ClosureState_E `protobuf:"varint,3,opt,name=rearDriverDoor,proto3,enum=VCSEC.ClosureState_E" json:"rearDriverDoor,omitempty"`
	RearPassengerDoor  ClosureState_E `protobuf:"varint,4,opt,name=rearPassengerDoor,proto3,enum=VCSEC.ClosureState_E" json:"rearPassengerDoor,omitempty"`
	RearTrunk          ClosureState_E `protobuf:"varint,5,opt,name=rearTrunk,proto3,enum=VCSEC.ClosureState_E" json:"rearTrunk,omitempty"`
	FrontTrunk         ClosureState_E `protobuf:"varint,6,opt,name=frontTrunk,proto3,enum=VCSEC.ClosureState_E" json:"frontTrunk,omitempty"`
	ChargePort         ClosureState_E `protobuf:"varint,7,opt,name=chargePort,proto3,enum=VCSEC.ClosureState_E" json:"chargePort,omitempty"`
	Tonneau            ClosureState_E `protobuf:"varint,8,opt,name=tonneau,proto3,enum=VCSEC.ClosureState_E" json:"tonneau,omitempty"`
}

func (x *ClosureStatuses) Reset() {
	*x = ClosureStatuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosureStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosureStatuses) ProtoMessage() {}

func (x *ClosureStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosureStatuses.ProtoReflect.Descriptor instead.
func (*ClosureStatuses) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{87}
}

func (x *ClosureStatuses) GetFrontDriverDoor() ClosureState_E {
	if x != nil {
		return x.FrontDriverDoor
	}
	return ClosureState_E_CLOSURESTATE_CLOSED
}

func (x *ClosureStatuses) GetFrontPassengerDoor() ClosureState_E {
	if x != nil {
		return x.FrontPassengerDoor
	}
	return ClosureState_E_CLOSURESTATE_CLOSED
}

func (x *ClosureStatuses) GetRearDriverDoor() ClosureState_E {
	if x != nil {
		return x.RearDriverDoor
	}
	return ClosureState_E_CLOSURESTATE_CLOSED
}

func (x *ClosureStatuses) GetRearPassengerDoor() ClosureState_E {
	if x != nil {
		return x.RearPassengerDoor
	}
	return ClosureState_E_CLOSURESTATE_CLOSED
}

func (x *ClosureStatuses) GetRearTrunk() ClosureState_E {
	if x != nil {
		return x.RearTrunk
	}
	return ClosureState_E_CLOSURESTATE_CLOSED
}

func (x *ClosureStatuses) GetFrontTrunk() ClosureState_E {
	if x != nil {
		return x.FrontTrunk
	}
	return ClosureState_E_CLOSURESTATE_CLOSED
}

func (x *ClosureStatuses) GetChargePort() ClosureState_E {
	if x != nil {
		return x.ChargePort
	}
	return ClosureState_E_CLOSURESTATE_CLOSED
}

func (x *ClosureStatuses) GetTonneau() ClosureState_E {
	if x != nil {
		return x.Tonneau
	}
	return ClosureState_E_CLOSURESTATE_CLOSED
}

type DetailedClosureStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TonneauPercentOpen uint32 `protobuf:"varint,1,opt,name=tonneauPercentOpen,proto3" json:"tonneauPercentOpen,omitempty"`
}

func (x *DetailedClosureStatus) Reset() {
	*x = DetailedClosureStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedClosureStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedClosureStatus) ProtoMessage() {}

func (x *DetailedClosureStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedClosureStatus.ProtoReflect.Descriptor instead.
func (*DetailedClosureStatus) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{88}
}

func (x *DetailedClosureStatus) GetTonneauPercentOpen() uint32 {
	if x != nil {
		return x.TonneauPercentOpen
	}
	return 0
}

type VehicleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClosureStatuses       *ClosureStatuses       `protobuf:"bytes,1,opt,name=closureStatuses,proto3" json:"closureStatuses,omitempty"`
	VehicleLockState      VehicleLockState_E     `protobuf:"varint,2,opt,name=vehicleLockState,proto3,enum=VCSEC.VehicleLockState_E" json:"vehicleLockState,omitempty"`
	VehicleSleepStatus    VehicleSleepStatus_E   `protobuf:"varint,3,opt,name=vehicleSleepStatus,proto3,enum=VCSEC.VehicleSleepStatus_E" json:"vehicleSleepStatus,omitempty"`
	UserPresence          UserPresence_E         `protobuf:"varint,4,opt,name=userPresence,proto3,enum=VCSEC.UserPresence_E" json:"userPresence,omitempty"`
	DetailedClosureStatus *DetailedClosureStatus `protobuf:"bytes,5,opt,name=detailedClosureStatus,proto3" json:"detailedClosureStatus,omitempty"`
}

func (x *VehicleStatus) Reset() {
	*x = VehicleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStatus) ProtoMessage() {}

func (x *VehicleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStatus.ProtoReflect.Descriptor instead.
func (*VehicleStatus) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{89}
}

func (x *VehicleStatus) GetClosureStatuses() *ClosureStatuses {
	if x != nil {
		return x.ClosureStatuses
	}
	return nil
}

func (x *VehicleStatus) GetVehicleLockState() VehicleLockState_E {
	if x != nil {
		return x.VehicleLockState
	}
	return VehicleLockState_E_VEHICLELOCKSTATE_UNLOCKED
}

func (x *VehicleStatus) GetVehicleSleepStatus() VehicleSleepStatus_E {
	if x != nil {
		return x.VehicleSleepStatus
	}
	return VehicleSleepStatus_E_VEHICLE_SLEEP_STATUS_UNKNOWN
}

func (x *VehicleStatus) GetUserPresence() UserPresence_E {
	if x != nil {
		return x.UserPresence
	}
	return UserPresence_E_VEHICLE_USER_PRESENCE_UNKNOWN
}

func (x *VehicleStatus) GetDetailedClosureStatus() *DetailedClosureStatus {
	if x != nil {
		return x.DetailedClosureStatus
	}
	return nil
}

type FromVCSECMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubMessage:
	//
	//	*FromVCSECMessage_VehicleStatus
	//	*FromVCSECMessage_SessionInfo
	//	*FromVCSECMessage_AuthenticationRequest
	//	*FromVCSECMessage_CommandStatus
	//	*FromVCSECMessage_PersonalizationInformation
	//	*FromVCSECMessage_WhitelistInfo
	//	*FromVCSECMessage_WhitelistEntryInfo
	//	*FromVCSECMessage_VehicleInfo
	//	*FromVCSECMessage_Capabilities
	//	*FromVCSECMessage_KeyStatusInfo
	//	*FromVCSECMessage_ActiveKey
	//	*FromVCSECMessage_UnknownKeyInfo
	//	*FromVCSECMessage_UIRequest
	//	*FromVCSECMessage_UpdaterCommand
	//	*FromVCSECMessage_GenealogyRequest
	//	*FromVCSECMessage_SleepManagerRequest
	//	*FromVCSECMessage_ImuRequest
	//	*FromVCSECMessage_NfcseRequest
	//	*FromVCSECMessage_TPDataRequest
	//	*FromVCSECMessage_ResetTrackerCommand
	//	*FromVCSECMessage_TPNotifyTrackerCommand
	//	*FromVCSECMessage_SetTPConfiguration
	//	*FromVCSECMessage_UnsecureNotification
	//	*FromVCSECMessage_EpochSessionInfo
	//	*FromVCSECMessage_ToRCICommand
	//	*FromVCSECMessage_RciControl
	//	*FromVCSECMessage_BLEConfigCommand
	//	*FromVCSECMessage_AppDeviceInfoRequest
	//	*FromVCSECMessage_Alert
	//	*FromVCSECMessage_NominalError
	//	*FromVCSECMessage_MISessionRequest
	//	*FromVCSECMessage_MISessionStop
	//	*FromVCSECMessage_ClearTPMSAlarms
	//	*FromVCSECMessage_CertificateRead
	//	*FromVCSECMessage_ChallengeCommand
	//	*FromVCSECMessage_PublicKeyRequest
	SubMessage isFromVCSECMessage_SubMessage `protobuf_oneof:"sub_message"`
}

func (x *FromVCSECMessage) Reset() {
	*x = FromVCSECMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vcsec_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromVCSECMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromVCSECMessage) ProtoMessage() {}

func (x *FromVCSECMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vcsec_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromVCSECMessage.ProtoReflect.Descriptor instead.
func (*FromVCSECMessage) Descriptor() ([]byte, []int) {
	return file_vcsec_proto_rawDescGZIP(), []int{90}
}

func (m *FromVCSECMessage) GetSubMessage() isFromVCSECMessage_SubMessage {
	if m != nil {
		return m.SubMessage
	}
	return nil
}

func (x *FromVCSECMessage) GetVehicleStatus() *VehicleStatus {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_VehicleStatus); ok {
		return x.VehicleStatus
	}
	return nil
}

func (x *FromVCSECMessage) GetSessionInfo() *signatures.SessionInfo {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_SessionInfo); ok {
		return x.SessionInfo
	}
	return nil
}

func (x *FromVCSECMessage) GetAuthenticationRequest() *AuthenticationRequest {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_AuthenticationRequest); ok {
		return x.AuthenticationRequest
	}
	return nil
}

func (x *FromVCSECMessage) GetCommandStatus() *CommandStatus {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_CommandStatus); ok {
		return x.CommandStatus
	}
	return nil
}

func (x *FromVCSECMessage) GetPersonalizationInformation() *PersonalizationInformation {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_PersonalizationInformation); ok {
		return x.PersonalizationInformation
	}
	return nil
}

func (x *FromVCSECMessage) GetWhitelistInfo() *WhitelistInfo {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_WhitelistInfo); ok {
		return x.WhitelistInfo
	}
	return nil
}

func (x *FromVCSECMessage) GetWhitelistEntryInfo() *WhitelistEntryInfo {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_WhitelistEntryInfo); ok {
		return x.WhitelistEntryInfo
	}
	return nil
}

func (x *FromVCSECMessage) GetVehicleInfo() *VehicleInfo {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_VehicleInfo); ok {
		return x.VehicleInfo
	}
	return nil
}

func (x *FromVCSECMessage) GetCapabilities() *Capabilities {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_Capabilities); ok {
		return x.Capabilities
	}
	return nil
}

func (x *FromVCSECMessage) GetKeyStatusInfo() *KeyStatusInfo {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_KeyStatusInfo); ok {
		return x.KeyStatusInfo
	}
	return nil
}

func (x *FromVCSECMessage) GetActiveKey() *ActiveKey {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_ActiveKey); ok {
		return x.ActiveKey
	}
	return nil
}

func (x *FromVCSECMessage) GetUnknownKeyInfo() *UnknownKeyInfo {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_UnknownKeyInfo); ok {
		return x.UnknownKeyInfo
	}
	return nil
}

func (x *FromVCSECMessage) GetUIRequest() UIRequest_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_UIRequest); ok {
		return x.UIRequest
	}
	return UIRequest_E_UI_REQUEST_NONE
}

func (x *FromVCSECMessage) GetUpdaterCommand() *UpdaterCommand {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_UpdaterCommand); ok {
		return x.UpdaterCommand
	}
	return nil
}

func (x *FromVCSECMessage) GetGenealogyRequest() GenealogyRequest_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_GenealogyRequest); ok {
		return x.GenealogyRequest
	}
	return GenealogyRequest_E_GENEALOGYREQUEST_NONE
}

func (x *FromVCSECMessage) GetSleepManagerRequest() *SleepManagerRequest {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_SleepManagerRequest); ok {
		return x.SleepManagerRequest
	}
	return nil
}

func (x *FromVCSECMessage) GetImuRequest() IMURequest_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_ImuRequest); ok {
		return x.ImuRequest
	}
	return IMURequest_E_IMU_REQUEST_NONE
}

func (x *FromVCSECMessage) GetNfcseRequest() NFCSERequest_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_NfcseRequest); ok {
		return x.NfcseRequest
	}
	return NFCSERequest_E_NFCSE_REQUEST_NONE
}

func (x *FromVCSECMessage) GetTPDataRequest() TPDataRequest_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_TPDataRequest); ok {
		return x.TPDataRequest
	}
	return TPDataRequest_E_TP_DATAREQUEST_NONE
}

func (x *FromVCSECMessage) GetResetTrackerCommand() ResetTrackerCommand_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_ResetTrackerCommand); ok {
		return x.ResetTrackerCommand
	}
	return ResetTrackerCommand_E_RESETTRACKER_COMMAND_NONE
}

func (x *FromVCSECMessage) GetTPNotifyTrackerCommand() TPNotifyTrackerCommand_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_TPNotifyTrackerCommand); ok {
		return x.TPNotifyTrackerCommand
	}
	return TPNotifyTrackerCommand_E_TP_NOTIFYTRACKER_COMMAND_NONE
}

func (x *FromVCSECMessage) GetSetTPConfiguration() *SetTPConfiguration {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_SetTPConfiguration); ok {
		return x.SetTPConfiguration
	}
	return nil
}

func (x *FromVCSECMessage) GetUnsecureNotification() *UnsecureNotification {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_UnsecureNotification); ok {
		return x.UnsecureNotification
	}
	return nil
}

func (x *FromVCSECMessage) GetEpochSessionInfo() *signatures.SessionInfo {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_EpochSessionInfo); ok {
		return x.EpochSessionInfo
	}
	return nil
}

func (x *FromVCSECMessage) GetToRCICommand() *ToRCI {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_ToRCICommand); ok {
		return x.ToRCICommand
	}
	return nil
}

func (x *FromVCSECMessage) GetRciControl() RCIControl_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_RciControl); ok {
		return x.RciControl
	}
	return RCIControl_E_RCI_CONTROL_NONE
}

func (x *FromVCSECMessage) GetBLEConfigCommand() *BLEConfigCommand {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_BLEConfigCommand); ok {
		return x.BLEConfigCommand
	}
	return nil
}

func (x *FromVCSECMessage) GetAppDeviceInfoRequest() AppDeviceInfoRequest_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_AppDeviceInfoRequest); ok {
		return x.AppDeviceInfoRequest
	}
	return AppDeviceInfoRequest_E_APP_DEVICE_INFO_REQUEST_NONE
}

func (x *FromVCSECMessage) GetAlert() *Alert {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_Alert); ok {
		return x.Alert
	}
	return nil
}

func (x *FromVCSECMessage) GetNominalError() *errors.NominalError {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_NominalError); ok {
		return x.NominalError
	}
	return nil
}

func (x *FromVCSECMessage) GetMISessionRequest() *MISessionRequest {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_MISessionRequest); ok {
		return x.MISessionRequest
	}
	return nil
}

func (x *FromVCSECMessage) GetMISessionStop() *MISessionStop {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_MISessionStop); ok {
		return x.MISessionStop
	}
	return nil
}

func (x *FromVCSECMessage) GetClearTPMSAlarms() *TPMSAlarms {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_ClearTPMSAlarms); ok {
		return x.ClearTPMSAlarms
	}
	return nil
}

func (x *FromVCSECMessage) GetCertificateRead() *CertificateRead {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_CertificateRead); ok {
		return x.CertificateRead
	}
	return nil
}

func (x *FromVCSECMessage) GetChallengeCommand() *ChallengeCommand {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_ChallengeCommand); ok {
		return x.ChallengeCommand
	}
	return nil
}

func (x *FromVCSECMessage) GetPublicKeyRequest() PublicKeyRequest_E {
	if x, ok := x.GetSubMessage().(*FromVCSECMessage_PublicKeyRequest); ok {
		return x.PublicKeyRequest
	}
	return PublicKeyRequest_E_PUBLIC_KEY_REQUEST_NONE
}

type isFromVCSECMessage_SubMessage interface {
	isFromVCSECMessage_SubMessage()
}

type FromVCSECMessage_VehicleStatus struct {
	VehicleStatus *VehicleStatus `protobuf:"bytes,1,opt,name=vehicleStatus,proto3,oneof"`
}

type FromVCSECMessage_SessionInfo struct {
	// BD Modified (added) - Begin
	SessionInfo *signatures.SessionInfo `protobuf:"bytes,2,opt,name=sessionInfo,proto3,oneof"`
}

type FromVCSECMessage_AuthenticationRequest struct {
	AuthenticationRequest *AuthenticationRequest `protobuf:"bytes,3,opt,name=authenticationRequest,proto3,oneof"`
}

type FromVCSECMessage_CommandStatus struct {
	// BD Modified (added) - End
	CommandStatus *CommandStatus `protobuf:"bytes,4,opt,name=commandStatus,proto3,oneof"`
}

type FromVCSECMessage_PersonalizationInformation struct {
	// BD Modified (added) - Begin
	PersonalizationInformation *PersonalizationInformation `protobuf:"bytes,5,opt,name=personalizationInformation,proto3,oneof"`
}

type FromVCSECMessage_WhitelistInfo struct {
	// BD Modified (added) - End
	WhitelistInfo *WhitelistInfo `protobuf:"bytes,16,opt,name=whitelistInfo,proto3,oneof"`
}

type FromVCSECMessage_WhitelistEntryInfo struct {
	WhitelistEntryInfo *WhitelistEntryInfo `protobuf:"bytes,17,opt,name=whitelistEntryInfo,proto3,oneof"`
}

type FromVCSECMessage_VehicleInfo struct {
	// BD Modified (added) - Begin
	VehicleInfo *VehicleInfo `protobuf:"bytes,18,opt,name=vehicleInfo,proto3,oneof"`
}

type FromVCSECMessage_Capabilities struct {
	Capabilities *Capabilities `protobuf:"bytes,19,opt,name=capabilities,proto3,oneof"`
}

type FromVCSECMessage_KeyStatusInfo struct {
	KeyStatusInfo *KeyStatusInfo `protobuf:"bytes,21,opt,name=keyStatusInfo,proto3,oneof"`
}

type FromVCSECMessage_ActiveKey struct {
	ActiveKey *ActiveKey `protobuf:"bytes,22,opt,name=activeKey,proto3,oneof"`
}

type FromVCSECMessage_UnknownKeyInfo struct {
	UnknownKeyInfo *UnknownKeyInfo `protobuf:"bytes,23,opt,name=unknownKeyInfo,proto3,oneof"`
}

type FromVCSECMessage_UIRequest struct {
	UIRequest UIRequest_E `protobuf:"varint,24,opt,name=UIRequest,proto3,enum=VCSEC.UIRequest_E,oneof"`
}

type FromVCSECMessage_UpdaterCommand struct {
	UpdaterCommand *UpdaterCommand `protobuf:"bytes,30,opt,name=updaterCommand,proto3,oneof"`
}

type FromVCSECMessage_GenealogyRequest struct {
	GenealogyRequest GenealogyRequest_E `protobuf:"varint,31,opt,name=genealogyRequest,proto3,enum=VCSEC.GenealogyRequest_E,oneof"`
}

type FromVCSECMessage_SleepManagerRequest struct {
	SleepManagerRequest *SleepManagerRequest `protobuf:"bytes,32,opt,name=sleepManagerRequest,proto3,oneof"`
}

type FromVCSECMessage_ImuRequest struct {
	ImuRequest IMURequest_E `protobuf:"varint,33,opt,name=imuRequest,proto3,enum=VCSEC.IMURequest_E,oneof"`
}

type FromVCSECMessage_NfcseRequest struct {
	NfcseRequest NFCSERequest_E `protobuf:"varint,34,opt,name=nfcseRequest,proto3,enum=VCSEC.NFCSERequest_E,oneof"`
}

type FromVCSECMessage_TPDataRequest struct {
	TPDataRequest TPDataRequest_E `protobuf:"varint,35,opt,name=TPDataRequest,proto3,enum=VCSEC.TPDataRequest_E,oneof"`
}

type FromVCSECMessage_ResetTrackerCommand struct {
	ResetTrackerCommand ResetTrackerCommand_E `protobuf:"varint,36,opt,name=resetTrackerCommand,proto3,enum=VCSEC.ResetTrackerCommand_E,oneof"`
}

type FromVCSECMessage_TPNotifyTrackerCommand struct {
	TPNotifyTrackerCommand TPNotifyTrackerCommand_E `protobuf:"varint,37,opt,name=TPNotifyTrackerCommand,proto3,enum=VCSEC.TPNotifyTrackerCommand_E,oneof"`
}

type FromVCSECMessage_SetTPConfiguration struct {
	SetTPConfiguration *SetTPConfiguration `protobuf:"bytes,38,opt,name=setTPConfiguration,proto3,oneof"`
}

type FromVCSECMessage_UnsecureNotification struct {
	UnsecureNotification *UnsecureNotification `protobuf:"bytes,39,opt,name=unsecureNotification,proto3,oneof"`
}

type FromVCSECMessage_EpochSessionInfo struct {
	EpochSessionInfo *signatures.SessionInfo `protobuf:"bytes,40,opt,name=epochSessionInfo,proto3,oneof"`
}

type FromVCSECMessage_ToRCICommand struct {
	ToRCICommand *ToRCI `protobuf:"bytes,41,opt,name=toRCICommand,proto3,oneof"`
}

type FromVCSECMessage_RciControl struct {
	RciControl RCIControl_E `protobuf:"varint,42,opt,name=rciControl,proto3,enum=VCSEC.RCIControl_E,oneof"`
}

type FromVCSECMessage_BLEConfigCommand struct {
	BLEConfigCommand *BLEConfigCommand `protobuf:"bytes,43,opt,name=BLEConfigCommand,proto3,oneof"`
}

type FromVCSECMessage_AppDeviceInfoRequest struct {
	AppDeviceInfoRequest AppDeviceInfoRequest_E `protobuf:"varint,44,opt,name=appDeviceInfoRequest,proto3,enum=VCSEC.AppDeviceInfoRequest_E,oneof"`
}

type FromVCSECMessage_Alert struct {
	Alert *Alert `protobuf:"bytes,45,opt,name=alert,proto3,oneof"`
}

type FromVCSECMessage_NominalError struct {
	// BD Modified (added) - End
	NominalError *errors.NominalError `protobuf:"bytes,46,opt,name=nominalError,proto3,oneof"`
}

type FromVCSECMessage_MISessionRequest struct {
	// BD Modified (added) - Begin
	MISessionRequest *MISessionRequest `protobuf:"bytes,47,opt,name=MISessionRequest,proto3,oneof"`
}

type FromVCSECMessage_MISessionStop struct {
	MISessionStop *MISessionStop `protobuf:"bytes,48,opt,name=MISessionStop,proto3,oneof"`
}

type FromVCSECMessage_ClearTPMSAlarms struct {
	ClearTPMSAlarms *TPMSAlarms `protobuf:"bytes,49,opt,name=clearTPMSAlarms,proto3,oneof"`
}

type FromVCSECMessage_CertificateRead struct {
	CertificateRead *CertificateRead `protobuf:"bytes,50,opt,name=certificateRead,proto3,oneof"`
}

type FromVCSECMessage_ChallengeCommand struct {
	ChallengeCommand *ChallengeCommand `protobuf:"bytes,51,opt,name=challengeCommand,proto3,oneof"`
}

type FromVCSECMessage_PublicKeyRequest struct {
	PublicKeyRequest PublicKeyRequest_E `protobuf:"varint,52,opt,name=publicKeyRequest,proto3,enum=VCSEC.PublicKeyRequest_E,oneof"` // BD Modified (added) - End
}

func (*FromVCSECMessage_VehicleStatus) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_SessionInfo) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_AuthenticationRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_CommandStatus) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_PersonalizationInformation) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_WhitelistInfo) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_WhitelistEntryInfo) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_VehicleInfo) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_Capabilities) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_KeyStatusInfo) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_ActiveKey) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_UnknownKeyInfo) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_UIRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_UpdaterCommand) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_GenealogyRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_SleepManagerRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_ImuRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_NfcseRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_TPDataRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_ResetTrackerCommand) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_TPNotifyTrackerCommand) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_SetTPConfiguration) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_UnsecureNotification) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_EpochSessionInfo) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_ToRCICommand) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_RciControl) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_BLEConfigCommand) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_AppDeviceInfoRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_Alert) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_NominalError) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_MISessionRequest) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_MISessionStop) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_ClearTPMSAlarms) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_CertificateRead) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_ChallengeCommand) isFromVCSECMessage_SubMessage() {}

func (*FromVCSECMessage_PublicKeyRequest) isFromVCSECMessage_SubMessage() {}

var File_vcsec_proto protoreflect.FileDescriptor

var file_vcsec_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x76, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x56,
	0x43, 0x53, 0x45, 0x43, 0x1a, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x41, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x78, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x78, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x47, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x5f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x7a, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x47, 0x22, 0x3f, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x69,
	0x0a, 0x1c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x75, 0x6c,
	0x6c, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x1c, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x1c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x74, 0x4d, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x56,
	0x43, 0x53, 0x45, 0x43, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x45, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xe7, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x29, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x70, 0x70, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x55, 0x57, 0x42, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x55, 0x57, 0x42, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x55, 0x57, 0x42, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x41,
	0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x74, 0x0a, 0x1d, 0x70, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1d, 0x70, 0x65, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x53, 0x0a,
	0x25, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x22, 0x56, 0x0a, 0x0b, 0x41, 0x53, 0x49, 0x43, 0x53, 0x50, 0x49, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x45, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x45, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x45, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x16, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x45,
	0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x70, 0x0a, 0x09, 0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0b,
	0x41, 0x44, 0x56, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0b, 0x41, 0x44, 0x56, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x30, 0x0a, 0x12, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x60, 0x0a, 0x0c, 0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x6c,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x44, 0x56, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x41, 0x44, 0x56, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x14, 0x42, 0x4c, 0x45, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x42,
	0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x52, 0x14, 0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x42,
	0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x60, 0x0a, 0x0c, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x69, 0x0a,
	0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x12,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x48, 0x00, 0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a,
	0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x6f, 0x52, 0x65,
	0x61, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x56, 0x43,
	0x53, 0x45, 0x43, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x30, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xac, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13,
	0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xdb,
	0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x61, 0x64, 0x43,
	0x52, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x61, 0x64, 0x43, 0x52, 0x43, 0x43, 0x6f,
	0x6e, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x07, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x43, 0x49, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4f, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x61,
	0x6c, 0x6f, 0x67, 0x79, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xea, 0x09, 0x0a, 0x2c, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x45, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x53, 0x53, 0x49, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x52, 0x53, 0x53, 0x49, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x53, 0x53, 0x49, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x52, 0x53, 0x53, 0x49, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x53, 0x53, 0x49, 0x52, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x52, 0x53, 0x53, 0x49, 0x52, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x53, 0x53, 0x49,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x52, 0x53,
	0x53, 0x49, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x53, 0x53, 0x49,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x52, 0x53, 0x53,
	0x49, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x53, 0x53, 0x49, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x52,
	0x53, 0x53, 0x49, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x52, 0x53, 0x53, 0x49, 0x4e, 0x46, 0x43, 0x43, 0x72, 0x61, 0x64, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0d, 0x52, 0x53, 0x53, 0x49, 0x4e, 0x46, 0x43, 0x43, 0x72, 0x61, 0x64,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x53, 0x53, 0x49, 0x52, 0x65, 0x61, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x52, 0x53, 0x53, 0x49, 0x52, 0x65,
	0x61, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x53, 0x53, 0x49, 0x52, 0x65,
	0x61, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x52,
	0x53, 0x53, 0x49, 0x52, 0x65, 0x61, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x69, 0x67,
	0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x69,
	0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x69, 0x67,
	0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x61, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x69, 0x67,
	0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x61, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65,
	0x61, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x4e, 0x46,
	0x43, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x4e, 0x46, 0x43, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x42, 0x61, 0x79, 0x65, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x61, 0x79, 0x65, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x61, 0x79, 0x65, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x61, 0x79, 0x65, 0x73, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x61,
	0x77, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x61, 0x79, 0x65, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x61,
	0x77, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x61, 0x79, 0x65, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x61, 0x77, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x42, 0x61, 0x79, 0x65, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x72, 0x61, 0x77, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x42, 0x61, 0x79, 0x65, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x66, 0x6f, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x43, 0x52, 0x43, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x43, 0x52, 0x43, 0x12, 0x2b, 0x0a, 0x11, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x56,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x56, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x43,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x43, 0x22, 0xa3, 0x02, 0x0a, 0x09,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x6e, 0x66, 0x63, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x56, 0x43, 0x53,
	0x45, 0x43, 0x2e, 0x4e, 0x46, 0x43, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b,
	0x6e, 0x66, 0x63, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x42, 0x4c, 0x45, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d,
	0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x22, 0x43, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x13, 0x4d, 0x49, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x70, 0x0a, 0x10, 0x4d, 0x49, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x4d, 0x49, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x4d, 0x49, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4d, 0x49,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x13, 0x4d, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x56, 0x43,
	0x53, 0x45, 0x43, 0x2e, 0x4d, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x45, 0x48, 0x00, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x0d, 0x4d, 0x49, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x10, 0x4d, 0x49, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x03, 0x0a,
	0x0a, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4e,
	0x46, 0x43, 0x53, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4e,
	0x46, 0x43, 0x53, 0x45, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x12, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x11,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x4e, 0x46, 0x43, 0x53, 0x45, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x14, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53,
	0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x2e, 0x0a, 0x1a, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x56, 0x49, 0x4e, 0x22, 0x94, 0x02, 0x0a, 0x10,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43,
	0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x0c,
	0x52, 0x43, 0x49, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x22, 0x99, 0x05, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44,
	0x75, 0x65, 0x54, 0x6f, 0x56, 0x44, 0x44, 0x53, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44,
	0x75, 0x65, 0x54, 0x6f, 0x56, 0x44, 0x44, 0x53, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f,
	0x56, 0x44, 0x44, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x56,
	0x44, 0x44, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x56, 0x44, 0x44, 0x52, 0x4c, 0x6f,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x56, 0x44, 0x44, 0x52, 0x4c, 0x6f,
	0x73, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0x40, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44,
	0x75, 0x65, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x4e, 0x0a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44,
	0x75, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x57, 0x61,
	0x6b, 0x65, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x4e, 0x0a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44,
	0x75, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x43,
	0x4b, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x57, 0x61,
	0x6b, 0x65, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x43, 0x4b, 0x4e, 0x6f, 0x69, 0x73, 0x65,
	0x22, 0x7a, 0x0a, 0x18, 0x52, 0x46, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x52, 0x46, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x52, 0x46, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x61, 0x64, 0x76, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x64, 0x76, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x54, 0x50, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x56, 0x0a, 0x12,
	0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x56, 0x43,
	0x53, 0x45, 0x43, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x45, 0x48, 0x00, 0x52, 0x13, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x11, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x77, 0x61, 0x6b, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x77, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x69, 0x73, 0x42,
	0x4c, 0x45, 0x54, 0x72, 0x69, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x42, 0x4c, 0x45, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x52, 0x49, 0x4d, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x45, 0x52, 0x10, 0x69, 0x73, 0x42, 0x4c, 0x45, 0x54, 0x72, 0x69,
	0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x05, 0x54, 0x6f, 0x52, 0x43, 0x49, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x48, 0x4d,
	0x41, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x72,
	0x63, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x52, 0x43, 0x49, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x63, 0x69, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x05, 0x54, 0x50, 0x41, 0x64, 0x76,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x54, 0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x54,
	0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x45, 0x52,
	0x0e, 0x54, 0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x56, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x56, 0x12, 0x2c, 0x0a, 0x11,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x54, 0x50,
	0x4d, 0x53, 0x41, 0x64, 0x76, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x54, 0x50, 0x4d, 0x53, 0x41, 0x64, 0x76, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x52, 0x0b, 0x54, 0x50, 0x4d, 0x53, 0x41, 0x64, 0x76, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x7c, 0x0a, 0x0e, 0x54, 0x50, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x41, 0x64, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x41, 0x64, 0x76, 0x12, 0x44, 0x0a, 0x1d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x54, 0x50, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a,
	0x0c, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x54, 0x50, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x06, 0x54, 0x50, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x54, 0x50, 0x4c, 0x52, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x4c, 0x52, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4c, 0x52, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x45, 0x52, 0x11, 0x4c, 0x52, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x78, 0x39, 0x30, 0x64, 0x65, 0x67, 0x43, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x78, 0x39, 0x30, 0x64, 0x65, 0x67, 0x43,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x78, 0x32, 0x37, 0x30, 0x64, 0x65, 0x67, 0x43, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x78, 0x32, 0x37, 0x30, 0x64, 0x65, 0x67, 0x43,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x7a, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x7a, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x7a, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x43, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x7a, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66,
	0x43, 0x6e, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x0e, 0x54, 0x50, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4d, 0x4c, 0x58, 0x57, 0x61, 0x6b, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x45, 0x52, 0x0c, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x54, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x50, 0x54, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d,
	0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x0a, 0x54,
	0x50, 0x4d, 0x53, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x46, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x46, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x0f, 0x54, 0x50, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x22, 0xf0, 0x03, 0x0a, 0x14, 0x54, 0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x54, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x50, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x6f, 0x76, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x2c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x46, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x12, 0x54, 0x50, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x14,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4d, 0x4c, 0x58,
	0x57, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x45, 0x52, 0x14, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d,
	0x6f, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x4d, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x22, 0x78, 0x0a, 0x0f,
	0x54, 0x50, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x49, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x54, 0x49, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x12, 0x1c, 0x0a, 0x09, 0x4d,
	0x4c, 0x58, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x4d, 0x4c, 0x58, 0x41, 0x70, 0x70, 0x43, 0x52, 0x43, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x56, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x56, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56,
	0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x6b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56,
	0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x6b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x78, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x0f,
	0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22,
	0xe1, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x12,
	0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4e,
	0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x41, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56, 0x43,
	0x53, 0x45, 0x43, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x12, 0x24,
	0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x63, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x15, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x30, 0x0a, 0x12, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x4c, 0x45, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x56, 0x49, 0x4e, 0x22, 0x5d, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6e,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53,
	0x45, 0x43, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x4c, 0x0a,
	0x0e, 0x54, 0x6f, 0x56, 0x43, 0x53, 0x45, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3a, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x0d, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x48, 0x41, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x48,
	0x41, 0x31, 0x22, 0x49, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d,
	0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x2f, 0x0a,
	0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x77, 0x22, 0x97,
	0x01, 0x0a, 0x0d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xe7, 0x02, 0x0a, 0x12, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x45, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a,
	0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x4b, 0x65, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x52, 0x6f,
	0x6c, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8c, 0x04, 0x0a, 0x12,
	0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43,
	0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x52, 0x12, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72,
	0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x44, 0x6f,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x45, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x44, 0x6f,
	0x6f, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x72, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x52, 0x11, 0x72, 0x65, 0x61, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x52, 0x09, 0x72, 0x65, 0x61, 0x72, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x6f, 0x6e, 0x6e, 0x65, 0x61,
	0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x45, 0x52, 0x07, 0x74, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56,
	0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54,
	0x6f, 0x42, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x42, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x73,
	0x6c, 0x6f, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x54, 0x6f, 0x41, 0x64,
	0x64, 0x12, 0x24, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x6b, 0x65, 0x79,
	0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0xa8, 0x07, 0x0a, 0x12, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x17, 0x61, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x19, 0x61, 0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x61, 0x0a, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x69, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x22, 0x61, 0x64, 0x64, 0x4b, 0x65,
	0x79, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a,
	0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x61, 0x64, 0x64, 0x49, 0x6d, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x69, 0x0a, 0x22, 0x61,
	0x64, 0x64, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x22, 0x61, 0x64, 0x64, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6c, 0x6c, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x19, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x6d, 0x0a, 0x1d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x45, 0x52, 0x1d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56,
	0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x18,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x45, 0x52, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x02, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x45, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x18, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x18, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xd9, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x52, 0x4b, 0x45, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x52,
	0x4b, 0x45, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x48, 0x00, 0x52, 0x09, 0x52, 0x4b,
	0x45, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0xf1,
	0x03, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x56, 0x43,
	0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x45, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x44,
	0x6f, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x65,
	0x61, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x72, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x72, 0x65, 0x61,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x11, 0x72, 0x65, 0x61,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x44, 0x6f, 0x6f, 0x72, 0x12, 0x33,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x72, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x09, 0x72, 0x65, 0x61, 0x72, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x52, 0x07, 0x74, 0x6f, 0x6e, 0x6e, 0x65,
	0x61, 0x75, 0x22, 0x47, 0x0a, 0x15, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x6e, 0x6e, 0x65, 0x61, 0x75,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xf4, 0x02, 0x0a, 0x0d,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x0f,
	0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x45, 0x52, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x52,
	0x12, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x45,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x52,
	0x0a, 0x15, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xa2, 0x13, 0x0a, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x54, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63, 0x0a, 0x1a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x56, 0x43, 0x53,
	0x45, 0x43, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x12, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x56, 0x43,
	0x53, 0x45, 0x43, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x6b, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x56, 0x43, 0x53,
	0x45, 0x43, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x09, 0x55, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x45, 0x48, 0x00, 0x52, 0x09, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x47, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x45, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x6c, 0x65, 0x65,
	0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x6d, 0x75, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x56,
	0x43, 0x53, 0x45, 0x43, 0x2e, 0x49, 0x4d, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x45, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6d, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x0c, 0x6e, 0x66, 0x63, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4e, 0x46,
	0x43, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x48, 0x00, 0x52, 0x0c,
	0x6e, 0x66, 0x63, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d,
	0x54, 0x50, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x54, 0x50, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x48, 0x00, 0x52, 0x0d, 0x54,
	0x50, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x56, 0x43, 0x53, 0x45,
	0x43, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x45, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x59,
	0x0a, 0x16, 0x54, 0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x54, 0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x45, 0x48,
	0x00, 0x52, 0x16, 0x54, 0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x65, 0x74,
	0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x53, 0x65,
	0x74, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x55, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x14, 0x75, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x32, 0x0a, 0x0c, 0x74, 0x6f, 0x52, 0x43, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x54,
	0x6f, 0x52, 0x43, 0x49, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x6f, 0x52, 0x43, 0x49, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x52, 0x43, 0x49, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x45, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x63, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x10,
	0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x42,
	0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x10, 0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45,
	0x48, 0x00, 0x52, 0x14, 0x61, 0x70, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x3a,
	0x0a, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x4d, 0x49,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x4d, 0x49, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x4d, 0x49, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x4d, 0x49, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x4d, 0x49, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x00,
	0x52, 0x0d, 0x4d, 0x49, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x3d, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x50, 0x4d, 0x53, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43,
	0x2e, 0x54, 0x50, 0x4d, 0x53, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x54, 0x50, 0x4d, 0x53, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x42,
	0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x56,
	0x43, 0x53, 0x45, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x56, 0x43, 0x53, 0x45, 0x43, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x48, 0x00,
	0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x0b, 0x2a, 0x6e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x46, 0x49, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x4d,
	0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x61, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x4c, 0x45,
	0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x68, 0x0a, 0x16, 0x41, 0x70,
	0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x01, 0x2a, 0x37, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x2a, 0x77, 0x0a,
	0x15, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44,
	0x52, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0xac, 0x04, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x45, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47,
	0x54, 0x57, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x49, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x04, 0x12, 0x3c, 0x0a,
	0x38, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x52, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x3c, 0x0a, 0x38, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x49, 0x4f, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x38, 0x0a, 0x34, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x4f,
	0x52, 0x10, 0x07, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57,
	0x41, 0x4c, 0x4b, 0x5f, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x09, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x49,
	0x5a, 0x45, 0x52, 0x10, 0x0a, 0x2a, 0xc0, 0x01, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a, 0x1a, 0x42, 0x4c, 0x45,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x52, 0x49, 0x4d, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x45, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x4c, 0x45, 0x5f, 0x41,
	0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x54, 0x52, 0x49, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x16, 0x42, 0x4c, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x0b, 0x42, 0x4c, 0x45, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x76, 0x0a, 0x13, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x45, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x45, 0x52, 0x49, 0x54, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45,
	0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45,
	0x4e, 0x10, 0x02, 0x2a, 0xaa, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03,
	0x2a, 0xbd, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x4f, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x2a, 0x9b, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x4e, 0x45, 0x41,
	0x4c, 0x4f, 0x47, 0x59, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f, 0x47, 0x59, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f, 0x47, 0x59, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4b, 0x45, 0x59, 0x46, 0x4f, 0x42, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f, 0x47, 0x59,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x50, 0x57, 0x48, 0x45, 0x45, 0x4c, 0x55,
	0x4e, 0x49, 0x54, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x2a, 0x80,
	0x02, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f, 0x47,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f,
	0x47, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x45, 0x4e,
	0x45, 0x41, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x47, 0x45, 0x4e, 0x45, 0x41, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x06, 0x2a, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x2a, 0xf9, 0x02, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x55,
	0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x45,
	0x44, 0x5f, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50,
	0x55, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45,
	0x4e, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x48,
	0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x55,
	0x4e, 0x4b, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50,
	0x55, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x55,
	0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x4f, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x50, 0x55, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50, 0x55,
	0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x09, 0x2a, 0xac, 0x01, 0x0a,
	0x0c, 0x49, 0x4d, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4d, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4d, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x49, 0x4d, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49,
	0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x49, 0x4d, 0x55, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x0a, 0x49,
	0x4d, 0x55, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4d, 0x55,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x55, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x4d, 0x55, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x2a, 0xc1, 0x01, 0x0a, 0x13, 0x4c, 0x52,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x45, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x52, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x58,
	0x43, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x52, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4e, 0x45, 0x47, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22,
	0x4c, 0x52, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x52, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x52, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x2a, 0xa7, 0x02,
	0x0a, 0x09, 0x4d, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x2a, 0xc2, 0x06, 0x0a, 0x0f, 0x4d, 0x4c, 0x58, 0x57,
	0x61, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x45, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x32, 0x5f, 0x4d,
	0x53, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x33, 0x5f, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x35, 0x5f, 0x4d,
	0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x31, 0x35, 0x5f, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x33, 0x30,
	0x5f, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x35, 0x30, 0x5f, 0x4d, 0x53, 0x10, 0x05, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x31, 0x30, 0x30, 0x5f, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4c, 0x58, 0x57,
	0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x31, 0x35, 0x30, 0x5f, 0x4d, 0x53,
	0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x32, 0x35, 0x30, 0x5f, 0x4d, 0x53, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x35, 0x30,
	0x30, 0x5f, 0x4d, 0x53, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b,
	0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x31, 0x5f, 0x53, 0x10, 0x0a, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x32,
	0x5f, 0x53, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x32, 0x5f, 0x35, 0x5f, 0x53, 0x10, 0x0c, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x33,
	0x5f, 0x53, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x34, 0x5f, 0x53, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x35, 0x5f, 0x53,
	0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x36, 0x5f, 0x53, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x58,
	0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x37, 0x5f, 0x53, 0x10, 0x11,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x38, 0x5f, 0x53, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41,
	0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x39, 0x5f, 0x53, 0x10, 0x13, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x31, 0x30, 0x5f, 0x53, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b,
	0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x53, 0x10, 0x15, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x31, 0x32, 0x5f, 0x53, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b,
	0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x31, 0x35, 0x5f, 0x53, 0x10, 0x17, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x32, 0x30, 0x5f, 0x53, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b,
	0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x33, 0x30, 0x5f, 0x53, 0x10, 0x19, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x31, 0x5f, 0x4d, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x32, 0x5f, 0x4d, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11,
	0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x33, 0x5f,
	0x4d, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x34, 0x5f, 0x4d, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4c,
	0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x35, 0x5f, 0x4d, 0x10,
	0x1e, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x31, 0x30, 0x5f, 0x4d, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4c, 0x58,
	0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x31, 0x36, 0x5f, 0x4d, 0x10,
	0x20, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4c, 0x58, 0x57, 0x41, 0x4b, 0x45, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x21, 0x2a, 0x7d, 0x0a, 0x0b,
	0x4e, 0x46, 0x43, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e,
	0x46, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x46, 0x43,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x54, 0x5f, 0x42, 0x5f, 0x50, 0x49, 0x4c, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x4e, 0x46, 0x43, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x94, 0x01, 0x0a, 0x18,
	0x4e, 0x46, 0x43, 0x53, 0x45, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x46, 0x43, 0x53,
	0x45, 0x43, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x4e, 0x46, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x50, 0x55, 0x42,
	0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45,
	0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x9c, 0x01, 0x0a, 0x1b, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x49, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x45, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x46,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0xa2, 0x01, 0x0a, 0x0e, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x45, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22,
	0x4e, 0x46, 0x43, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x10,
	0x02, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x94, 0x01, 0x0a, 0x18, 0x4e, 0x46, 0x43, 0x53, 0x45,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x44, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x46, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x2b, 0x0a, 0x27, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x44, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x98, 0x01,
	0x0a, 0x19, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x12, 0x23, 0x0a, 0x1f, 0x4e,
	0x46, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x50, 0x55, 0x42,
	0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x4e, 0x46, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43,
	0x4c, 0x45, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x46,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x50, 0x55, 0x42, 0x4b,
	0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x49, 0x45, 0x56, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x2a, 0x71, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0d, 0x52,
	0x43, 0x49, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x45, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x43, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x43, 0x49, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x2a, 0x80, 0x01, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x52,
	0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x02, 0x2a,
	0x70, 0x0a, 0x15, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4c, 0x45, 0x45,
	0x50, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4c, 0x45, 0x45, 0x50,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10,
	0x02, 0x2a, 0xe8, 0x03, 0x0a, 0x0f, 0x54, 0x50, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x45, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x27,
	0x0a, 0x23, 0x54, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x50, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x54,
	0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x57, 0x48,
	0x45, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x50, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c,
	0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x28, 0x0a,
	0x24, 0x54, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x50, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x54,
	0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x46,
	0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x53, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0c, 0x2a, 0x27, 0x0a, 0x0d,
	0x54, 0x50, 0x4d, 0x53, 0x41, 0x64, 0x76, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x50, 0x4d, 0x53, 0x5f, 0x41, 0x44, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x4d, 0x49, 0x10, 0x00, 0x2a, 0x92, 0x02, 0x0a, 0x10, 0x54, 0x50, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x50,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x50, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x57,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x54,
	0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x50, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x48, 0x45, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x56, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x3f, 0x0a, 0x3b, 0x54, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x48, 0x45, 0x45, 0x4c, 0x5f, 0x52,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x46, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x2a, 0x8f, 0x01, 0x0a, 0x18, 0x54,
	0x50, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x45, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x50, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x50,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0b,
	0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x55,
	0x49, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x55, 0x49, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x42, 0x4c, 0x45, 0x5f, 0x4e,
	0x49, 0x43, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x2a, 0xcf, 0x01, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x4f, 0x4f, 0x54, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x04, 0x2a, 0x91, 0x03, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52,
	0x43, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x21,
	0x0a, 0x1d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x06, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x09,
	0x2a, 0xda, 0x01, 0x0a, 0x0f, 0x55, 0x57, 0x42, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x57, 0x42, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x57, 0x42, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x55, 0x57, 0x42, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x55, 0x57, 0x42, 0x5f, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x55,
	0x57, 0x42, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x2a, 0xdf, 0x03,
	0x0a, 0x18, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x48,
	0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4b, 0x45, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x48, 0x49, 0x54,
	0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x48, 0x49, 0x54, 0x45,
	0x4c, 0x49, 0x53, 0x54, 0x4b, 0x45, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4b, 0x45, 0x59,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x48, 0x49, 0x54,
	0x45, 0x4c, 0x49, 0x53, 0x54, 0x4b, 0x45, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4b,
	0x45, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4b, 0x45, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x48,
	0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4b, 0x45, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4b, 0x45, 0x59, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x53, 0x45,
	0x4c, 0x46, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x07, 0x12, 0x36, 0x0a, 0x32, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x4b, 0x45, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x5f, 0x46, 0x4c, 0x45, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4b, 0x45, 0x59, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x1f, 0x2a,
	0xa1, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x44,
	0x53, 0x41, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0xe3, 0x04, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x46, 0x43, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x33, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x46, 0x4f, 0x42, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x4e, 0x46, 0x43, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x26, 0x0a,
	0x22, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x46, 0x43, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b, 0x4b, 0x45, 0x59,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x33, 0x5f, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x5f, 0x4b, 0x45,
	0x59, 0x46, 0x4f, 0x42, 0x5f, 0x50, 0x36, 0x30, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x45,
	0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c, 0x4b, 0x45, 0x59,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x33, 0x5f, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x32, 0x5f, 0x43, 0x41, 0x52, 0x5f, 0x4b,
	0x45, 0x59, 0x46, 0x4f, 0x42, 0x5f, 0x50, 0x36, 0x30, 0x10, 0x0a, 0x12, 0x30, 0x0a, 0x2c, 0x4b,
	0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x35,
	0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x32, 0x5f, 0x43, 0x41, 0x52,
	0x5f, 0x4b, 0x45, 0x59, 0x46, 0x4f, 0x42, 0x5f, 0x50, 0x36, 0x30, 0x10, 0x0b, 0x12, 0x33, 0x0a,
	0x2f, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x33, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x32, 0x5f, 0x43,
	0x41, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x46, 0x4f, 0x42, 0x5f, 0x50, 0x36, 0x30, 0x5f, 0x56, 0x32,
	0x10, 0x0c, 0x12, 0x33, 0x0a, 0x2f, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x33, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x47,
	0x45, 0x4e, 0x32, 0x5f, 0x43, 0x41, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x46, 0x4f, 0x42, 0x5f, 0x50,
	0x36, 0x30, 0x5f, 0x56, 0x33, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x45, 0x59, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x46, 0x43, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x50, 0x37, 0x31, 0x10, 0x0e, 0x2a, 0x9d, 0x04, 0x0a, 0x16, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x35, 0x0a, 0x31, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x06, 0x12, 0x2d, 0x0a,
	0x29, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x45,
	0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x07, 0x12, 0x2f, 0x0a, 0x2b,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4b, 0x45, 0x59,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x12, 0x2b, 0x0a,
	0x27, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x10, 0x2a, 0xd9, 0x07, 0x0a, 0x0b, 0x52, 0x4b,
	0x45, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4b, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x46, 0x52, 0x55, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
	0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x2b,
	0x0a, 0x27, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x08, 0x12, 0x1f, 0x0a,
	0x1b, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x50,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x09, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c,
	0x44, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4b, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4b, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x50, 0x4c, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0d, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4b, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4b,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x50,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x11,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x14,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x46, 0x54,
	0x10, 0x15, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45,
	0x46, 0x54, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x18,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x1a, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4b, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x1c, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4b, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x56,
	0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4b, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x56, 0x45, 0x48, 0x49,
	0x43, 0x4c, 0x45, 0x10, 0x1e, 0x2a, 0xa0, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x53, 0x55,
	0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4d,
	0x4f, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x2a, 0x60, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x12, 0x16, 0x0a,
	0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xf3, 0x08, 0x0a, 0x1b, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x34, 0x0a, 0x30, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x02, 0x12, 0x3c, 0x0a, 0x38, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x56, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x31, 0x0a, 0x2d, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x04, 0x12, 0x3d, 0x0a, 0x39, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x05, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x06, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x07, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x43, 0x44, 0x53,
	0x41, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x08, 0x12, 0x36, 0x0a,
	0x32, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x09, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x0a, 0x12, 0x3a,
	0x0a, 0x36, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52,
	0x49, 0x45, 0x56, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0b, 0x12, 0x3c, 0x0a, 0x38, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f,
	0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10,
	0x0d, 0x12, 0x3d, 0x0a, 0x39, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x0e,
	0x12, 0x33, 0x0a, 0x2f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x50,
	0x4f, 0x43, 0x48, 0x10, 0x0f, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x56, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x10, 0x12, 0x30,
	0x0a, 0x2c, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x11,
	0x12, 0x41, 0x0a, 0x3d, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x12, 0x12, 0x3b, 0x0a, 0x37, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x13,
	0x2a, 0x90, 0x10, 0x0a, 0x20, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49,
	0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x35,
	0x0a, 0x31, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x42, 0x0a, 0x3e, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49,
	0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x4f, 0x4e, 0x45, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x57, 0x48, 0x49,
	0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x46,
	0x4f, 0x42, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12,
	0x31, 0x0a, 0x2d, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x04, 0x12, 0x37, 0x0a, 0x33, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x06, 0x12, 0x3a, 0x0a, 0x36, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x07, 0x12, 0x46,
	0x0a, 0x42, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x4c, 0x0a, 0x48, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c,
	0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x4c, 0x45, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x53, 0x45,
	0x4c, 0x46, 0x10, 0x09, 0x12, 0x4b, 0x0a, 0x47, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53,
	0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x4e, 0x45, 0x53, 0x45, 0x4c, 0x46, 0x10,
	0x0a, 0x12, 0x47, 0x0a, 0x43, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0b, 0x12, 0x3e, 0x0a, 0x3a, 0x57, 0x48,
	0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x57,
	0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x59, 0x0a, 0x55, 0x57, 0x48,
	0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x54, 0x48, 0x41, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x46, 0x0a, 0x42, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49,
	0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x4e, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x41, 0x0a,
	0x3d, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x55, 0x54,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0f,
	0x12, 0x45, 0x0a, 0x41, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x10, 0x12, 0x48, 0x0a, 0x44, 0x57, 0x48, 0x49, 0x54, 0x45,
	0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4d, 0x5f, 0x41, 0x54, 0x54,
	0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x11, 0x12, 0x39, 0x0a, 0x35, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x57, 0x48, 0x49,
	0x4c, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x12, 0x12, 0x45, 0x0a, 0x41,
	0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x13, 0x12, 0x4a, 0x0a, 0x46, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x14, 0x12,
	0x51, 0x0a, 0x4d, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x43, 0x48,
	0x10, 0x15, 0x12, 0x62, 0x0a, 0x5e, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x5f,
	0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x16, 0x12, 0x44, 0x0a, 0x40, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c,
	0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x17, 0x12, 0x45, 0x0a, 0x41,
	0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x49, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x18, 0x12, 0x55, 0x0a, 0x51, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x50, 0x10, 0x19, 0x12, 0x58, 0x0a, 0x54, 0x57, 0x48,
	0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x55, 0x49, 0x5f, 0x41,
	0x43, 0x4b, 0x10, 0x1a, 0x12, 0x46, 0x0a, 0x42, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53,
	0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x56, 0x41, 0x4c, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x1b, 0x12, 0x45, 0x0a, 0x41,
	0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x1c, 0x2a, 0xc6, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4a, 0x41, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x4f, 0x53, 0x55,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55,
	0x4e, 0x4c, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x53,
	0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0x9f, 0x01, 0x0a,
	0x12, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x4c, 0x4f,
	0x43, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x4c, 0x4f, 0x43,
	0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45,
	0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x79,
	0x0a, 0x14, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c,
	0x45, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x48, 0x49,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x57, 0x41, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x45, 0x48, 0x49,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x45, 0x12, 0x21, 0x0a, 0x1d, 0x56,
	0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x42, 0x5f, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x65, 0x73, 0x6c, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x76, 0x63, 0x73, 0x65, 0x63, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x63, 0x73, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_vcsec_proto_rawDescOnce sync.Once
	file_vcsec_proto_rawDescData = file_vcsec_proto_rawDesc
)

func file_vcsec_proto_rawDescGZIP() []byte {
	file_vcsec_proto_rawDescOnce.Do(func() {
		file_vcsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_vcsec_proto_rawDescData)
	})
	return file_vcsec_proto_rawDescData
}

var file_vcsec_proto_enumTypes = make([]protoimpl.EnumInfo, 54)
var file_vcsec_proto_msgTypes = make([]protoimpl.MessageInfo, 91)
var file_vcsec_proto_goTypes = []interface{}{
	(Activity_E)(0),                                      // 0: VCSEC.Activity_E
	(AlertConfirmation)(0),                               // 1: VCSEC.AlertConfirmation
	(AppDeviceInfoRequest_E)(0),                          // 2: VCSEC.AppDeviceInfoRequest_E
	(AppOperatingSystem)(0),                              // 3: VCSEC.AppOperatingSystem
	(AuthenticationLevel_E)(0),                           // 4: VCSEC.AuthenticationLevel_E
	(AuthenticationReason_E)(0),                          // 5: VCSEC.AuthenticationReason_E
	(AuthenticationRejection_E)(0),                       // 6: VCSEC.AuthenticationRejection_E
	(BLEAdditionalTRIMApplied_E)(0),                      // 7: VCSEC.BLEAdditionalTRIMApplied_E
	(BLEConfigCommandType_E)(0),                          // 8: VCSEC.BLEConfigCommandType_E
	(BLEPresence)(0),                                     // 9: VCSEC.BLEPresence
	(CertificateStatus_E)(0),                             // 10: VCSEC.CertificateStatus_E
	(Device_Motion_Confidence)(0),                        // 11: VCSEC.Device_Motion_Confidence
	(Device_Motion_State)(0),                             // 12: VCSEC.Device_Motion_State
	(GenealogyRequest_E)(0),                              // 13: VCSEC.GenealogyRequest_E
	(GenealogyStatus_E)(0),                               // 14: VCSEC.GenealogyStatus_E
	(GetReaderKeyCommand)(0),                             // 15: VCSEC.GetReaderKeyCommand
	(HandlePulled_E)(0),                                  // 16: VCSEC.HandlePulled_E
	(IMURequest_E)(0),                                    // 17: VCSEC.IMURequest_E
	(IMUState_E)(0),                                      // 18: VCSEC.IMUState_E
	(LRDetectionResult_E)(0),                             // 19: VCSEC.LRDetectionResult_E
	(MIError_E)(0),                                       // 20: VCSEC.MIError_E
	(MLXWakePeriod_E)(0),                                 // 21: VCSEC.MLXWakePeriod_E
	(NFCPresence)(0),                                     // 22: VCSEC.NFCPresence
	(NFCSEDevicePubKeyState_E)(0),                        // 23: VCSEC.NFCSEDevicePubKeyState_E
	(NFCSEInsecureCommandState_E)(0),                     // 24: VCSEC.NFCSEInsecureCommandState_E
	(NFCSERequest_E)(0),                                  // 25: VCSEC.NFCSERequest_E
	(NFCSESharedSecretState_E)(0),                        // 26: VCSEC.NFCSESharedSecretState_E
	(NFCSEVehiclePubKeyState_E)(0),                       // 27: VCSEC.NFCSEVehiclePubKeyState_E
	(PublicKeyRequest_E)(0),                              // 28: VCSEC.PublicKeyRequest_E
	(PublicKeyStatus_E)(0),                               // 29: VCSEC.PublicKeyStatus_E
	(RCIControl_E)(0),                                    // 30: VCSEC.RCI_control_E
	(ResetTrackerCommand_E)(0),                           // 31: VCSEC.ResetTrackerCommand_E
	(SleepManagerCommand_E)(0),                           // 32: VCSEC.SleepManagerCommand_E
	(TPDataRequest_E)(0),                                 // 33: VCSEC.TPDataRequest_E
	(TPMSAdvType_E)(0),                                   // 34: VCSEC.TPMSAdvType_E
	(TPNotifyReason_E)(0),                                // 35: VCSEC.TPNotifyReason_E
	(TPNotifyTrackerCommand_E)(0),                        // 36: VCSEC.TPNotifyTrackerCommand_E
	(UIRequest_E)(0),                                     // 37: VCSEC.UIRequest_E
	(UpdaterLocation)(0),                                 // 38: VCSEC.UpdaterLocation
	(UpdaterStatusCode)(0),                               // 39: VCSEC.UpdaterStatusCode
	(UWBAvailability)(0),                                 // 40: VCSEC.UWBAvailability
	(WhitelistKeyPermission_E)(0),                        // 41: VCSEC.WhitelistKeyPermission_E
	(SignatureType)(0),                                   // 42: VCSEC.SignatureType
	(KeyFormFactor)(0),                                   // 43: VCSEC.KeyFormFactor
	(InformationRequestType)(0),                          // 44: VCSEC.InformationRequestType
	(RKEAction_E)(0),                                     // 45: VCSEC.RKEAction_E
	(ClosureMoveType_E)(0),                               // 46: VCSEC.ClosureMoveType_E
	(OperationStatus_E)(0),                               // 47: VCSEC.OperationStatus_E
	(SignedMessageInformation_E)(0),                      // 48: VCSEC.SignedMessage_information_E
	(WhitelistOperationInformation_E)(0),                 // 49: VCSEC.WhitelistOperation_information_E
	(ClosureState_E)(0),                                  // 50: VCSEC.ClosureState_E
	(VehicleLockState_E)(0),                              // 51: VCSEC.VehicleLockState_E
	(VehicleSleepStatus_E)(0),                            // 52: VCSEC.VehicleSleepStatus_E
	(UserPresence_E)(0),                                  // 53: VCSEC.UserPresence_E
	(*AccelData)(nil),                                    // 54: VCSEC.AccelData
	(*ActiveKey)(nil),                                    // 55: VCSEC.ActiveKey
	(*Alert)(nil),                                        // 56: VCSEC.Alert
	(*AlertHandlePulledWithoutAuth)(nil),                 // 57: VCSEC.AlertHandlePulledWithoutAuth
	(*AppDeviceInfo)(nil),                                // 58: VCSEC.AppDeviceInfo
	(*AppEventLog)(nil),                                  // 59: VCSEC.AppEventLog
	(*AppEventPeerRemovedPairingInformation)(nil),        // 60: VCSEC.AppEventPeerRemovedPairingInformation
	(*ASICSPIRead)(nil),                                  // 61: VCSEC.ASICSPIRead
	(*AuthenticationRequest)(nil),                        // 62: VCSEC.AuthenticationRequest
	(*AuthenticationRequestToken)(nil),                   // 63: VCSEC.AuthenticationRequestToken
	(*AuthenticationResponse)(nil),                       // 64: VCSEC.AuthenticationResponse
	(*BLEConfig)(nil),                                    // 65: VCSEC.BLEConfig
	(*BLEConfigAll)(nil),                                 // 66: VCSEC.BLEConfigAll
	(*BLEConfigCommand)(nil),                             // 67: VCSEC.BLEConfigCommand
	(*Capabilities)(nil),                                 // 68: VCSEC.Capabilities
	(*Certificate)(nil),                                  // 69: VCSEC.Certificate
	(*CertificateInParts)(nil),                           // 70: VCSEC.CertificateInParts
	(*CertificateRead)(nil),                              // 71: VCSEC.CertificateRead
	(*CertificateResponse)(nil),                          // 72: VCSEC.CertificateResponse
	(*ChallengeCommand)(nil),                             // 73: VCSEC.ChallengeCommand
	(*ChallengeResponse)(nil),                            // 74: VCSEC.ChallengeResponse
	(*CodeDescriptor)(nil),                               // 75: VCSEC.CodeDescriptor
	(*ConnectionMetrics)(nil),                            // 76: VCSEC.ConnectionMetrics
	(*DelaySleepRequest)(nil),                            // 77: VCSEC.DelaySleepRequest
	(*DeviceMotion)(nil),                                 // 78: VCSEC.DeviceMotion
	(*FromRCI)(nil),                                      // 79: VCSEC.FromRCI
	(*Genealogy)(nil),                                    // 80: VCSEC.Genealogy
	(*GenealogyResponse)(nil),                            // 81: VCSEC.GenealogyResponse
	(*GetCodeDescriptor)(nil),                            // 82: VCSEC.GetCodeDescriptor
	(*GetReaderKey)(nil),                                 // 83: VCSEC.GetReaderKey
	(*HandlePulledWithoutAuthDeviceSpecificPayload)(nil), // 84: VCSEC.HandlePulledWithoutAuthDeviceSpecificPayload
	(*KeyfobInfo)(nil),                                   // 85: VCSEC.KeyfobInfo
	(*KeyStatus)(nil),                                    // 86: VCSEC.KeyStatus
	(*KeyStatusInfo)(nil),                                // 87: VCSEC.KeyStatusInfo
	(*MIConfigurationData)(nil),                          // 88: VCSEC.MIConfigurationData
	(*MISessionRequest)(nil),                             // 89: VCSEC.MISessionRequest
	(*MISessionResponse)(nil),                            // 90: VCSEC.MISessionResponse
	(*MISessionStop)(nil),                                // 91: VCSEC.MISessionStop
	(*MISessionStopped)(nil),                             // 92: VCSEC.MISessionStopped
	(*NFCSEState)(nil),                                   // 93: VCSEC.NFCSEState
	(*PersonalizationInformation)(nil),                   // 94: VCSEC.PersonalizationInformation
	(*PhoneVersionInfo)(nil),                             // 95: VCSEC.PhoneVersionInfo
	(*PublicKeyResponse)(nil),                            // 96: VCSEC.PublicKeyResponse
	(*RCISignature)(nil),                                 // 97: VCSEC.RCISignature
	(*ResetTrackerStats)(nil),                            // 98: VCSEC.ResetTrackerStats
	(*RFMonitorCounterResponse)(nil),                     // 99: VCSEC.RFMonitorCounterResponse
	(*SetTPConfiguration)(nil),                           // 100: VCSEC.SetTPConfiguration
	(*SetUpdaterLocation)(nil),                           // 101: VCSEC.SetUpdaterLocation
	(*SleepManagerRequest)(nil),                          // 102: VCSEC.SleepManagerRequest
	(*SleepManagerStats)(nil),                            // 103: VCSEC.SleepManagerStats
	(*StageBlock)(nil),                                   // 104: VCSEC.StageBlock
	(*ToRCI)(nil),                                        // 105: VCSEC.ToRCI
	(*TPAdv)(nil),                                        // 106: VCSEC.TPAdv
	(*TPCapabilities)(nil),                               // 107: VCSEC.TPCapabilities
	(*TPConfiguration)(nil),                              // 108: VCSEC.TPConfiguration
	(*TPData)(nil),                                       // 109: VCSEC.TPData
	(*TPLRDetection)(nil),                                // 110: VCSEC.TPLRDetection
	(*TPMotionConfig)(nil),                               // 111: VCSEC.TPMotionConfig
	(*TPMSAlarms)(nil),                                   // 112: VCSEC.TPMSAlarms
	(*TPNewSensorData)(nil),                              // 113: VCSEC.TPNewSensorData
	(*TPNotifyTrackerStats)(nil),                         // 114: VCSEC.TPNotifyTrackerStats
	(*TPStationaryConfig)(nil),                           // 115: VCSEC.TPStationaryConfig
	(*TPWheelUnitInfo)(nil),                              // 116: VCSEC.TPWheelUnitInfo
	(*UnknownKeyInfo)(nil),                               // 117: VCSEC.UnknownKeyInfo
	(*UnsecureNotification)(nil),                         // 118: VCSEC.UnsecureNotification
	(*UpdaterCommand)(nil),                               // 119: VCSEC.UpdaterCommand
	(*UpdaterResponse)(nil),                              // 120: VCSEC.UpdaterResponse
	(*UpdaterStatus)(nil),                                // 121: VCSEC.UpdaterStatus
	(*VehicleBLENickName)(nil),                           // 122: VCSEC.VehicleBLENickName
	(*VehicleInfo)(nil),                                  // 123: VCSEC.VehicleInfo
	(*VerifyAndInstallApp)(nil),                          // 124: VCSEC.VerifyAndInstallApp
	(*SignedMessage)(nil),                                // 125: VCSEC.SignedMessage
	(*ToVCSECMessage)(nil),                               // 126: VCSEC.ToVCSECMessage
	(*KeyIdentifier)(nil),                                // 127: VCSEC.KeyIdentifier
	(*KeyMetadata)(nil),                                  // 128: VCSEC.KeyMetadata
	(*PublicKey)(nil),                                    // 129: VCSEC.PublicKey
	(*WhitelistInfo)(nil),                                // 130: VCSEC.WhitelistInfo
	(*WhitelistEntryInfo)(nil),                           // 131: VCSEC.WhitelistEntryInfo
	(*InformationRequest)(nil),                           // 132: VCSEC.InformationRequest
	(*ClosureMoveRequest)(nil),                           // 133: VCSEC.ClosureMoveRequest
	(*PermissionChange)(nil),                             // 134: VCSEC.PermissionChange
	(*ReplaceKey)(nil),                                   // 135: VCSEC.ReplaceKey
	(*WhitelistOperation)(nil),                           // 136: VCSEC.WhitelistOperation
	(*WhitelistOperationStatus)(nil),                     // 137: VCSEC.WhitelistOperation_status
	(*SignedMessageStatus)(nil),                          // 138: VCSEC.SignedMessage_status
	(*CommandStatus)(nil),                                // 139: VCSEC.CommandStatus
	(*UnsignedMessage)(nil),                              // 140: VCSEC.UnsignedMessage
	(*ClosureStatuses)(nil),                              // 141: VCSEC.ClosureStatuses
	(*DetailedClosureStatus)(nil),                        // 142: VCSEC.DetailedClosureStatus
	(*VehicleStatus)(nil),                                // 143: VCSEC.VehicleStatus
	(*FromVCSECMessage)(nil),                             // 144: VCSEC.FromVCSECMessage
	(keys.Role)(0),                                       // 145: Keys.Role
	(*signatures.SessionInfo)(nil),                       // 146: Signatures.SessionInfo
	(*errors.NominalError)(nil),                          // 147: Errors.NominalError
}
var file_vcsec_proto_depIdxs = []int32{
	127, // 0: VCSEC.ActiveKey.activeKey:type_name -> VCSEC.KeyIdentifier
	57,  // 1: VCSEC.Alert.alertHandlePulledWithoutAuth:type_name -> VCSEC.AlertHandlePulledWithoutAuth
	1,   // 2: VCSEC.Alert.alertConfirmation:type_name -> VCSEC.AlertConfirmation
	16,  // 3: VCSEC.AlertHandlePulledWithoutAuth.handlePulled:type_name -> VCSEC.HandlePulled_E
	84,  // 4: VCSEC.AlertHandlePulledWithoutAuth.deviceSpecificPayload:type_name -> VCSEC.HandlePulledWithoutAuthDeviceSpecificPayload
	3,   // 5: VCSEC.AppDeviceInfo.os:type_name -> VCSEC.AppOperatingSystem
	40,  // 6: VCSEC.AppDeviceInfo.UWBAvailable:type_name -> VCSEC.UWBAvailability
	95,  // 7: VCSEC.AppDeviceInfo.phoneVersion:type_name -> VCSEC.PhoneVersionInfo
	60,  // 8: VCSEC.AppEventLog.peerRemovedPairingInformation:type_name -> VCSEC.AppEventPeerRemovedPairingInformation
	127, // 9: VCSEC.AppEventPeerRemovedPairingInformation.keyId:type_name -> VCSEC.KeyIdentifier
	63,  // 10: VCSEC.AuthenticationRequest.sessionInfo:type_name -> VCSEC.AuthenticationRequestToken
	4,   // 11: VCSEC.AuthenticationRequest.requestedLevel:type_name -> VCSEC.AuthenticationLevel_E
	5,   // 12: VCSEC.AuthenticationRequest.reasonsForAuth:type_name -> VCSEC.AuthenticationReason_E
	4,   // 13: VCSEC.AuthenticationResponse.authenticationLevel:type_name -> VCSEC.AuthenticationLevel_E
	6,   // 14: VCSEC.AuthenticationResponse.authenticationRejection:type_name -> VCSEC.AuthenticationRejection_E
	8,   // 15: VCSEC.BLEConfigCommand.BLEConfigCommandType:type_name -> VCSEC.BLEConfigCommandType_E
	65,  // 16: VCSEC.BLEConfigCommand.BLEConfig:type_name -> VCSEC.BLEConfig
	70,  // 17: VCSEC.Certificate.certificateInParts:type_name -> VCSEC.CertificateInParts
	69,  // 18: VCSEC.CertificateResponse.certificate:type_name -> VCSEC.Certificate
	10,  // 19: VCSEC.CertificateResponse.certificateStatus:type_name -> VCSEC.CertificateStatus_E
	38,  // 20: VCSEC.CodeDescriptor.codeDescriptorLocation:type_name -> VCSEC.UpdaterLocation
	12,  // 21: VCSEC.DeviceMotion.states:type_name -> VCSEC.Device_Motion_State
	11,  // 22: VCSEC.DeviceMotion.confidence:type_name -> VCSEC.Device_Motion_Confidence
	80,  // 23: VCSEC.GenealogyResponse.currentGenealogy:type_name -> VCSEC.Genealogy
	14,  // 24: VCSEC.GenealogyResponse.status:type_name -> VCSEC.GenealogyStatus_E
	38,  // 25: VCSEC.GetCodeDescriptor.location:type_name -> VCSEC.UpdaterLocation
	15,  // 26: VCSEC.GetReaderKey.command:type_name -> VCSEC.GetReaderKeyCommand
	4,   // 27: VCSEC.HandlePulledWithoutAuthDeviceSpecificPayload.authenticationLevel:type_name -> VCSEC.AuthenticationLevel_E
	127, // 28: VCSEC.KeyStatus.keyId:type_name -> VCSEC.KeyIdentifier
	22,  // 29: VCSEC.KeyStatus.nfcPresence:type_name -> VCSEC.NFCPresence
	9,   // 30: VCSEC.KeyStatus.blePresence:type_name -> VCSEC.BLEPresence
	129, // 31: VCSEC.KeyStatus.publicKey:type_name -> VCSEC.PublicKey
	43,  // 32: VCSEC.KeyStatus.keyFormFactor:type_name -> VCSEC.KeyFormFactor
	86,  // 33: VCSEC.KeyStatusInfo.keyStatuses:type_name -> VCSEC.KeyStatus
	88,  // 34: VCSEC.MISessionResponse.MIConfigurationData:type_name -> VCSEC.MIConfigurationData
	20,  // 35: VCSEC.MISessionResponse.errorCode:type_name -> VCSEC.MIError_E
	23,  // 36: VCSEC.NFCSEState.devicePubKeyState:type_name -> VCSEC.NFCSEDevicePubKeyState_E
	27,  // 37: VCSEC.NFCSEState.vehiclePubKeyState:type_name -> VCSEC.NFCSEVehiclePubKeyState_E
	26,  // 38: VCSEC.NFCSEState.sharedSecretState:type_name -> VCSEC.NFCSESharedSecretState_E
	24,  // 39: VCSEC.NFCSEState.insecureCommandState:type_name -> VCSEC.NFCSEInsecureCommandState_E
	129, // 40: VCSEC.NFCSEState.vehiclePubKey:type_name -> VCSEC.PublicKey
	129, // 41: VCSEC.PublicKeyResponse.publicKey:type_name -> VCSEC.PublicKey
	29,  // 42: VCSEC.PublicKeyResponse.publicKeyStatus:type_name -> VCSEC.PublicKeyStatus_E
	108, // 43: VCSEC.SetTPConfiguration.config:type_name -> VCSEC.TPConfiguration
	38,  // 44: VCSEC.SetUpdaterLocation.updaterLocation:type_name -> VCSEC.UpdaterLocation
	77,  // 45: VCSEC.SleepManagerRequest.delaySleepRequest:type_name -> VCSEC.DelaySleepRequest
	32,  // 46: VCSEC.SleepManagerRequest.sleepManagerCommand:type_name -> VCSEC.SleepManagerCommand_E
	7,   // 47: VCSEC.SleepManagerStats.isBLETrimApplied:type_name -> VCSEC.BLEAdditionalTRIMApplied_E
	97,  // 48: VCSEC.ToRCI.rci_signature:type_name -> VCSEC.RCISignature
	35,  // 49: VCSEC.TPAdv.TPNotifyReason:type_name -> VCSEC.TPNotifyReason_E
	34,  // 50: VCSEC.TPAdv.TPMSAdvType:type_name -> VCSEC.TPMSAdvType_E
	115, // 51: VCSEC.TPConfiguration.stationaryConfig:type_name -> VCSEC.TPStationaryConfig
	111, // 52: VCSEC.TPConfiguration.motionConfig:type_name -> VCSEC.TPMotionConfig
	19,  // 53: VCSEC.TPLRDetection.LRDetectionResult:type_name -> VCSEC.LRDetectionResult_E
	21,  // 54: VCSEC.TPMotionConfig.motionPeriod:type_name -> VCSEC.MLXWakePeriod_E
	129, // 55: VCSEC.TPNewSensorData.sensorPublicKey:type_name -> VCSEC.PublicKey
	21,  // 56: VCSEC.TPStationaryConfig.stationaryTaskPeriod:type_name -> VCSEC.MLXWakePeriod_E
	86,  // 57: VCSEC.UnknownKeyInfo.keyStatus:type_name -> VCSEC.KeyStatus
	129, // 58: VCSEC.UnknownKeyInfo.publicKey:type_name -> VCSEC.PublicKey
	43,  // 59: VCSEC.UnknownKeyInfo.keyFormFactor:type_name -> VCSEC.KeyFormFactor
	141, // 60: VCSEC.UnsecureNotification.closureStatuses:type_name -> VCSEC.ClosureStatuses
	82,  // 61: VCSEC.UpdaterCommand.getCodeDescriptor:type_name -> VCSEC.GetCodeDescriptor
	101, // 62: VCSEC.UpdaterCommand.setUpdaterLocation:type_name -> VCSEC.SetUpdaterLocation
	104, // 63: VCSEC.UpdaterCommand.stageBlock:type_name -> VCSEC.StageBlock
	124, // 64: VCSEC.UpdaterCommand.verifyAndInstallApp:type_name -> VCSEC.VerifyAndInstallApp
	75,  // 65: VCSEC.UpdaterResponse.codeDescriptorMessage:type_name -> VCSEC.CodeDescriptor
	121, // 66: VCSEC.UpdaterResponse.updaterStatus:type_name -> VCSEC.UpdaterStatus
	39,  // 67: VCSEC.UpdaterStatus.statusCode:type_name -> VCSEC.UpdaterStatusCode
	38,  // 68: VCSEC.UpdaterStatus.location:type_name -> VCSEC.UpdaterLocation
	42,  // 69: VCSEC.SignedMessage.signatureType:type_name -> VCSEC.SignatureType
	125, // 70: VCSEC.ToVCSECMessage.signedMessage:type_name -> VCSEC.SignedMessage
	43,  // 71: VCSEC.KeyMetadata.keyFormFactor:type_name -> VCSEC.KeyFormFactor
	127, // 72: VCSEC.WhitelistInfo.whitelistEntries:type_name -> VCSEC.KeyIdentifier
	127, // 73: VCSEC.WhitelistEntryInfo.keyId:type_name -> VCSEC.KeyIdentifier
	129, // 74: VCSEC.WhitelistEntryInfo.publicKey:type_name -> VCSEC.PublicKey
	41,  // 75: VCSEC.WhitelistEntryInfo.permissions:type_name -> VCSEC.WhitelistKeyPermission_E
	128, // 76: VCSEC.WhitelistEntryInfo.metadataForKey:type_name -> VCSEC.KeyMetadata
	145, // 77: VCSEC.WhitelistEntryInfo.keyRole:type_name -> Keys.Role
	44,  // 78: VCSEC.InformationRequest.informationRequestType:type_name -> VCSEC.InformationRequestType
	127, // 79: VCSEC.InformationRequest.keyId:type_name -> VCSEC.KeyIdentifier
	46,  // 80: VCSEC.ClosureMoveRequest.frontDriverDoor:type_name -> VCSEC.ClosureMoveType_E
	46,  // 81: VCSEC.ClosureMoveRequest.frontPassengerDoor:type_name -> VCSEC.ClosureMoveType_E
	46,  // 82: VCSEC.ClosureMoveRequest.rearDriverDoor:type_name -> VCSEC.ClosureMoveType_E
	46,  // 83: VCSEC.ClosureMoveRequest.rearPassengerDoor:type_name -> VCSEC.ClosureMoveType_E
	46,  // 84: VCSEC.ClosureMoveRequest.rearTrunk:type_name -> VCSEC.ClosureMoveType_E
	46,  // 85: VCSEC.ClosureMoveRequest.frontTrunk:type_name -> VCSEC.ClosureMoveType_E
	46,  // 86: VCSEC.ClosureMoveRequest.chargePort:type_name -> VCSEC.ClosureMoveType_E
	46,  // 87: VCSEC.ClosureMoveRequest.tonneau:type_name -> VCSEC.ClosureMoveType_E
	129, // 88: VCSEC.PermissionChange.key:type_name -> VCSEC.PublicKey
	41,  // 89: VCSEC.PermissionChange.permission:type_name -> VCSEC.WhitelistKeyPermission_E
	145, // 90: VCSEC.PermissionChange.keyRole:type_name -> Keys.Role
	129, // 91: VCSEC.ReplaceKey.publicKeyToReplace:type_name -> VCSEC.PublicKey
	129, // 92: VCSEC.ReplaceKey.keyToAdd:type_name -> VCSEC.PublicKey
	145, // 93: VCSEC.ReplaceKey.keyRole:type_name -> Keys.Role
	129, // 94: VCSEC.WhitelistOperation.addPublicKeyToWhitelist:type_name -> VCSEC.PublicKey
	129, // 95: VCSEC.WhitelistOperation.removePublicKeyFromWhitelist:type_name -> VCSEC.PublicKey
	134, // 96: VCSEC.WhitelistOperation.addPermissionsToPublicKey:type_name -> VCSEC.PermissionChange
	134, // 97: VCSEC.WhitelistOperation.removePermissionsFromPublicKey:type_name -> VCSEC.PermissionChange
	134, // 98: VCSEC.WhitelistOperation.addKeyToWhitelistAndAddPermissions:type_name -> VCSEC.PermissionChange
	134, // 99: VCSEC.WhitelistOperation.updateKeyAndPermissions:type_name -> VCSEC.PermissionChange
	134, // 100: VCSEC.WhitelistOperation.addImpermanentKey:type_name -> VCSEC.PermissionChange
	134, // 101: VCSEC.WhitelistOperation.addImpermanentKeyAndRemoveExisting:type_name -> VCSEC.PermissionChange
	135, // 102: VCSEC.WhitelistOperation.replaceKey:type_name -> VCSEC.ReplaceKey
	128, // 103: VCSEC.WhitelistOperation.metadataForKey:type_name -> VCSEC.KeyMetadata
	49,  // 104: VCSEC.WhitelistOperation_status.whitelistOperationInformation:type_name -> VCSEC.WhitelistOperation_information_E
	127, // 105: VCSEC.WhitelistOperation_status.signerOfOperation:type_name -> VCSEC.KeyIdentifier
	47,  // 106: VCSEC.WhitelistOperation_status.operationStatus:type_name -> VCSEC.OperationStatus_E
	48,  // 107: VCSEC.SignedMessage_status.signedMessageInformation:type_name -> VCSEC.SignedMessage_information_E
	47,  // 108: VCSEC.CommandStatus.operationStatus:type_name -> VCSEC.OperationStatus_E
	138, // 109: VCSEC.CommandStatus.signedMessageStatus:type_name -> VCSEC.SignedMessage_status
	137, // 110: VCSEC.CommandStatus.whitelistOperationStatus:type_name -> VCSEC.WhitelistOperation_status
	132, // 111: VCSEC.UnsignedMessage.InformationRequest:type_name -> VCSEC.InformationRequest
	45,  // 112: VCSEC.UnsignedMessage.RKEAction:type_name -> VCSEC.RKEAction_E
	133, // 113: VCSEC.UnsignedMessage.closureMoveRequest:type_name -> VCSEC.ClosureMoveRequest
	136, // 114: VCSEC.UnsignedMessage.WhitelistOperation:type_name -> VCSEC.WhitelistOperation
	50,  // 115: VCSEC.ClosureStatuses.frontDriverDoor:type_name -> VCSEC.ClosureState_E
	50,  // 116: VCSEC.ClosureStatuses.frontPassengerDoor:type_name -> VCSEC.ClosureState_E
	50,  // 117: VCSEC.ClosureStatuses.rearDriverDoor:type_name -> VCSEC.ClosureState_E
	50,  // 118: VCSEC.ClosureStatuses.rearPassengerDoor:type_name -> VCSEC.ClosureState_E
	50,  // 119: VCSEC.ClosureStatuses.rearTrunk:type_name -> VCSEC.ClosureState_E
	50,  // 120: VCSEC.ClosureStatuses.frontTrunk:type_name -> VCSEC.ClosureState_E
	50,  // 121: VCSEC.ClosureStatuses.chargePort:type_name -> VCSEC.ClosureState_E
	50,  // 122: VCSEC.ClosureStatuses.tonneau:type_name -> VCSEC.ClosureState_E
	141, // 123: VCSEC.VehicleStatus.closureStatuses:type_name -> VCSEC.ClosureStatuses
	51,  // 124: VCSEC.VehicleStatus.vehicleLockState:type_name -> VCSEC.VehicleLockState_E
	52,  // 125: VCSEC.VehicleStatus.vehicleSleepStatus:type_name -> VCSEC.VehicleSleepStatus_E
	53,  // 126: VCSEC.VehicleStatus.userPresence:type_name -> VCSEC.UserPresence_E
	142, // 127: VCSEC.VehicleStatus.detailedClosureStatus:type_name -> VCSEC.DetailedClosureStatus
	143, // 128: VCSEC.FromVCSECMessage.vehicleStatus:type_name -> VCSEC.VehicleStatus
	146, // 129: VCSEC.FromVCSECMessage.sessionInfo:type_name -> Signatures.SessionInfo
	62,  // 130: VCSEC.FromVCSECMessage.authenticationRequest:type_name -> VCSEC.AuthenticationRequest
	139, // 131: VCSEC.FromVCSECMessage.commandStatus:type_name -> VCSEC.CommandStatus
	94,  // 132: VCSEC.FromVCSECMessage.personalizationInformation:type_name -> VCSEC.PersonalizationInformation
	130, // 133: VCSEC.FromVCSECMessage.whitelistInfo:type_name -> VCSEC.WhitelistInfo
	131, // 134: VCSEC.FromVCSECMessage.whitelistEntryInfo:type_name -> VCSEC.WhitelistEntryInfo
	123, // 135: VCSEC.FromVCSECMessage.vehicleInfo:type_name -> VCSEC.VehicleInfo
	68,  // 136: VCSEC.FromVCSECMessage.capabilities:type_name -> VCSEC.Capabilities
	87,  // 137: VCSEC.FromVCSECMessage.keyStatusInfo:type_name -> VCSEC.KeyStatusInfo
	55,  // 138: VCSEC.FromVCSECMessage.activeKey:type_name -> VCSEC.ActiveKey
	117, // 139: VCSEC.FromVCSECMessage.unknownKeyInfo:type_name -> VCSEC.UnknownKeyInfo
	37,  // 140: VCSEC.FromVCSECMessage.UIRequest:type_name -> VCSEC.UIRequest_E
	119, // 141: VCSEC.FromVCSECMessage.updaterCommand:type_name -> VCSEC.UpdaterCommand
	13,  // 142: VCSEC.FromVCSECMessage.genealogyRequest:type_name -> VCSEC.GenealogyRequest_E
	102, // 143: VCSEC.FromVCSECMessage.sleepManagerRequest:type_name -> VCSEC.SleepManagerRequest
	17,  // 144: VCSEC.FromVCSECMessage.imuRequest:type_name -> VCSEC.IMURequest_E
	25,  // 145: VCSEC.FromVCSECMessage.nfcseRequest:type_name -> VCSEC.NFCSERequest_E
	33,  // 146: VCSEC.FromVCSECMessage.TPDataRequest:type_name -> VCSEC.TPDataRequest_E
	31,  // 147: VCSEC.FromVCSECMessage.resetTrackerCommand:type_name -> VCSEC.ResetTrackerCommand_E
	36,  // 148: VCSEC.FromVCSECMessage.TPNotifyTrackerCommand:type_name -> VCSEC.TPNotifyTrackerCommand_E
	100, // 149: VCSEC.FromVCSECMessage.setTPConfiguration:type_name -> VCSEC.SetTPConfiguration
	118, // 150: VCSEC.FromVCSECMessage.unsecureNotification:type_name -> VCSEC.UnsecureNotification
	146, // 151: VCSEC.FromVCSECMessage.epochSessionInfo:type_name -> Signatures.SessionInfo
	105, // 152: VCSEC.FromVCSECMessage.toRCICommand:type_name -> VCSEC.ToRCI
	30,  // 153: VCSEC.FromVCSECMessage.rciControl:type_name -> VCSEC.RCI_control_E
	67,  // 154: VCSEC.FromVCSECMessage.BLEConfigCommand:type_name -> VCSEC.BLEConfigCommand
	2,   // 155: VCSEC.FromVCSECMessage.appDeviceInfoRequest:type_name -> VCSEC.AppDeviceInfoRequest_E
	56,  // 156: VCSEC.FromVCSECMessage.alert:type_name -> VCSEC.Alert
	147, // 157: VCSEC.FromVCSECMessage.nominalError:type_name -> Errors.NominalError
	89,  // 158: VCSEC.FromVCSECMessage.MISessionRequest:type_name -> VCSEC.MISessionRequest
	91,  // 159: VCSEC.FromVCSECMessage.MISessionStop:type_name -> VCSEC.MISessionStop
	112, // 160: VCSEC.FromVCSECMessage.clearTPMSAlarms:type_name -> VCSEC.TPMSAlarms
	71,  // 161: VCSEC.FromVCSECMessage.certificateRead:type_name -> VCSEC.CertificateRead
	73,  // 162: VCSEC.FromVCSECMessage.challengeCommand:type_name -> VCSEC.ChallengeCommand
	28,  // 163: VCSEC.FromVCSECMessage.publicKeyRequest:type_name -> VCSEC.PublicKeyRequest_E
	164, // [164:164] is the sub-list for method output_type
	164, // [164:164] is the sub-list for method input_type
	164, // [164:164] is the sub-list for extension type_name
	164, // [164:164] is the sub-list for extension extendee
	0,   // [0:164] is the sub-list for field type_name
}

func init() { file_vcsec_proto_init() }
func file_vcsec_proto_init() {
	if File_vcsec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vcsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertHandlePulledWithoutAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppEventLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppEventPeerRemovedPairingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASICSPIRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationRequestToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BLEConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BLEConfigAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BLEConfigCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateInParts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelaySleepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromRCI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Genealogy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenealogyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReaderKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlePulledWithoutAuthDeviceSpecificPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyfobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MIConfigurationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MISessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MISessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MISessionStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MISessionStopped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NFCSEState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalizationInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCISignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetTrackerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RFMonitorCounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTPConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUpdaterLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepManagerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepManagerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToRCI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPAdv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPLRDetection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPMotionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPMSAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPNewSensorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPNotifyTrackerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPStationaryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPWheelUnitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsecureNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdaterCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdaterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdaterStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleBLENickName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyAndInstallApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToVCSECMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistEntryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosureMoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistOperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedMessageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsignedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosureStatuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedClosureStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vcsec_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromVCSECMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vcsec_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Alert_AlertHandlePulledWithoutAuth)(nil),
		(*Alert_AlertConfirmation)(nil),
	}
	file_vcsec_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AppEventLog_PeerRemovedPairingInformation)(nil),
	}
	file_vcsec_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*BLEConfig_ADVInterval)(nil),
		(*BLEConfig_SleepClockAccuracy)(nil),
	}
	file_vcsec_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Certificate_CertificateInParts)(nil),
	}
	file_vcsec_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*MISessionResponse_MIConfigurationData)(nil),
		(*MISessionResponse_ErrorCode)(nil),
	}
	file_vcsec_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*MISessionStop_SessionId)(nil),
	}
	file_vcsec_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*MISessionStopped_SessionId)(nil),
	}
	file_vcsec_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*SleepManagerRequest_DelaySleepRequest)(nil),
		(*SleepManagerRequest_SleepManagerCommand)(nil),
	}
	file_vcsec_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*ToRCI_HMACSignature)(nil),
		(*ToRCI_RciSignature)(nil),
	}
	file_vcsec_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*TPConfiguration_StationaryConfig)(nil),
		(*TPConfiguration_MotionConfig)(nil),
	}
	file_vcsec_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*UpdaterCommand_GetCodeDescriptor)(nil),
		(*UpdaterCommand_SetUpdaterLocation)(nil),
		(*UpdaterCommand_StageBlock)(nil),
		(*UpdaterCommand_VerifyAndInstallApp)(nil),
		(*UpdaterCommand_FirmwareInfo)(nil),
	}
	file_vcsec_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*UpdaterResponse_CodeDescriptorMessage)(nil),
		(*UpdaterResponse_UpdaterStatus)(nil),
	}
	file_vcsec_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*InformationRequest_KeyId)(nil),
		(*InformationRequest_PublicKey)(nil),
		(*InformationRequest_Slot)(nil),
	}
	file_vcsec_proto_msgTypes[81].OneofWrappers = []interface{}{
		(*ReplaceKey_PublicKeyToReplace)(nil),
		(*ReplaceKey_SlotToReplace)(nil),
	}
	file_vcsec_proto_msgTypes[82].OneofWrappers = []interface{}{
		(*WhitelistOperation_AddPublicKeyToWhitelist)(nil),
		(*WhitelistOperation_RemovePublicKeyFromWhitelist)(nil),
		(*WhitelistOperation_AddPermissionsToPublicKey)(nil),
		(*WhitelistOperation_RemovePermissionsFromPublicKey)(nil),
		(*WhitelistOperation_AddKeyToWhitelistAndAddPermissions)(nil),
		(*WhitelistOperation_UpdateKeyAndPermissions)(nil),
		(*WhitelistOperation_AddImpermanentKey)(nil),
		(*WhitelistOperation_AddImpermanentKeyAndRemoveExisting)(nil),
		(*WhitelistOperation_RemoveAllImpermanentKeys)(nil),
		(*WhitelistOperation_ReplaceKey)(nil),
	}
	file_vcsec_proto_msgTypes[85].OneofWrappers = []interface{}{
		(*CommandStatus_SignedMessageStatus)(nil),
		(*CommandStatus_WhitelistOperationStatus)(nil),
	}
	file_vcsec_proto_msgTypes[86].OneofWrappers = []interface{}{
		(*UnsignedMessage_InformationRequest)(nil),
		(*UnsignedMessage_RKEAction)(nil),
		(*UnsignedMessage_ClosureMoveRequest)(nil),
		(*UnsignedMessage_WhitelistOperation)(nil),
	}
	file_vcsec_proto_msgTypes[90].OneofWrappers = []interface{}{
		(*FromVCSECMessage_VehicleStatus)(nil),
		(*FromVCSECMessage_SessionInfo)(nil),
		(*FromVCSECMessage_AuthenticationRequest)(nil),
		(*FromVCSECMessage_CommandStatus)(nil),
		(*FromVCSECMessage_PersonalizationInformation)(nil),
		(*FromVCSECMessage_WhitelistInfo)(nil),
		(*FromVCSECMessage_WhitelistEntryInfo)(nil),
		(*FromVCSECMessage_VehicleInfo)(nil),
		(*FromVCSECMessage_Capabilities)(nil),
		(*FromVCSECMessage_KeyStatusInfo)(nil),
		(*FromVCSECMessage_ActiveKey)(nil),
		(*FromVCSECMessage_UnknownKeyInfo)(nil),
		(*FromVCSECMessage_UIRequest)(nil),
		(*FromVCSECMessage_UpdaterCommand)(nil),
		(*FromVCSECMessage_GenealogyRequest)(nil),
		(*FromVCSECMessage_SleepManagerRequest)(nil),
		(*FromVCSECMessage_ImuRequest)(nil),
		(*FromVCSECMessage_NfcseRequest)(nil),
		(*FromVCSECMessage_TPDataRequest)(nil),
		(*FromVCSECMessage_ResetTrackerCommand)(nil),
		(*FromVCSECMessage_TPNotifyTrackerCommand)(nil),
		(*FromVCSECMessage_SetTPConfiguration)(nil),
		(*FromVCSECMessage_UnsecureNotification)(nil),
		(*FromVCSECMessage_EpochSessionInfo)(nil),
		(*FromVCSECMessage_ToRCICommand)(nil),
		(*FromVCSECMessage_RciControl)(nil),
		(*FromVCSECMessage_BLEConfigCommand)(nil),
		(*FromVCSECMessage_AppDeviceInfoRequest)(nil),
		(*FromVCSECMessage_Alert)(nil),
		(*FromVCSECMessage_NominalError)(nil),
		(*FromVCSECMessage_MISessionRequest)(nil),
		(*FromVCSECMessage_MISessionStop)(nil),
		(*FromVCSECMessage_ClearTPMSAlarms)(nil),
		(*FromVCSECMessage_CertificateRead)(nil),
		(*FromVCSECMessage_ChallengeCommand)(nil),
		(*FromVCSECMessage_PublicKeyRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vcsec_proto_rawDesc,
			NumEnums:      54,
			NumMessages:   91,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vcsec_proto_goTypes,
		DependencyIndexes: file_vcsec_proto_depIdxs,
		EnumInfos:         file_vcsec_proto_enumTypes,
		MessageInfos:      file_vcsec_proto_msgTypes,
	}.Build()
	File_vcsec_proto = out.File
	file_vcsec_proto_rawDesc = nil
	file_vcsec_proto_goTypes = nil
	file_vcsec_proto_depIdxs = nil
}
